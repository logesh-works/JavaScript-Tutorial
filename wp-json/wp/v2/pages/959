{"id":959,"date":"2016-11-25T06:17:30","date_gmt":"2016-11-25T14:17:30","guid":{"rendered":"http:\/\/https://jsprifix.netlify.app/\/?page_id=959"},"modified":"2022-01-23T22:49:54","modified_gmt":"2022-01-24T06:49:54","slug":"octal-and-binary-literals","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/es6\/octal-and-binary-literals\/","title":{"rendered":"A Quick Look at Octal and Binary Literals in ES6"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to represent the octal and binary literals in ES6.<\/p>\n\n\n\n<p>ES5 provided numeric literals in octal (prefix <code>0<\/code>), decimal (no prefix), and hexadecimal (<code>0x<\/code>). ES6 added support for binary literals and changed how it represents octal literals.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Octal literals<\/h2>\n\n\n\n<p>To represent an octal literal in ES5, you use the zero prefix (<code>0<\/code>) followed by a sequence of octal digits (from 0 to 7). For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> a = <span class=\"hljs-number\">051<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(a); <span class=\"hljs-comment\">\/\/ 41<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If the octal literal contains a number that is out of range, JavaScript ignores the leading 0 and treats the octal literal as a decimal, as shown in the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> b = <span class=\"hljs-number\">058<\/span>; <span class=\"hljs-comment\">\/\/ invalid octal<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(b); <span class=\"hljs-comment\">\/\/ 58<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, since <code>8<\/code> is an invalid digit for representing the octal number, JavaScript ignores the 0 and treats the whole number as a decimal with a value of 58.<\/p>\n\n\n\n<p>Note you can use the octal literals in non-strict mode. If you use them in strict mode, JavaScript will throw an error.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-meta\">\"use strict\"<\/span>\n<span class=\"hljs-keyword\">let<\/span> b = <span class=\"hljs-number\">058<\/span>; <span class=\"hljs-comment\">\/\/ invalid octal <\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(b);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Here is the error message:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">SyntaxError<\/span>: Decimals <span class=\"hljs-keyword\">with<\/span> leading zeros are not allowed <span class=\"hljs-keyword\">in<\/span> strict mode.<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>ES6 allows you to specify the octal literal by using the prefix <code>0o<\/code> followed by a sequence of octal digits from 0 through 7. Here is an example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> c = <span class=\"hljs-number\">0o51<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(c); <span class=\"hljs-comment\">\/\/ 41 <\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you use an invalid number in the octal literal, JavaScript will throw a <code>SyntaxError<\/code> as shown in the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> d = <span class=\"hljs-number\">0o5<\/span>8;\n<span class=\"hljs-built_in\">console<\/span>.log(d); <span class=\"hljs-comment\">\/\/ SyntaxError<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Binary literals<\/h2>\n\n\n\n<p>In ES5, JavaScript didn&#8217;t provide any literal form for binary numbers. To parse a binary string, you use the <code>parseInt()<\/code> function as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> e = <span class=\"hljs-built_in\">parseInt<\/span>(<span class=\"hljs-string\">'111'<\/span>,<span class=\"hljs-number\">2<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(e); <span class=\"hljs-comment\">\/\/ 7<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>ES6 added support for binary literals by using the <code>0b<\/code>&nbsp;prefix followed by a sequence of binary numbers (0 and 1). Here is an example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> f = <span class=\"hljs-number\">0b111<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(f); <span class=\"hljs-comment\">\/\/ 7<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>Octal literals start with <code>0o<\/code>  followed by a sequence of numbers between 0 and 7.<\/li><li>Binary literals start with <code>0b<\/code> followed by a sequence of number 0 and 1.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"959\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es6\/octal-and-binary-literals\/\"\n\t\t\t\tdata-post-title=\"A Quick Look at Octal and Binary Literals in ES6\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"959\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es6\/octal-and-binary-literals\/\"\n\t\t\t\tdata-post-title=\"A Quick Look at Octal and Binary Literals in ES6\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>in this tutorial, you will learn how to represent the octal and binary literals in ES6.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":9,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>A Quick Look at Octal and Binary Literals in ES6<\/title>\n<meta name=\"description\" content=\"This tutorial shows you how to represent octal and binary literals in ES6. The octal literal uses 0o prefix while the binary literals use 0b prefix.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/octal-and-binary-literals\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"A Quick Look at Octal and Binary Literals in ES6\" \/>\n<meta property=\"og:description\" content=\"This tutorial shows you how to represent octal and binary literals in ES6. The octal literal uses 0o prefix while the binary literals use 0b prefix.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/es6\/octal-and-binary-literals\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-24T06:49:54+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"2 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/octal-and-binary-literals\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/octal-and-binary-literals\/\",\"name\":\"A Quick Look at Octal and Binary Literals in ES6\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2016-11-25T14:17:30+00:00\",\"dateModified\":\"2022-01-24T06:49:54+00:00\",\"description\":\"This tutorial shows you how to represent octal and binary literals in ES6. The octal literal uses 0o prefix while the binary literals use 0b prefix.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/octal-and-binary-literals\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/es6\/octal-and-binary-literals\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/octal-and-binary-literals\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"A Quick Look at Octal and Binary Literals in ES6\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"A Quick Look at Octal and Binary Literals in ES6","description":"This tutorial shows you how to represent octal and binary literals in ES6. The octal literal uses 0o prefix while the binary literals use 0b prefix.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/es6\/octal-and-binary-literals\/","og_locale":"en_US","og_type":"article","og_title":"A Quick Look at Octal and Binary Literals in ES6","og_description":"This tutorial shows you how to represent octal and binary literals in ES6. The octal literal uses 0o prefix while the binary literals use 0b prefix.","og_url":"https:\/\/https://jsprifix.netlify.app/\/es6\/octal-and-binary-literals\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-24T06:49:54+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"2 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/octal-and-binary-literals\/","url":"https:\/\/https://jsprifix.netlify.app/\/es6\/octal-and-binary-literals\/","name":"A Quick Look at Octal and Binary Literals in ES6","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2016-11-25T14:17:30+00:00","dateModified":"2022-01-24T06:49:54+00:00","description":"This tutorial shows you how to represent octal and binary literals in ES6. The octal literal uses 0o prefix while the binary literals use 0b prefix.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/octal-and-binary-literals\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/es6\/octal-and-binary-literals\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/octal-and-binary-literals\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"A Quick Look at Octal and Binary Literals in ES6"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/959"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=959"}],"version-history":[{"count":4,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/959\/revisions"}],"predecessor-version":[{"id":89375,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/959\/revisions\/89375"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=959"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}