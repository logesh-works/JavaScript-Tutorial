{"id":834,"date":"2016-10-19T01:53:01","date_gmt":"2016-10-19T08:53:01","guid":{"rendered":"http:\/\/https://jsprifix.netlify.app/\/?page_id=834"},"modified":"2022-08-18T17:18:41","modified_gmt":"2022-08-19T00:18:41","slug":"javascript-this","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/","title":{"rendered":"Demystifying the JavaScript this Keyword"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will&nbsp; learn about the JavaScript <code>this<\/code> value and understand it clearly in various contexts.<\/p>\n\n\n\n<p>If you have been working with other programming languages such as Java, <a href=\"https:\/\/www.csharptutorial.net\/csharp-tutorial\/csharp-this\/\" target=\"_blank\" rel=\"noreferrer noopener\">C#<\/a>, or <a href=\"https:\/\/www.phptutorial.net\/php-oop\/php-this\/\" target=\"_blank\" rel=\"noreferrer noopener\">PHP<\/a>, you&#8217;re already familiar with the <code>this<\/code> keyword. <\/p>\n\n\n\n<p>In these languages, the&nbsp;<code>this <\/code>keyword represents the current instance of the class. And it is only relevant within the class.<\/p>\n\n\n\n<p>JavaScript also has <code>this<\/code> keyword. However, the <code>this<\/code> keyword in JavaScript behaves differently from other programming languages. <\/p>\n\n\n\n<p>In JavaScript, you can use the&nbsp;<code>this<\/code> keyword in the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-execution-context\/\">global and function contexts<\/a>. Moreover, the behavior of the &nbsp;<code>this<\/code> keyword changes between strict and non-strict modes.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">What is this keyword<\/h2>\n\n\n\n<p>In general, the <code>this<\/code> references the object of which the function is a property. In other words, the <code>this<\/code> references the object that is currently calling the function.<\/p>\n\n\n\n<p>Suppose you have an object called <code>counter<\/code> that has a method <code>next()<\/code>. When you call the <code>next()<\/code> method, you can access the <code>this<\/code> object.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> counter = {\n  <span class=\"hljs-attr\">count<\/span>: <span class=\"hljs-number\">0<\/span>,\n  <span class=\"hljs-attr\">next<\/span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">return<\/span> ++<span class=\"hljs-keyword\">this<\/span>.count;\n  },\n};\n\ncounter.next();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Inside the <code>next()<\/code> function, the <code>this<\/code> references the <code>counter<\/code> object. See the following method call:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">counter<\/span><span class=\"hljs-selector-class\">.next<\/span>();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>next()<\/code> is a function that is the property of the <code>counter<\/code> object. Therefore, inside the <code>next()<\/code> function, the <code>this<\/code> references the <code>counter<\/code> object.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Global context<\/h2>\n\n\n\n<p>In the global context, the <code>this<\/code> references the <a href=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-globalthis\/\">global object<\/a>, which is the <code>window<\/code> object on the web browser or <code>global<\/code> object on Node.js. <\/p>\n\n\n\n<p>This behavior is consistent in both strict and non-strict modes. Here&#8217;s the output on the web browser:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">this<\/span> === <span class=\"hljs-built_in\">window<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you assign a property to <code>this<\/code> object in the global context, JavaScript will add the property to the global object as shown in the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">this<\/span>.color= <span class=\"hljs-string\">'Red'<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">window<\/span>.color); <span class=\"hljs-comment\">\/\/ 'Red'<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Function context<\/h2>\n\n\n\n<p>In JavaScript, you can call a <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-function\/\">function<\/a> in the following ways:<\/p>\n\n\n\n<ul><li>Function invocation<\/li><li>Method invocation<\/li><li>Constructor invocation<\/li><li>Indirect invocation<\/li><\/ul>\n\n\n\n<p>Each function invocation defines its own context. Therefore, the <code>this<\/code> behaves differently.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"function_invocation\">1) Simple function invocation<\/h3>\n\n\n\n<p>In the non-strict mode, the <code>this<\/code> references the global object when the function is called as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">show<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n   <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">this<\/span> === <span class=\"hljs-built_in\">window<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span>\n}\n\nshow();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When you call the <code>show()<\/code> function, the <code>this<\/code> references the <a href=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-globalthis\/\">global object<\/a>, which is the <code>window<\/code> on the web browser and <code>global<\/code> on Node.js.<\/p>\n\n\n\n<p>Calling the <code>show()<\/code> function is the same as:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">window<\/span>.show();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In the strict mode, JavaScript sets the <code>this<\/code> inside a function to <code>undefined<\/code>. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-meta\">\"use strict\"<\/span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">show<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">this<\/span> === <span class=\"hljs-literal\">undefined<\/span>);\n}\n\nshow();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To enable the strict mode, you use the directive <code>\"use strict\"<\/code> at the beginning of the JavaScript file. If you want to apply the strict mode to a specific function only, you place it at the top of the function body. <\/p>\n\n\n\n<p>Note that the strict mode has been available since ECMAScript 5.1. The <code>strict<\/code> mode applies to both function and nested functions. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">show<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-string\">\"use strict\"<\/span>;\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">this<\/span> === <span class=\"hljs-literal\">undefined<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">display<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">this<\/span> === <span class=\"hljs-literal\">undefined<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span>\n    }\n    display();\n}\n\nshow();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-literal\">true<\/span>\n<span class=\"hljs-literal\">true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In the <code>display()<\/code> inner function, the <code>this<\/code> also set to <code>undefined<\/code> as shown in the console.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"method_invocation\">2) Method invocation<\/h3>\n\n\n\n<p>When you call a method of an object, JavaScript sets <code>this<\/code> to the object that owns the method. See the following <code>car<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> car = {\n    <span class=\"hljs-attr\">brand<\/span>: <span class=\"hljs-string\">'Honda'<\/span>,\n    <span class=\"hljs-attr\">getBrand<\/span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.brand;\n    }\n}\n\n<span class=\"hljs-built_in\">console<\/span>.log(car.getBrand()); <span class=\"hljs-comment\">\/\/ Honda<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>this<\/code> object in the <code>getBrand()<\/code> method references the <code>car<\/code> object.<\/p>\n\n\n\n<p>Since a method is a property of an object which is a value, you can store it in a variable.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> brand = car.getBrand;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And then call the method via the variable<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(brand()); <span class=\"hljs-comment\">\/\/ undefined<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>You get <code>undefined<\/code> instead of <code>\"Honda\"<\/code> because when you call a method without specifying its object, JavaScript sets <code>this<\/code> to the global object in non-strict mode and <code>undefined<\/code> in the strict mode.<\/p>\n\n\n\n<p>To fix this issue, you use the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-bind\/\">bind()<\/a><\/code> method of the <code>Function.prototype<\/code> object. The <code>bind()<\/code> method creates a new function whose the <code>this<\/code> keyword is set to a specified value.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> brand = car.getBrand.bind(car);\n<span class=\"hljs-built_in\">console<\/span>.log(brand()); <span class=\"hljs-comment\">\/\/ Honda<\/span>\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, when you call the <code>brand()<\/code> method, the <code>this<\/code> keyword is bound to the <code>car<\/code> object. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> car = {\n    <span class=\"hljs-attr\">brand<\/span>: <span class=\"hljs-string\">'Honda'<\/span>,\n    <span class=\"hljs-attr\">getBrand<\/span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.brand;\n    }\n}\n\n<span class=\"hljs-keyword\">let<\/span> bike = {\n    <span class=\"hljs-attr\">brand<\/span>: <span class=\"hljs-string\">'Harley Davidson'<\/span>\n}\n\n<span class=\"hljs-keyword\">let<\/span> brand = car.getBrand.bind(bike);\n<span class=\"hljs-built_in\">console<\/span>.log(brand());<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">Harley Davidson<\/code><\/span><\/pre>\n\n\n<p>In this example, the <code>bind()<\/code> method sets the <code>this<\/code> to the <code>bike<\/code> object, therefore, you see the value of the <code>brand<\/code> property of the <code>bike<\/code> object on the console.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"constructor_invocation\">3) Constructor invocation<\/h3>\n\n\n\n<p>When you use the <code>new<\/code> keyword to create an instance of a function object, you use the function as a constructor. <\/p>\n\n\n\n<p>The following example declares a <code>Car<\/code> function, then invokes it as a constructor:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Car<\/span>(<span class=\"hljs-params\">brand<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">this<\/span>.brand = brand;\n}\n\nCar.prototype.getBrand = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.brand;\n}\n\n<span class=\"hljs-keyword\">let<\/span> car = <span class=\"hljs-keyword\">new<\/span> Car(<span class=\"hljs-string\">'Honda'<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(car.getBrand());<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The expression <code>new Car('Honda')<\/code> is a constructor invocation of the <code>Car<\/code> function. <\/p>\n\n\n\n<p>JavaScript creates a new object and sets <code>this<\/code> to the newly created object. This pattern works great with only one potential problem. <\/p>\n\n\n\n<p>Now, you can invoke the <code>Car()<\/code> as a function or as a constructor. If you omit the <code>new<\/code> keyword as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> bmw = Car(<span class=\"hljs-string\">'BMW'<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(bmw.brand);\n<span class=\"hljs-comment\">\/\/ =&gt; TypeError: Cannot read property 'brand' of undefined<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Since the <code>this<\/code> value in the <code>Car()<\/code> sets to the global object, the <code>bmw.brand<\/code> returns <code>undefined<\/code>. <\/p>\n\n\n\n<p>To make sure that the <code>Car()<\/code> function is always invoked using constructor invocation, you add a check at the beginning of the <code>Car()<\/code> function as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Car<\/span>(<span class=\"hljs-params\">brand<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">if<\/span> (!(<span class=\"hljs-keyword\">this<\/span> <span class=\"hljs-keyword\">instanceof<\/span> Car)) {\n        <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-built_in\">Error<\/span>(<span class=\"hljs-string\">'Must use the new operator to call the function'<\/span>);\n    }\n    <span class=\"hljs-keyword\">this<\/span>.brand = brand;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>ES6 introduced a meta-property named <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-new-target\/\"><code>new.target<\/code><\/a> that allows you to detect whether a function is invoked as a simple invocation or as a constructor. <\/p>\n\n\n\n<p>You can modify the <code>Car()<\/code> function that uses the <code>new.target<\/code> metaproperty as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Car<\/span>(<span class=\"hljs-params\">brand<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">if<\/span> (!<span class=\"hljs-keyword\">new<\/span>.target) {\n        <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-built_in\">Error<\/span>(<span class=\"hljs-string\">'Must use the new operator to call the function'<\/span>);\n    }\n    <span class=\"hljs-keyword\">this<\/span>.brand = brand;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\" id=\"indirect_invocation\">4) Indirect Invocation<\/h3>\n\n\n\n<p>In JavaScript, <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-functions-are-first-class-citizens\/\">functions are first-class citizens<\/a>. In other words, functions are objects, which are instances of the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/\">Function type<\/a>. <\/p>\n\n\n\n<p>The <code>Function<\/code> type has two methods: <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-call\/\">call()<\/a><\/code> and <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-apply-method\/\">apply()<\/a><\/code> . These methods allow you to set the <code>this<\/code> value when calling a function. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-19\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getBrand<\/span>(<span class=\"hljs-params\">prefix<\/span>) <\/span>{\n    <span class=\"hljs-built_in\">console<\/span>.log(prefix + <span class=\"hljs-keyword\">this<\/span>.brand);\n}\n\n<span class=\"hljs-keyword\">let<\/span> honda = {\n    <span class=\"hljs-attr\">brand<\/span>: <span class=\"hljs-string\">'Honda'<\/span>\n};\n<span class=\"hljs-keyword\">let<\/span> audi = {\n    <span class=\"hljs-attr\">brand<\/span>: <span class=\"hljs-string\">'Audi'<\/span>\n};\n\ngetBrand.call(honda, <span class=\"hljs-string\">\"It's a \"<\/span>);\ngetBrand.call(audi, <span class=\"hljs-string\">\"It's an \"<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-19\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-20\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">It<span class=\"hljs-string\">'s a Honda\nIt'<\/span>s an Audi<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-20\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we called the <code>getBrand()<\/code> function indirectly using the <code>call()<\/code> method of the <code>getBrand<\/code> function. We passed <code>honda<\/code> and &nbsp;<code>audi<\/code> object as the first argument of the <code>call()<\/code> method, therefore, we got the corresponding brand in each call. <\/p>\n\n\n\n<p>The <code>apply()<\/code> method is similar to the <code>call()<\/code> method except that its second argument is an array of arguments.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-21\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">getBrand.apply(honda, &#91;<span class=\"hljs-string\">\"It's a \"<\/span>]); <span class=\"hljs-comment\">\/\/ \"It's a Honda\"<\/span>\ngetBrand.apply(audi, &#91;<span class=\"hljs-string\">\"It's an \"<\/span>]); <span class=\"hljs-comment\">\/\/ \"It's a Audi\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-21\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Arrow functions<\/h2>\n\n\n\n<p><a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/\">ES6 <\/a>introduced a new concept called <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/\">arrow function<\/a>. In arrow functions, JavaScript sets the <code>this<\/code> lexically. <\/p>\n\n\n\n<p>It means the arrow function does not create its own <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-execution-context\/\">execution context<\/a> but inherits the <code>this<\/code>&nbsp;from the outer function where the arrow function is defined. See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-22\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> getThis = <span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> <span class=\"hljs-keyword\">this<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(getThis() === <span class=\"hljs-built_in\">window<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-22\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>this<\/code> value is set to the global object i.e., <code>window<\/code> in the web browser.<\/p>\n\n\n\n<p>Since an arrow function does not create its own execution context, defining a method using an arrow function will cause an issue. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-23\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Car<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\r\n  <span class=\"hljs-keyword\">this<\/span>.speed = <span class=\"hljs-number\">120<\/span>;\r\n}\r\n\r\nCar.prototype.getSpeed = <span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\r\n  <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.speed;\r\n};\r\n\r\n<span class=\"hljs-keyword\">var<\/span> car = <span class=\"hljs-keyword\">new<\/span> Car();\r\n<span class=\"hljs-built_in\">console<\/span>.log(car.getSpeed()); <span class=\"hljs-comment\">\/\/ \ud83d\udc49 undefined<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-23\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Inside the <code>getSpeed()<\/code> method, the <code>this<\/code> value reference the global object, not the <code>Car<\/code> object but the global object doesn&#8217;t have a property called speed. Therefore, the <code>this.speed<\/code> in the <code>getSpeed()<\/code> method returns <code>undefined<\/code>.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"834\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/\"\n\t\t\t\tdata-post-title=\"Demystifying the JavaScript this Keyword\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"834\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/\"\n\t\t\t\tdata-post-title=\"Demystifying the JavaScript this Keyword\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about the JavaScript this value and understand it clearly in various contexts.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":48,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Demystifying JavaScript this Keyword with Practical Examples<\/title>\n<meta name=\"description\" content=\"This tutorial helps you master the JavaScript this keyword by showing you various practical examples.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Demystifying JavaScript this Keyword with Practical Examples\" \/>\n<meta property=\"og:description\" content=\"This tutorial helps you master the JavaScript this keyword by showing you various practical examples.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-08-19T00:18:41+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/\",\"name\":\"Demystifying JavaScript this Keyword with Practical Examples\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2016-10-19T08:53:01+00:00\",\"dateModified\":\"2022-08-19T00:18:41+00:00\",\"description\":\"This tutorial helps you master the JavaScript this keyword by showing you various practical examples.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Demystifying the JavaScript this Keyword\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Demystifying JavaScript this Keyword with Practical Examples","description":"This tutorial helps you master the JavaScript this keyword by showing you various practical examples.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/","og_locale":"en_US","og_type":"article","og_title":"Demystifying JavaScript this Keyword with Practical Examples","og_description":"This tutorial helps you master the JavaScript this keyword by showing you various practical examples.","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-08-19T00:18:41+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/","name":"Demystifying JavaScript this Keyword with Practical Examples","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2016-10-19T08:53:01+00:00","dateModified":"2022-08-19T00:18:41+00:00","description":"This tutorial helps you master the JavaScript this keyword by showing you various practical examples.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-this\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"Demystifying the JavaScript this Keyword"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/834"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=834"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/834\/revisions"}],"predecessor-version":[{"id":90330,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/834\/revisions\/90330"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=834"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}