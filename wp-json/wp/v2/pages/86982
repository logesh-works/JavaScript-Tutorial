{"id":86982,"date":"2020-05-04T20:00:37","date_gmt":"2020-05-05T03:00:37","guid":{"rendered":"https:\/\/www.javascripttutorial.net\/?page_id=86982"},"modified":"2022-02-16T16:24:46","modified_gmt":"2022-02-17T00:24:46","slug":"regular-expression-quantifiers","status":"publish","type":"page","link":"https:\/\/www.javascripttutorial.net\/regular-expression-quantifiers\/","title":{"rendered":"Regular Expression: Quantifiers"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use quantifiers to match a number of instances of a character, group, or character class in a string.<\/p>\n\n\n\n<p>Quantifiers match a number of instances of a character, group, or <a href=\"https:\/\/www.javascripttutorial.net\/javascript-character-classes\/\">character class<\/a> in a string.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"quantity\">Quantity<\/h2>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"exact-count-n\">Exact count <code>{n}<\/code><\/h3>\n\n\n\n<p>A number in curly braces <code>{n}<\/code>is the simplest quantifier. When you append it to a character or character class, it specifies how many characters or character classes you want to match.<\/p>\n\n\n\n<p>For example, the regular expression <code>\/\\d{4}\/<\/code> matches a four-digit number. It is the same as <code>\/\\d\\d\\d\\d\/<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> str = <span class=\"hljs-string\">'ECMAScript 2020'<\/span>;\n<span class=\"hljs-keyword\">let<\/span> re = <span class=\"hljs-regexp\">\/\\d{4}\/<\/span>;\n\n<span class=\"hljs-keyword\">let<\/span> result = str.match(re);\n\n<span class=\"hljs-built_in\">console<\/span>.log(result);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">&#91;<span class=\"hljs-string\">\"2020\"<\/span>]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\" id=\"the-range-n-m\">The range <code>{n,m}<\/code><\/h3>\n\n\n\n<p>The range matches a character or character class from <code>n<\/code> to <code>m<\/code> times. <\/p>\n\n\n\n<p>For example, to find numbers that have two, three, or four digits, you use the regular expression <code>\/\\d{2,4}\/g<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> str = <span class=\"hljs-string\">'The official name of ES11 is ES2020'<\/span>;\n<span class=\"hljs-keyword\">let<\/span> re = <span class=\"hljs-regexp\">\/\\d{2,4}\/g<\/span>;\n\n<span class=\"hljs-keyword\">let<\/span> result = str.match(re);\n<span class=\"hljs-built_in\">console<\/span>.log(result);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">&#91;<span class=\"hljs-string\">\"11\"<\/span>, <span class=\"hljs-string\">\"2020\"<\/span>]\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Because the upper limit is optional, the <code>{n,}<\/code> searches for a sequence of <code>n<\/code> or more times. For example, the regular expression <code>\/\\d{2,}\/<\/code> will match any number that has two or more digits.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> str = <span class=\"hljs-string\">'The official name of ES6 is ES2015'<\/span>;\n<span class=\"hljs-keyword\">let<\/span> re = <span class=\"hljs-regexp\">\/\\d{2,}\/g<\/span>;\n\n<span class=\"hljs-keyword\">let<\/span> result = str.match(re);\n<span class=\"hljs-built_in\">console<\/span>.log(result);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">&#91;<span class=\"hljs-string\">\"2015\"<\/span>]\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following example uses the regular expression <code>\/\\d{1,}\/g<\/code> to match any numbers that have one or more digits in a phone number:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> numbers = <span class=\"hljs-string\">'+1-(408)-555-0105'<\/span>.match(<span class=\"hljs-regexp\">\/\\d{1,}\/g<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(numbers);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">&#91;<span class=\"hljs-string\">\"1\"<\/span>, <span class=\"hljs-string\">\"408\"<\/span>, <span class=\"hljs-string\">\"555\"<\/span>, <span class=\"hljs-string\">\"0105\"<\/span>]\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"shorthands\">Shorthands<\/h2>\n\n\n\n<h3 class=\"wp-block-heading\">+<\/h3>\n\n\n\n<p>The quantifier <code>{1,}<\/code> means one or more which has the shorthand as <code>+<\/code>. For example, the <code>\\d+<\/code> searches for numbers:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> phone = <span class=\"hljs-string\">\"+1-(408)-555-0105\"<\/span>;\n<span class=\"hljs-keyword\">let<\/span> result = phone.match(<span class=\"hljs-regexp\">\/\\d+\/g<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(result);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">&#91;<span class=\"hljs-string\">\"1\"<\/span>, <span class=\"hljs-string\">\"408\"<\/span>, <span class=\"hljs-string\">\"555\"<\/span>, <span class=\"hljs-string\">\"0105\"<\/span>]\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">?<\/h3>\n\n\n\n<p>The quantifier <code>?<\/code> means zero or one. It is the same as <code>{0,1}<\/code>. For example, <code>\/colou?r\/<\/code> will match both <code>color<\/code> and <code>colour<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> str = <span class=\"hljs-string\">'Is this color or colour?'<\/span>;\n<span class=\"hljs-keyword\">let<\/span> result = str.match(<span class=\"hljs-regexp\">\/colou?r\/g<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(result);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">&#91;<span class=\"hljs-string\">\"color\"<\/span>, <span class=\"hljs-string\">\"colour\"<\/span>]\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">*<\/h3>\n\n\n\n<p>The quantifier <code>*<\/code> means zero or more. It is the same as <code>{0,}<\/code>. The following example shows how to use the quantifier <code>*<\/code> to match the string <code>Java<\/code> followed by any word character:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> str = <span class=\"hljs-string\">'JavaScript is not Java'<\/span>;\n<span class=\"hljs-keyword\">let<\/span> re = <span class=\"hljs-regexp\">\/Java\\w*\/g<\/span>\n\n<span class=\"hljs-keyword\">let<\/span> results = str.match(re);\n\n<span class=\"hljs-built_in\">console<\/span>.log(results);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">&#91;<span class=\"hljs-string\">\"JavaScript\"<\/span>, <span class=\"hljs-string\">\"Java\"<\/span>]\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>We often use the quantifiers to form complex regular expressions. The following shows some regular expression examples that include quantifiers:<\/p>\n\n\n\n<ul><li>Whole numbers:<code>\/^\\d+$\/<\/code><\/li><li>Decimal numbers:<code>\/^\\d*.\\d+$\/<\/code><\/li><li>Whole numbers and decimal numbers:<code>\/^\\d*(.\\d+)?$\/<\/code><\/li><li>Negative, positive whole numbers &amp; decimal numbers:<code>\/^-?\\d*(.\\d+)?$\/<\/code><\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"summary\">Summary<\/h2>\n\n\n\n<p>The following table lists the quantifiers:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Quantifier<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td><code>*<\/code><\/td><td>Match zero or more times.<\/td><\/tr><tr><td><code>+<\/code><\/td><td>Match one or more times.<\/td><\/tr><tr><td><code>?<\/code><\/td><td>Match zero or one time.<\/td><\/tr><tr><td><code>{<\/code> <em>n<\/em> <code>}<\/code><\/td><td>Match exactly <em>n<\/em> times.<\/td><\/tr><tr><td><code>{<\/code> <em>n<\/em> <code>,}<\/code><\/td><td>Match at least <em>n<\/em> times.<\/td><\/tr><tr><td><code>{<\/code> <em>n<\/em> <code>,<\/code> <em>m<\/em> <code>}<\/code><\/td><td>Match from <em>n<\/em> to <em>m<\/em> times.<\/td><\/tr><\/tbody><\/table><\/figure>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"86982\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/regular-expression-quantifiers\/\"\n\t\t\t\tdata-post-title=\"Regular Expression: Quantifiers\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"86982\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/regular-expression-quantifiers\/\"\n\t\t\t\tdata-post-title=\"Regular Expression: Quantifiers\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn how to use quantifiers to match a number of instances of a character, group, or character class in a string.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":90024,"menu_order":4,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Regular expression: Quantifiers<\/title>\n<meta name=\"description\" content=\"In this tutorial, you&#039;ll learn how to use quantifiers to match a number of instances of a character, group, or character class in a string.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.javascripttutorial.net\/regular-expression-quantifiers\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Regular expression: Quantifiers\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you&#039;ll learn how to use quantifiers to match a number of instances of a character, group, or character class in a string.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.javascripttutorial.net\/regular-expression-quantifiers\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-17T00:24:46+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.javascripttutorial.net\/regular-expression-quantifiers\/\",\"url\":\"https:\/\/www.javascripttutorial.net\/regular-expression-quantifiers\/\",\"name\":\"Regular expression: Quantifiers\",\"isPartOf\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\"},\"datePublished\":\"2020-05-05T03:00:37+00:00\",\"dateModified\":\"2022-02-17T00:24:46+00:00\",\"description\":\"In this tutorial, you'll learn how to use quantifiers to match a number of instances of a character, group, or character class in a string.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/regular-expression-quantifiers\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.javascripttutorial.net\/regular-expression-quantifiers\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.javascripttutorial.net\/regular-expression-quantifiers\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Javascript Regex\",\"item\":\"https:\/\/www.javascripttutorial.net\/javascript-regex\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Regular Expression: Quantifiers\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\",\"url\":\"https:\/\/www.javascripttutorial.net\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.javascripttutorial.net\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Regular expression: Quantifiers","description":"In this tutorial, you'll learn how to use quantifiers to match a number of instances of a character, group, or character class in a string.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.javascripttutorial.net\/regular-expression-quantifiers\/","og_locale":"en_US","og_type":"article","og_title":"Regular expression: Quantifiers","og_description":"In this tutorial, you'll learn how to use quantifiers to match a number of instances of a character, group, or character class in a string.","og_url":"https:\/\/www.javascripttutorial.net\/regular-expression-quantifiers\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-02-17T00:24:46+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/www.javascripttutorial.net\/regular-expression-quantifiers\/","url":"https:\/\/www.javascripttutorial.net\/regular-expression-quantifiers\/","name":"Regular expression: Quantifiers","isPartOf":{"@id":"https:\/\/www.javascripttutorial.net\/#website"},"datePublished":"2020-05-05T03:00:37+00:00","dateModified":"2022-02-17T00:24:46+00:00","description":"In this tutorial, you'll learn how to use quantifiers to match a number of instances of a character, group, or character class in a string.","breadcrumb":{"@id":"https:\/\/www.javascripttutorial.net\/regular-expression-quantifiers\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.javascripttutorial.net\/regular-expression-quantifiers\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.javascripttutorial.net\/regular-expression-quantifiers\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":2,"name":"Javascript Regex","item":"https:\/\/www.javascripttutorial.net\/javascript-regex\/"},{"@type":"ListItem","position":3,"name":"Regular Expression: Quantifiers"}]},{"@type":"WebSite","@id":"https:\/\/www.javascripttutorial.net\/#website","url":"https:\/\/www.javascripttutorial.net\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.javascripttutorial.net\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/86982"}],"collection":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/comments?post=86982"}],"version-history":[{"count":5,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/86982\/revisions"}],"predecessor-version":[{"id":90039,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/86982\/revisions\/90039"}],"up":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/90024"}],"wp:attachment":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/media?parent=86982"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}