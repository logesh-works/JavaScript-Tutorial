{"id":86992,"date":"2020-05-06T23:32:26","date_gmt":"2020-05-07T06:32:26","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=86992"},"modified":"2022-01-22T01:41:06","modified_gmt":"2022-01-22T09:41:06","slug":"javascript-fetch-api","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/","title":{"rendered":"JavaScript Fetch API"},"content":{"rendered":"\r\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the JavaScript Fetch API and how to use it to make asynchronous HTTP requests.<\/p>\r\n\r\n\r\n\r\n<p>The Fetch API is a modern interface that allows you to make HTTP requests to servers from web browsers.<\/p>\r\n\r\n\r\n\r\n<p>If you have worked with <code>XMLHttpRequest<\/code> (<code>XHR<\/code>) object, the Fetch API can perform all the tasks as the <code>XHR<\/code> object does. <\/p>\r\n\r\n\r\n\r\n<p>In addition, the Fetch API is much simpler and cleaner. It uses the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-promises\/\">Promise<\/a><\/code> to deliver more flexible features to make requests to servers from the web browsers.<\/p>\r\n\r\n\r\n\r\n<p>The <code>fetch()<\/code> method is available in the global scope that instructs the web browsers to send a request to a URL.<\/p>\r\n\r\n\r\n\r\n<h2 class=\"wp-block-heading\">Sending a Request<\/h2>\r\n\r\n\r\n\r\n<p>The <code>fetch()<\/code> requires only one parameter which is the URL of the resource that you want to fetch:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> response = fetch(url);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>The <code>fetch()<\/code> method returns a <code>Promise<\/code> so you can use the <code>then()<\/code> and <code>catch()<\/code> methods to handle it:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">fetch(url)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">response<\/span> =&gt;<\/span> {\r\n        <span class=\"hljs-comment\">\/\/ handle the response<\/span>\r\n    })\r\n    .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error<\/span> =&gt;<\/span> {\r\n        <span class=\"hljs-comment\">\/\/ handle the error<\/span>\r\n    });\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>When the request completes, the resource is available. At this time, the promise will resolve into a <code>Response<\/code> object.<\/p>\r\n\r\n\r\n\r\n<p>The <code>Response<\/code> object is the API wrapper for the fetched resource. The <code>Response<\/code> object has a number of useful properties and methods to inspect the response.<\/p>\r\n\r\n\r\n\r\n<h2 class=\"wp-block-heading\">Reading the Response<\/h2>\r\n\r\n\r\n\r\n<p>If the contents of the response are in the raw text format, you can use the <code>text()<\/code> method. The <code>text()<\/code> method returns a <code>Promise<\/code> that resolves with the complete contents of the fetched resource:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">fetch(<span class=\"hljs-string\">'\/readme.txt'<\/span>)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">response<\/span> =&gt;<\/span> response.text())\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">data<\/span> =&gt;<\/span> <span class=\"hljs-built_in\">console<\/span>.log(data));<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>In practice, you often use the <a href=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/\"><code>async<\/code>\/<code>await<\/code><\/a> with the <code>fetch()<\/code> method like this:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">fetchText<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\r\n    <span class=\"hljs-keyword\">let<\/span> response = <span class=\"hljs-keyword\">await<\/span> fetch(<span class=\"hljs-string\">'\/readme.txt'<\/span>);\r\n    <span class=\"hljs-keyword\">let<\/span> data = <span class=\"hljs-keyword\">await<\/span> response.text();\r\n    <span class=\"hljs-built_in\">console<\/span>.log(data);\r\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>Besides the <code>text()<\/code> method, the <code>Response<\/code> object has other methods such as <code>json()<\/code>, <code>blob()<\/code>, <code>formData()<\/code> and <code>arrayBuffer()<\/code> to handle the respective type of data.<\/p>\r\n\r\n\r\n\r\n<h2 class=\"wp-block-heading\">Handling the status codes of the Response<\/h2>\r\n\r\n\r\n\r\n<p>The <code>Response<\/code> object provides the status code and status text via the <code>status<\/code> and <code>statusText<\/code> properties. When a request is successful, the status code is <code>200<\/code> and status text is <code>OK<\/code>:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">fetchText<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\r\n    <span class=\"hljs-keyword\">let<\/span> response = <span class=\"hljs-keyword\">await<\/span> fetch(<span class=\"hljs-string\">'\/readme.txt'<\/span>);\r\n\r\n    <span class=\"hljs-built_in\">console<\/span>.log(response.status); <span class=\"hljs-comment\">\/\/ 200<\/span>\r\n    <span class=\"hljs-built_in\">console<\/span>.log(response.statusText); <span class=\"hljs-comment\">\/\/ OK<\/span>\r\n\r\n    <span class=\"hljs-keyword\">if<\/span> (response.status === <span class=\"hljs-number\">200<\/span>) {\r\n        <span class=\"hljs-keyword\">let<\/span> data = <span class=\"hljs-keyword\">await<\/span> response.text();\r\n        <span class=\"hljs-comment\">\/\/ handle data<\/span>\r\n    }\r\n}\r\n\r\nfetchText();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>Output:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-number\">200<\/span>\r\nOK<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>If the requested resource doesn&#8217;t exist, the response code is <code>404<\/code>:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> response = <span class=\"hljs-keyword\">await<\/span> fetch(<span class=\"hljs-string\">'\/non-existence.txt'<\/span>);\r\n\r\n<span class=\"hljs-built_in\">console<\/span>.log(response.status); <span class=\"hljs-comment\">\/\/ 400<\/span>\r\n<span class=\"hljs-built_in\">console<\/span>.log(response.statusText); <span class=\"hljs-comment\">\/\/ Not Found<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>Output:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-number\">400<\/span>\r\nNot Found<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>If the requested URL throws a server error, the response code will be <code>500<\/code>.<\/p>\r\n\r\n\r\n\r\n<p>If the requested URL is redirected to the new one with the response <code>300-309<\/code>, the <code>status<\/code> of the <code>Response<\/code> object is set to <code>200<\/code>. In addition the <code>redirected<\/code> property is set to <code>true<\/code>.<\/p>\r\n\r\n\r\n\r\n<p>The <code>fetch()<\/code> returns a promise that rejects when a real failure occurs such as a web browser timeout, a loss of network connection, and a CORS violation.<\/p>\r\n\r\n\r\n\r\n<h2 class=\"wp-block-heading\">JavaScript Fetch API example<\/h2>\r\n\r\n\r\n\r\n<p>Suppose that you have a json file that locates on the webserver with the following contents:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JSON \/ JSON with Comments\" data-shcb-language-slug=\"json\"><span><code class=\"hljs language-json\">&#91;{\r\n        <span class=\"hljs-attr\">\"username\"<\/span>: <span class=\"hljs-string\">\"john\"<\/span>,\r\n        <span class=\"hljs-attr\">\"firstName\"<\/span>: <span class=\"hljs-string\">\"John\"<\/span>,\r\n        <span class=\"hljs-attr\">\"lastName\"<\/span>: <span class=\"hljs-string\">\"Doe\"<\/span>,\r\n        <span class=\"hljs-attr\">\"gender\"<\/span>: <span class=\"hljs-string\">\"Male\"<\/span>,\r\n        <span class=\"hljs-attr\">\"profileURL\"<\/span>: <span class=\"hljs-string\">\"img\/male.png\"<\/span>,\r\n        <span class=\"hljs-attr\">\"email\"<\/span>: <span class=\"hljs-string\">\"john.doe@example.com\"<\/span>\r\n    },\r\n    {\r\n        <span class=\"hljs-attr\">\"username\"<\/span>: <span class=\"hljs-string\">\"jane\"<\/span>,\r\n        <span class=\"hljs-attr\">\"firstName\"<\/span>: <span class=\"hljs-string\">\"Jane\"<\/span>,\r\n        <span class=\"hljs-attr\">\"lastName\"<\/span>: <span class=\"hljs-string\">\"Doe\"<\/span>,\r\n        <span class=\"hljs-attr\">\"gender\"<\/span>: <span class=\"hljs-string\">\"Female\"<\/span>,\r\n        <span class=\"hljs-attr\">\"profileURL\"<\/span>: <span class=\"hljs-string\">\"img\/female.png\"<\/span>,\r\n        <span class=\"hljs-attr\">\"email\"<\/span>: <span class=\"hljs-string\">\"jane.doe@example.com\"<\/span>\r\n    }\r\n]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JSON \/ JSON with Comments<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">json<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>The following shows the HTML page:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html<\/span> <span class=\"hljs-attr\">lang<\/span>=<span class=\"hljs-string\">\"en\"<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head<\/span>&gt;<\/span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta<\/span> <span class=\"hljs-attr\">charset<\/span>=<span class=\"hljs-string\">\"UTF-8\"<\/span>&gt;<\/span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta<\/span> <span class=\"hljs-attr\">name<\/span>=<span class=\"hljs-string\">\"viewport\"<\/span> <span class=\"hljs-attr\">content<\/span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"<\/span>&gt;<\/span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title<\/span>&gt;<\/span>Fetch API Demo<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">title<\/span>&gt;<\/span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link<\/span> <span class=\"hljs-attr\">rel<\/span>=<span class=\"hljs-string\">\"stylesheet\"<\/span> <span class=\"hljs-attr\">href<\/span>=<span class=\"hljs-string\">\"css\/style.css\"<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">head<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body<\/span>&gt;<\/span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div<\/span> <span class=\"hljs-attr\">class<\/span>=<span class=\"hljs-string\">\"container\"<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">div<\/span>&gt;<\/span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script<\/span> <span class=\"hljs-attr\">src<\/span>=<span class=\"hljs-string\">\"js\/app.js\"<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">script<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">body<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">html<\/span>&gt;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>In the <code>app.js<\/code>, we&#8217;ll use the <code>fetch()<\/code> method to get the user data and render the data inside the <code>&lt;div&gt;<\/code> element with the class <code>container<\/code>.<\/p>\r\n\r\n\r\n\r\n<p>First, declare the <code>getUsers()<\/code> function that fetches <code>users.json<\/code> from the server.<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getUsers<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\r\n    <span class=\"hljs-keyword\">let<\/span> url = <span class=\"hljs-string\">'users.json'<\/span>;\r\n    <span class=\"hljs-keyword\">try<\/span> {\r\n        <span class=\"hljs-keyword\">let<\/span> res = <span class=\"hljs-keyword\">await<\/span> fetch(url);\r\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">await<\/span> res.json();\r\n    } <span class=\"hljs-keyword\">catch<\/span> (error) {\r\n        <span class=\"hljs-built_in\">console<\/span>.log(error);\r\n    }\r\n}\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>Then, develop the <code>renderUsers()<\/code> function that renders user data:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">renderUsers<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\r\n    <span class=\"hljs-keyword\">let<\/span> users = <span class=\"hljs-keyword\">await<\/span> getUsers();\r\n    <span class=\"hljs-keyword\">let<\/span> html = <span class=\"hljs-string\">''<\/span>;\r\n    users.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">user<\/span> =&gt;<\/span> {\r\n        <span class=\"hljs-keyword\">let<\/span> htmlSegment = <span class=\"hljs-string\">`&lt;div class=\"user\"&gt;\r\n                            &lt;img src=\"<span class=\"hljs-subst\">${user.profileURL}<\/span>\" &gt;\r\n                            &lt;h2&gt;<span class=\"hljs-subst\">${user.firstName}<\/span> <span class=\"hljs-subst\">${user.lastName}<\/span>&lt;\/h2&gt;\r\n                            &lt;div class=\"email\"&gt;&lt;a href=\"email:<span class=\"hljs-subst\">${user.email}<\/span>\"&gt;<span class=\"hljs-subst\">${user.email}<\/span>&lt;\/a&gt;&lt;\/div&gt;\r\n                        &lt;\/div&gt;`<\/span>;\r\n\r\n        html += htmlSegment;\r\n    });\r\n\r\n    <span class=\"hljs-keyword\">let<\/span> container = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'.container'<\/span>);\r\n    container.innerHTML = html;\r\n}\r\n\r\nrenderUsers();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<div class=\"output-cont\"><div class=\"output\">\r\n<iframe src=\"https:\/\/https://jsprifix.netlify.app/\/sample\/api\/fetch\/index.html\" height=\"350px\"><\/iframe>\r\n<\/div><\/div>\r\n\r\n\r\n\r\n<p>Check out the <a href=\"https:\/\/https://jsprifix.netlify.app/\/sample\/api\/fetch\/index.html\">Fetch API demo<\/a>.<\/p>\r\n\r\n\r\n\r\n<h2 class=\"wp-block-heading\">Summary<\/h2>\r\n\r\n\r\n\r\n<ul><li>The Fetch API allows you to asynchronously request for a resource.<\/li><li>Use the <code>fetch()<\/code> method to return a promise that resolves into a <code>Response<\/code> object. To get the actual data, you call one of the methods of the Response object e.g., <code>text()<\/code> or <code>json()<\/code>. These methods resolve into the actual data.<\/li><li>Use the <code>status<\/code> and <code>statusText<\/code> properties of the <code>Response<\/code> object to get the status and status text of the response.<\/li><li>use the <code>catch()<\/code> method or <code>try...catch<\/code> statement to handle a failure request.<\/li><\/ul>\r\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"86992\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/\"\n\t\t\t\tdata-post-title=\"JavaScript Fetch API\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"86992\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/\"\n\t\t\t\tdata-post-title=\"JavaScript Fetch API\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about the JavaScript Fetch API to make asynchronous HTTP requests in the web browsers.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":87825,"menu_order":20,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Fetch API Explained By Examples<\/title>\n<meta name=\"description\" content=\"In this tutorial, you&#039;ll learn about the JavaScript Fetch API to make asynchronous HTTP requests in the web browsers.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Fetch API Explained By Examples\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you&#039;ll learn about the JavaScript Fetch API to make asynchronous HTTP requests in the web browsers.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-22T09:41:06+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/\",\"name\":\"JavaScript Fetch API Explained By Examples\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2020-05-07T06:32:26+00:00\",\"dateModified\":\"2022-01-22T09:41:06+00:00\",\"description\":\"In this tutorial, you'll learn about the JavaScript Fetch API to make asynchronous HTTP requests in the web browsers.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Web API\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Fetch API\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Fetch API Explained By Examples","description":"In this tutorial, you'll learn about the JavaScript Fetch API to make asynchronous HTTP requests in the web browsers.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Fetch API Explained By Examples","og_description":"In this tutorial, you'll learn about the JavaScript Fetch API to make asynchronous HTTP requests in the web browsers.","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-22T09:41:06+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/","name":"JavaScript Fetch API Explained By Examples","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2020-05-07T06:32:26+00:00","dateModified":"2022-01-22T09:41:06+00:00","description":"In this tutorial, you'll learn about the JavaScript Fetch API to make asynchronous HTTP requests in the web browsers.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"Web API","item":"https:\/\/https://jsprifix.netlify.app/\/web-apis\/"},{"@type":"ListItem","position":3,"name":"JavaScript Fetch API"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86992"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=86992"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86992\/revisions"}],"predecessor-version":[{"id":88746,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86992\/revisions\/88746"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/87825"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=86992"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}