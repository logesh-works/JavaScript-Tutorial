{"id":86869,"date":"2020-04-30T21:09:19","date_gmt":"2020-05-01T04:09:19","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=86869"},"modified":"2022-02-18T18:08:42","modified_gmt":"2022-02-19T02:08:42","slug":"javascript-regular-expression","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/","title":{"rendered":"JavaScript Regular Expression"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the JavaScript regular expressions. After the tutorial, you&#8217;ll know how to use regular expressions effectively to search and replace strings.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"introduction-to-regular-expressions-in-javascript\">Introduction to regular expressions in JavaScript<\/h2>\n\n\n\n<p>A regular expression is a <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-string\/\">string<\/a> that describes a pattern e.g., email addresses and phone numbers.  <\/p>\n\n\n\n<p>In JavaScript, regular expressions are objects. JavaScript provides the built-in <code>RegExp<\/code> type that allows you to work with regular expressions effectively. <\/p>\n\n\n\n<p>Regular expressions are useful for searching and replacing strings that match a pattern. They have many useful applications. <\/p>\n\n\n\n<p>For example, you can use regular expressions to extract useful information in web scraping like product prices. Or you can use regular expressions to validate form fields like email addresses and phone numbers.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"creating-a-regular-expression\">Creating a regular expression<\/h2>\n\n\n\n<p>To create a regular expression in JavaScript, you enclose its pattern in forward-slash characters (<code>\/<\/code>) like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> re = <span class=\"hljs-regexp\">\/hi\/<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p class=\"note\">Note that a regular expression doesn&#8217;t have single quotes or double quotes like a regular string.<\/p>\n\n\n\n<p>Or you can use the <code>RegExp<\/code> constructor:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> re = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">RegExp<\/span>(<span class=\"hljs-string\">'hi'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Both regular expressions are instances of the <code>RegExp<\/code> type. They match the string <code>'hi'<\/code>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"testing-for-matching\">Testing for matching<\/h2>\n\n\n\n<p>The <code>RegExp<\/code> object has many useful methods. One of them is the <code>test()<\/code> method that allows you to test if a string contains a match of the pattern in the regular expression.<\/p>\n\n\n\n<p>The <code>test()<\/code> method returns <code>true<\/code> if the string argument contains a match.<\/p>\n\n\n\n<p>The following example use the <code>test()<\/code> method to test whether the string <code>'hi John'<\/code> matches the pattern <code>hi<\/code> :<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> re = <span class=\"hljs-regexp\">\/hi\/<\/span>;\n<span class=\"hljs-keyword\">let<\/span> result = re.test(<span class=\"hljs-string\">'hi John'<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(result); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"using-pattern-flags\">Using pattern flags<\/h2>\n\n\n\n<p>Besides a pattern, a <code>RegExp<\/code> object also accepts an optional flag parameter. Flags are settings that change the searching behavior. Regular expressions have many flags.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"1-the-ignore-flag-i\">1) The ignore flag (<code>i<\/code>)<\/h3>\n\n\n\n<p>The <code>i<\/code> flag ignores cases when searching. The letter <code>i<\/code> stands for <code>ignore<\/code>.<\/p>\n\n\n\n<p>By default, searches are case-sensitive. For example <code>\/hi\/<\/code> only matches the string <code>hi<\/code> not <code>Hi<\/code>. To search for a string <code>hi<\/code> in any cases, you use the <code>i<\/code> flag:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> re = <span class=\"hljs-regexp\">\/hi\/i<\/span>;\n<span class=\"hljs-keyword\">let<\/span> result = re.test(<span class=\"hljs-string\">'Hi John'<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(result); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>\/hi\/i<\/code> will match any string <code>hi<\/code>, <code>Hi<\/code>, and <code>HI<\/code>. Notice that you place the flag <code>i<\/code> after the last forward-slash character (<code>\/<\/code>)<\/p>\n\n\n\n<p>The following example shows how to use the flag in the <code>RegExp<\/code> constructor:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> re = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">RegExp<\/span>(<span class=\"hljs-string\">'hi'<\/span>,<span class=\"hljs-string\">'i'<\/span>);\n<span class=\"hljs-keyword\">let<\/span> result = re.test(<span class=\"hljs-string\">'HI John'<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(result); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\" id=\"2-the-global-flag-g\">2) The global flag (<code>g<\/code>)<\/h3>\n\n\n\n<p>Another commonly used flag is the global flag (<code>g<\/code>). Without the global flag, the <code>RegExp<\/code> object only checks if there is a match in a string and returns the first match.<\/p>\n\n\n\n<p>When the <code>g<\/code> flag is available, the <code>RegExp<\/code> looks for all matches and returns all of them.<\/p>\n\n\n\n<p>It&#8217;s possible to combine flags e.g., <code>gi<\/code> flags combine the ignore (<code>i<\/code>) and the global (<code>g<\/code>) flags.<\/p>\n\n\n\n<p>The <code>exec()<\/code> method of the <code>RegExp<\/code> performs a search for a match in a string and returns an array that contains detailed information about the match. <\/p>\n\n\n\n<p>The <code>exec()<\/code> method returns <code>null<\/code> if it could not find any match. However, it returns a single match at once. To get all matches, you need to execute the <code>exec()<\/code> multiple times.<\/p>\n\n\n\n<p>The following example uses the <code>exec()<\/code> method with a <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-do-while\/\">do...while<\/a><\/code> loop to return all the matches:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> message = <span class=\"hljs-string\">'Hi, are you there? hi, HI...'<\/span>;\n<span class=\"hljs-keyword\">let<\/span> re = <span class=\"hljs-regexp\">\/hi\/gi<\/span>;\n\n<span class=\"hljs-keyword\">let<\/span> matches = &#91;];\n<span class=\"hljs-keyword\">let<\/span> match;\n<span class=\"hljs-keyword\">do<\/span> {\n    match = re.exec(message);\n    <span class=\"hljs-keyword\">if<\/span>(match) {\n      matches.push(match);\n    }\n} <span class=\"hljs-keyword\">while<\/span>(match != <span class=\"hljs-literal\">null<\/span>)\n\n<span class=\"hljs-built_in\">console<\/span>.dir(matches);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"630\" height=\"291\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/04\/JavaScript-Regular-Expression.png\" alt=\"\" class=\"wp-image-86871\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/04\/JavaScript-Regular-Expression.png 630w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/04\/JavaScript-Regular-Expression-300x139.png 300w\" sizes=\"(max-width: 630px) 100vw, 630px\" \/><\/figure>\n\n\n\n<p>How it works:<\/p>\n\n\n\n<ul><li>First, declare a <code>message<\/code> string that will be used for searching.<\/li><li>Then, create a regular expression object with the pattern <code>\/hi\/gi<\/code>. The ignore flag (<code>i<\/code>) allows <code>re<\/code> object to ignore cases when executing the search and the global flag (<code>g<\/code>) instructs the <code>re<\/code> object to find all matches, not just the first one.<\/li><li>Third, execute the <code>exec()<\/code> method until no match found.<\/li><li>Finally, show the result array in the console.<\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"searching-strings\">Searching strings<\/h2>\n\n\n\n<p>The method <code>str.match(regexp)<\/code> returns all matches of <code>regexp<\/code> in the string <code>str<\/code>. <\/p>\n\n\n\n<p>To find all matches, you use the global flag (<code>g<\/code>). And to find the matches regardless of cases, you use the ignore flag (<code>i<\/code>).<\/p>\n\n\n\n<p>The following example shows how to use the <code>match()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> str = <span class=\"hljs-string\">\"Are you Ok? Yes, I'm OK\"<\/span>;\n<span class=\"hljs-keyword\">let<\/span> result = str.match(<span class=\"hljs-regexp\">\/OK\/gi<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(result);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">&#91;<span class=\"hljs-string\">\"Ok\"<\/span>, <span class=\"hljs-string\">\"OK\"<\/span>]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"replacing-strings\">Replacing strings<\/h2>\n\n\n\n<p>The following example uses the <code>replace()<\/code> method to replace the first occurrence of the string <code>'Ok'<\/code> in the string <code>str<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> str = <span class=\"hljs-string\">\"Are you OK? Yes, I'm OK.\"<\/span>;\n<span class=\"hljs-keyword\">let<\/span> result = str.replace(<span class=\"hljs-string\">'Ok'<\/span>,<span class=\"hljs-string\">'fine'<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(result);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">Are you fine? Yes, I<span class=\"hljs-string\">'m OK<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To replace all occurrences of <code>OK<\/code>, you use a regular expression with the global flag (<code>g<\/code>):<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> str = <span class=\"hljs-string\">\"Are you OK? Yes, I'm OK.\"<\/span>;\n<span class=\"hljs-keyword\">let<\/span> result = str.replace(<span class=\"hljs-regexp\">\/OK\/g<\/span>,<span class=\"hljs-string\">'fine'<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(result);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">Are you fine? Yes, I<span class=\"hljs-string\">'m fine.<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following example uses both ignore and global flags to replace all occurrences of  <code>OK<\/code> regardless of cases with the string <code>fine<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> str = <span class=\"hljs-string\">\"Are you Ok? Yes, I'm OK.\"<\/span>;\n<span class=\"hljs-keyword\">let<\/span> result = str.replace(<span class=\"hljs-regexp\">\/OK\/gi<\/span>,<span class=\"hljs-string\">'fine'<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(result);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">Are you fine? Yes, I<span class=\"hljs-string\">'m fine.<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"summary\">Summary<\/h2>\n\n\n\n<ul><li>Use <code>\/...\/<\/code> or <code>RegExp<\/code> constructor to create a regular expression.<\/li><li>Use the pattern flag e.g., ignore (<code>i<\/code>) and global (<code>g<\/code>) to modify the matching behavior.<\/li><li>Use the <code>RegExp.test()<\/code> method to determine if a pattern is found in a string.<\/li><li>Use the <code>RegExp.exec()<\/code> method to find the match and return an array that contains the information of the match.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"86869\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/\"\n\t\t\t\tdata-post-title=\"JavaScript Regular Expression\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"86869\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/\"\n\t\t\t\tdata-post-title=\"JavaScript Regular Expression\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>in this tutorial, you&#8217;ll learn about the JavaScript regular expressions, how to create them, and how to use them effectively to search and replace strings.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":90024,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Regular Expression<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Regular Expression\" \/>\n<meta property=\"og:description\" content=\"in this tutorial, you&#039;ll learn about the JavaScript regular expressions, how to create them, and how to use them effectively to search and replace strings.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-19T02:08:42+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/04\/JavaScript-Regular-Expression.png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/\",\"name\":\"JavaScript Regular Expression\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2020-05-01T04:09:19+00:00\",\"dateModified\":\"2022-02-19T02:08:42+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Javascript Regex\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Regular Expression\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Regular Expression","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Regular Expression","og_description":"in this tutorial, you'll learn about the JavaScript regular expressions, how to create them, and how to use them effectively to search and replace strings.","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-02-19T02:08:42+00:00","og_image":[{"url":"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/04\/JavaScript-Regular-Expression.png"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/","name":"JavaScript Regular Expression","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2020-05-01T04:09:19+00:00","dateModified":"2022-02-19T02:08:42+00:00","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"Javascript Regex","item":"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/"},{"@type":"ListItem","position":3,"name":"JavaScript Regular Expression"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86869"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=86869"}],"version-history":[{"count":4,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86869\/revisions"}],"predecessor-version":[{"id":90033,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86869\/revisions\/90033"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/90024"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=86869"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}