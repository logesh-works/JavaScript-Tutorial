{"id":711,"date":"2016-09-16T00:48:47","date_gmt":"2016-09-16T07:48:47","guid":{"rendered":"http:\/\/www.javascripttutorial.net\/?page_id=711"},"modified":"2022-01-22T18:44:41","modified_gmt":"2022-01-23T02:44:41","slug":"javascript-string","status":"publish","type":"page","link":"https:\/\/www.javascripttutorial.net\/javascript-string\/","title":{"rendered":"JavaScript string"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the JavaScript <code>string<\/code> primitive type and how to use it to define strings.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the JavaScript strings<\/h2>\n\n\n\n<p>JavaScript strings are primitive values. Also, strings are immutable. It means that if you modify a string, you will always get a new string. The original string doesn&#8217;t change.<\/p>\n\n\n\n<p>To create literal strings, you use either single quotes (<code>'<\/code>) or double quotes (<code>\"<\/code>) like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> str = <span class=\"hljs-string\">'Hi'<\/span>;\n<span class=\"hljs-keyword\">let<\/span> greeting = <span class=\"hljs-string\">\"Hello\"<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>ES6 introduced <a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-template-literals\/\">template literals<\/a> that allow you to define a string backtick (`) characters:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> name = <span class=\"hljs-string\">`John`<\/span><span class=\"hljs-string\">';<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The template literals allow you to use the single quotes and double quotes inside a string without the need of escaping them. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> mesage = <span class=\"hljs-string\">`\"I'm good\". She said\";<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Also, you can place the <a href=\"https:\/\/www.javascripttutorial.net\/javascript-variables\/\">variables<\/a> and expressions inside a template literal. JavaScript will replace the variables with their value in the string. This is called string interpolation. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> name = <span class=\"hljs-string\">'John'<\/span>;\n<span class=\"hljs-keyword\">let<\/span> message = <span class=\"hljs-string\">`Hi, I'm <span class=\"hljs-subst\">${name}<\/span>.`<\/span>;\n\n<span class=\"hljs-built_in\">console<\/span>.log(message);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">Hi, I'm John.<\/code><\/span><\/pre>\n\n\n<p>In this example, JavaScript replaces the <code>name<\/code> variable with its value inside the template literal.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Escaping special characters<\/h2>\n\n\n\n<p>To escape special characters, you use the backslash <code>\\<\/code> character. For example:<\/p>\n\n\n\n<ul><li>Windows line break: <code>'\\r\\n'<\/code><\/li><li>Unix line break: <code>'\\n'<\/code><\/li><li>Tab: <code>'\\t'<\/code><\/li><li>Backslash <code>'\\'<\/code><\/li><\/ul>\n\n\n\n<p>The following example uses the backslash character to escape the single quote character in a string:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> str = <span class=\"hljs-string\">'I\\'m a string!'<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Getting the length of the string<\/h2>\n\n\n\n<p>The <code>length<\/code> property returns the length of a string:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> str = <span class=\"hljs-string\">\"Good Morning!\"<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(str.length);  <span class=\"hljs-comment\">\/\/ 13<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p class=\"note\">Note that JavaScript has the <code><a href=\"https:\/\/www.javascripttutorial.net\/javascript-string-type\/\">String<\/a><\/code> type (with the letter <code>S<\/code> in uppercase), which is the <a href=\"https:\/\/www.javascripttutorial.net\/javascript-primitive-wrapper-types\/\">primitive wrapper type<\/a> of the primitive <code>string<\/code> type. Therefore, you can access all properties and methods of the String type from a primitive string.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Accessing characters<\/h2>\n\n\n\n<p>To access the characters in a string, you use the array-like <code>[]<\/code> notation with the zero-based index. The following example returns the first character of a string with the index zero:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> str = <span class=\"hljs-string\">\"Hello\"<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(str&#91;<span class=\"hljs-number\">0<\/span>]); <span class=\"hljs-comment\">\/\/ \"H\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To access the last character of the string, you use the <code>length - 1<\/code> index:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> str = <span class=\"hljs-string\">\"Hello\"<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(str&#91;str.length <span class=\"hljs-number\">-1<\/span>]); <span class=\"hljs-comment\">\/\/ \"o\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Concatenating strings via + operator<\/h2>\n\n\n\n<p>To <a href=\"https:\/\/www.javascripttutorial.net\/string\/javascript-string-concatenation\/\">concatenate two or more strings<\/a>, you use the <code>+<\/code> operator:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> name = <span class=\"hljs-string\">'John'<\/span>;\n<span class=\"hljs-keyword\">let<\/span> str = <span class=\"hljs-string\">'Hello '<\/span> + name;\n\n<span class=\"hljs-built_in\">console<\/span>.log(str); <span class=\"hljs-comment\">\/\/ \"Hello John\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you want to assemble a string piece by piece, you can use the <code>+=<\/code> operator:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> className = <span class=\"hljs-string\">'btn'<\/span>;\nclassName += <span class=\"hljs-string\">' btn-primary'<\/span>\nclassName += <span class=\"hljs-string\">' none'<\/span>;\n\n<span class=\"hljs-built_in\">console<\/span>.log(className);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">btn btn-primary none<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Converting values to string<\/h2>\n\n\n\n<p>To convert a non-string value to a string, you use one of the following:<\/p>\n\n\n\n<ul><li>String(n);<\/li><li>&#8221; + n<\/li><li>n.toString()<\/li><\/ul>\n\n\n\n<p>Note that the <code>toString()<\/code> method doesn&#8217;t work for <code>undefined<\/code> and <code>null<\/code>.<\/p>\n\n\n\n<p>When you convert a string to a boolean, you cannot convert it back. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> status = <span class=\"hljs-literal\">false<\/span>;\n<span class=\"hljs-keyword\">let<\/span> str = status.toString(); <span class=\"hljs-comment\">\/\/ \"false\"<\/span>\n<span class=\"hljs-keyword\">let<\/span> back = <span class=\"hljs-built_in\">Boolean<\/span>(str); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example:<\/p>\n\n\n\n<ul><li>First, declare the <code>status<\/code> variable and initialize its with the value of <code>false<\/code>.<\/li><li>Second, convert the status variable to a string using the <code>toString()<\/code> method.<\/li><li>Third, convert the string back to a boolean value using the <code>Boolean()<\/code> function. The Boolean() function converts the string <code>\"false\"<\/code> to a boolean value. The result is true because <code>\"false\"<\/code> is a non-empty string.<\/li><\/ul>\n\n\n\n<p class=\"note\">Note that only string for which the <code>Boolean()<\/code> returns <code>false<\/code>, is the empty string (<code>''<\/code>);<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Comparing strings<\/h2>\n\n\n\n<p>To compare two strings, you use <a href=\"https:\/\/www.javascripttutorial.net\/javascript-comparison-operators\/\">comparison operators<\/a> such as <code>><\/code>, <code>>=<\/code>, <code>&lt;<\/code>, <code>&lt;=<\/code>, and <code>==<\/code> operators.<\/p>\n\n\n\n<p>The comparison operators compare strings based on the numeric values of the characters. And it may return the string order that is different from the one used in dictionaries. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> result = <span class=\"hljs-string\">'a'<\/span> &lt; <span class=\"hljs-string\">'b'<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(result); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> result = <span class=\"hljs-string\">'a'<\/span> &lt; <span class=\"hljs-string\">'B'<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(result); <span class=\"hljs-comment\">\/\/ false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>JavaScript strings are primitive values and immutable.<\/li><li>Literal strings are delimited by single quotes (<code>'<\/code>), double quotes (<code>\"<\/code>), or backticks (`).<\/li><li>The <code>length<\/code> property returns the length of the string.<\/li><li>Use the comparison operators `>, >=, &lt;, &lt;=, ==  to compare strings.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"711\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/javascript-string\/\"\n\t\t\t\tdata-post-title=\"JavaScript string\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"711\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/javascript-string\/\"\n\t\t\t\tdata-post-title=\"JavaScript string\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about the JavaScript string primitive type.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":11,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>The Beginner&#039;s Guide to JavaScript Strings By Examples<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about the JavaScript strings and their basic operations such as accessing characters and comparing strings.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.javascripttutorial.net\/javascript-string\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"The Beginner&#039;s Guide to JavaScript Strings By Examples\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you will learn about the JavaScript strings and their basic operations such as accessing characters and comparing strings.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.javascripttutorial.net\/javascript-string\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-23T02:44:41+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.javascripttutorial.net\/javascript-string\/\",\"url\":\"https:\/\/www.javascripttutorial.net\/javascript-string\/\",\"name\":\"The Beginner's Guide to JavaScript Strings By Examples\",\"isPartOf\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\"},\"datePublished\":\"2016-09-16T07:48:47+00:00\",\"dateModified\":\"2022-01-23T02:44:41+00:00\",\"description\":\"In this tutorial, you will learn about the JavaScript strings and their basic operations such as accessing characters and comparing strings.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/javascript-string\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.javascripttutorial.net\/javascript-string\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.javascripttutorial.net\/javascript-string\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript string\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\",\"url\":\"https:\/\/www.javascripttutorial.net\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.javascripttutorial.net\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"The Beginner's Guide to JavaScript Strings By Examples","description":"In this tutorial, you will learn about the JavaScript strings and their basic operations such as accessing characters and comparing strings.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.javascripttutorial.net\/javascript-string\/","og_locale":"en_US","og_type":"article","og_title":"The Beginner's Guide to JavaScript Strings By Examples","og_description":"In this tutorial, you will learn about the JavaScript strings and their basic operations such as accessing characters and comparing strings.","og_url":"https:\/\/www.javascripttutorial.net\/javascript-string\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-23T02:44:41+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/www.javascripttutorial.net\/javascript-string\/","url":"https:\/\/www.javascripttutorial.net\/javascript-string\/","name":"The Beginner's Guide to JavaScript Strings By Examples","isPartOf":{"@id":"https:\/\/www.javascripttutorial.net\/#website"},"datePublished":"2016-09-16T07:48:47+00:00","dateModified":"2022-01-23T02:44:41+00:00","description":"In this tutorial, you will learn about the JavaScript strings and their basic operations such as accessing characters and comparing strings.","breadcrumb":{"@id":"https:\/\/www.javascripttutorial.net\/javascript-string\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.javascripttutorial.net\/javascript-string\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.javascripttutorial.net\/javascript-string\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":3,"name":"JavaScript string"}]},{"@type":"WebSite","@id":"https:\/\/www.javascripttutorial.net\/#website","url":"https:\/\/www.javascripttutorial.net\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.javascripttutorial.net\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/711"}],"collection":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/comments?post=711"}],"version-history":[{"count":5,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/711\/revisions"}],"predecessor-version":[{"id":89256,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/711\/revisions\/89256"}],"up":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/media?parent=711"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}