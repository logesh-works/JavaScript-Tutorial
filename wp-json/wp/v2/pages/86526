{"id":86526,"date":"2020-04-19T07:19:26","date_gmt":"2020-04-19T14:19:26","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=86526"},"modified":"2022-03-04T18:53:23","modified_gmt":"2022-03-05T02:53:23","slug":"when-you-should-not-use-arrow-functions","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/es6\/when-you-should-not-use-arrow-functions\/","title":{"rendered":"When You Should Not Use Arrow Functions"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn when you <strong>should not use<\/strong> the arrow functions in ES6. <\/p>\n\n\n\n<p>An <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/\">arrow function<\/a> doesn&#8217;t have its own <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/\">this<\/a><\/code> value and the <code>arguments<\/code> object. Therefore, you should not use it as an event handler, a method of an object literal, a prototype method, or when you have a function that uses the <code>arguments<\/code> object.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">1) Event handlers<\/h2>\n\n\n\n<p>Suppose that you have the following input text field:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"text\"<\/span> <span class=\"hljs-attr\">name<\/span>=<span class=\"hljs-string\">\"username\"<\/span> <span class=\"hljs-attr\">id<\/span>=<span class=\"hljs-string\">\"username\"<\/span> <span class=\"hljs-attr\">placeholder<\/span>=<span class=\"hljs-string\">\"Enter a username\"<\/span>&gt;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And you want to show a greeting message when users type their usernames. The following shows the <code>&lt;div&gt;<\/code> element that will display the greeting message:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div<\/span> <span class=\"hljs-attr\">id<\/span>=<span class=\"hljs-string\">\"greeting\"<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">div<\/span>&gt;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Once users type their usernames, you capture the current value of the input and update it to the <code>&lt;div&gt;<\/code> element:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> greeting = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'#greeting'<\/span>);\n<span class=\"hljs-keyword\">const<\/span> username = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'#username'<\/span>);\nusername.addEventListener(<span class=\"hljs-string\">'keyup'<\/span>, () =&gt; {\n  greeting.textContent = <span class=\"hljs-string\">'Hello '<\/span> + <span class=\"hljs-keyword\">this<\/span>.value;\n});<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, when you execute the code, you will get the following message regardless of whatever you type:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">Hello <span class=\"hljs-literal\">undefined<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It means that the <code>this.value<\/code> in the event handler always returns <code>undefined<\/code>. <\/p>\n\n\n\n<p>As mentioned earlier, the arrow function doesn&#8217;t have its own <code>this<\/code> value. It uses the <code>this<\/code> value of the enclosing lexical scope. In the above example, the <code>this<\/code> in arrow function references the global object.<\/p>\n\n\n\n<p>In the web browser, the global object is <code>window<\/code>. The <code>window<\/code> object doesn&#8217;t have the <code>value<\/code> property. Therefore, the JavaScript engine adds the value property to the <code>window<\/code> object and sets its values to <code>undefined<\/code>.<\/p>\n\n\n\n<p>To fix this issue, you need to use a regular function instead. The <code>this<\/code> value will be bound to the <code>&lt;input&gt;<\/code> element that triggers the event.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">username.addEventListener(<span class=\"hljs-string\">'keyup'<\/span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n    input.textContent = <span class=\"hljs-string\">'Hello '<\/span> + <span class=\"hljs-keyword\">this<\/span>.value;\n});\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">2) Object methods<\/h2>\n\n\n\n<p>See the following <code>counter<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> counter = {\n  <span class=\"hljs-attr\">count<\/span>: <span class=\"hljs-number\">0<\/span>,\n  <span class=\"hljs-attr\">next<\/span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> ++<span class=\"hljs-keyword\">this<\/span>.count,\n  <span class=\"hljs-attr\">current<\/span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> <span class=\"hljs-keyword\">this<\/span>.count\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>counter<\/code> object has two methods: <code>current()<\/code> and <code>next()<\/code>. The <code>current()<\/code> method returns the current counter value and the <code>next()<\/code> method returns the next counter value. <\/p>\n\n\n\n<p>The following shows the next counter value which should be 1:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">console<\/span><span class=\"hljs-selector-class\">.log<\/span>(<span class=\"hljs-selector-tag\">counter<\/span><span class=\"hljs-selector-class\">.next<\/span>());<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, it returns <code>NaN<\/code>. <\/p>\n\n\n\n<p>The reason is that when you use the arrow function inside the object, it inherits the <code>this<\/code> value from the enclosing lexical scope which is the global scope in this example.<\/p>\n\n\n\n<p>The <code>this.count<\/code> inside the <code>next()<\/code> method is equivalent to the <code>window.count<\/code> (in the web browser). <\/p>\n\n\n\n<p>The <code>window.count<\/code> is <code>undefined<\/code> by default because the <code>window<\/code> object doesn&#8217;t have the <code>count<\/code> property. The <code>next()<\/code> method adds one to <code>undefined<\/code> that results in <code>NaN<\/code>. <\/p>\n\n\n\n<p>To fix this, you use regular functions as the method of an object literal as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> counter = {\n    <span class=\"hljs-attr\">count<\/span>: <span class=\"hljs-number\">0<\/span>,\n    next() {\n        <span class=\"hljs-keyword\">return<\/span> ++<span class=\"hljs-keyword\">this<\/span>.count;\n    },\n    current() {\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.count;\n    }\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Now, calling the <code>next()<\/code> method will return one as expected:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(counter.next()); <span class=\"hljs-comment\">\/\/ 1<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">3) Prototype methods<\/h2>\n\n\n\n<p>See the following <code>Counter<\/code> object that uses the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-prototype\/\">prototype<\/a><\/code> pattern:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Counter<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">this<\/span>.count = <span class=\"hljs-number\">0<\/span>;\n}\n\nCounter.prototype.next = <span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.count;\n};\n\nCounter.prototype.current = <span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n    <span class=\"hljs-keyword\">return<\/span> ++<span class=\"hljs-keyword\">this<\/span>.next;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>this<\/code> value in these <code>next()<\/code> and <code>current()<\/code> methods reference the global object. Since you want the <code>this<\/code> value inside the methods to reference the <code>Counter<\/code> object, you need to use the regular functions instead:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Counter<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">this<\/span>.count = <span class=\"hljs-number\">0<\/span>;\n}\n\nCounter.prototype.next = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.count;\n};\n\nCounter.prototype.current = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">return<\/span> ++<span class=\"hljs-keyword\">this<\/span>.next;\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">4) Functions that use the arguments object<\/h2>\n\n\n\n<p>Arrow functions don&#8217;t have the <code>arguments<\/code> object. Therefore, if you have a function that uses <code>arguments<\/code> object, you cannot use the arrow function. <\/p>\n\n\n\n<p>For example, the following <code>concat()<\/code> function won&#8217;t work:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> concat = <span class=\"hljs-function\">(<span class=\"hljs-params\">separator<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-keyword\">let<\/span> args = <span class=\"hljs-built_in\">Array<\/span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments<\/span>, <span class=\"hljs-number\">1<\/span>);\n    <span class=\"hljs-keyword\">return<\/span> args.join(separator);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Instead, you use a regular function like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">concat<\/span>(<span class=\"hljs-params\">separator<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">let<\/span> args = <span class=\"hljs-built_in\">Array<\/span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments<\/span>, <span class=\"hljs-number\">1<\/span>);\n    <span class=\"hljs-keyword\">return<\/span> args.join(separator);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>An arrow function doesn&#8217;t have its own <code>this<\/code> value. Instead, it uses the <code>this<\/code> value of the enclosing lexical scope. An arrow function also doesn&#8217;t have the <code>arguments<\/code> object.<\/li><li>Avoid using the arrow function for event handlers, object methods, prototype methods, and functions that use the <code>arguments<\/code> object.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"86526\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es6\/when-you-should-not-use-arrow-functions\/\"\n\t\t\t\tdata-post-title=\"When You Should Not Use Arrow Functions\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"86526\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es6\/when-you-should-not-use-arrow-functions\/\"\n\t\t\t\tdata-post-title=\"When You Should Not Use Arrow Functions\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn when you should not use the arrow functions in ES6.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":82,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>When You Should Not Use The Arrow Functions<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn when you should not use the arrow functions in ES6 including event handlers, methods of objects, classes, and prototypes.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/when-you-should-not-use-arrow-functions\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"When You Should Not Use The Arrow Functions\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you will learn when you should not use the arrow functions in ES6 including event handlers, methods of objects, classes, and prototypes.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/es6\/when-you-should-not-use-arrow-functions\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-03-05T02:53:23+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/when-you-should-not-use-arrow-functions\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/when-you-should-not-use-arrow-functions\/\",\"name\":\"When You Should Not Use The Arrow Functions\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2020-04-19T14:19:26+00:00\",\"dateModified\":\"2022-03-05T02:53:23+00:00\",\"description\":\"In this tutorial, you will learn when you should not use the arrow functions in ES6 including event handlers, methods of objects, classes, and prototypes.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/when-you-should-not-use-arrow-functions\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/es6\/when-you-should-not-use-arrow-functions\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/when-you-should-not-use-arrow-functions\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"When You Should Not Use Arrow Functions\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"When You Should Not Use The Arrow Functions","description":"In this tutorial, you will learn when you should not use the arrow functions in ES6 including event handlers, methods of objects, classes, and prototypes.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/es6\/when-you-should-not-use-arrow-functions\/","og_locale":"en_US","og_type":"article","og_title":"When You Should Not Use The Arrow Functions","og_description":"In this tutorial, you will learn when you should not use the arrow functions in ES6 including event handlers, methods of objects, classes, and prototypes.","og_url":"https:\/\/https://jsprifix.netlify.app/\/es6\/when-you-should-not-use-arrow-functions\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-03-05T02:53:23+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/when-you-should-not-use-arrow-functions\/","url":"https:\/\/https://jsprifix.netlify.app/\/es6\/when-you-should-not-use-arrow-functions\/","name":"When You Should Not Use The Arrow Functions","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2020-04-19T14:19:26+00:00","dateModified":"2022-03-05T02:53:23+00:00","description":"In this tutorial, you will learn when you should not use the arrow functions in ES6 including event handlers, methods of objects, classes, and prototypes.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/when-you-should-not-use-arrow-functions\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/es6\/when-you-should-not-use-arrow-functions\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/when-you-should-not-use-arrow-functions\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"When You Should Not Use Arrow Functions"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86526"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=86526"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86526\/revisions"}],"predecessor-version":[{"id":90153,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86526\/revisions\/90153"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=86526"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}