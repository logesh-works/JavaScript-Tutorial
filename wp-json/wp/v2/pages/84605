{"id":84605,"date":"2019-12-08T03:19:37","date_gmt":"2019-12-08T11:19:37","guid":{"rendered":"https:\/\/www.javascripttutorial.net\/?page_id=84605"},"modified":"2022-12-12T21:23:44","modified_gmt":"2022-12-13T05:23:44","slug":"javascript-call-stack","status":"publish","type":"page","link":"https:\/\/www.javascripttutorial.net\/javascript-call-stack\/","title":{"rendered":"JavaScript Call Stack"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the JavaScript Call Stack which is a mechanism to keep track of the function calls.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"introduction-to-javascript-call-stack\">Introduction to JavaScript Call Stack<\/h2>\n\n\n\n<p>A call stack is a way for the JavaScript engine to keep track of its place in code that calls multiple functions. It has the information on what function is currently being run and what functions are invoked from within that function&#8230;<\/p>\n\n\n\n<p>Also, the JavaScript engine uses a <strong>call stack<\/strong> to manage <a href=\"https:\/\/www.javascripttutorial.net\/javascript-execution-context\/\">execution contexts<\/a>: <\/p>\n\n\n\n<ul>\n<li>Global execution context<\/li>\n\n\n\n<li>function execution contexts<\/li>\n<\/ul>\n\n\n\n<p>The call stack works based on the LIFO principle i.e., last-in-first-out.<\/p>\n\n\n\n<p>When you execute a script, the JavaScript engine creates a global execution context and pushes it on top of the call stack.<\/p>\n\n\n\n<p>Whenever a function is called, the JavaScript engine creates a function execution context for the function, pushes it on top of the call stack, and starts executing the function.<\/p>\n\n\n\n<p>If a function calls another function, the JavaScript engine creates a new function execution context for the function being called and pushes it on top of the call stack.<\/p>\n\n\n\n<p>When the current function completes, the JavaScript engine pops it off the call stack and resumes the execution where it left off.<\/p>\n\n\n\n<p>The script will stop when the call stack is empty.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"javascript-call-stack-example\">JavaScript call stack example<\/h2>\n\n\n\n<p>Let&#8217;s start with the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span>(<span class=\"hljs-params\">a, b<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">return<\/span> a + b;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">average<\/span>(<span class=\"hljs-params\">a, b<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">return<\/span> add(a, b) \/ <span class=\"hljs-number\">2<\/span>;\n}\n\n<span class=\"hljs-keyword\">let<\/span> x = average(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When the JavaScript engine executes this script, it places the global execution context (denoted by <code>main()<\/code> or <code>global()<\/code> function on the call stack.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" loading=\"lazy\" width=\"162\" height=\"250\" src=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2019\/12\/JavaScript-Call-Stack-main.png\" alt=\"JavaScript Call Stack - main\" class=\"wp-image-84606\"\/><\/figure>\n\n\n\n<p>The global execution context enters the creation phase and moves to the execution phase.<\/p>\n\n\n\n<p>The JavaScript engine executes the call to the <code>average(10, 20)<\/code> function and creates a function execution context for the <code>average()<\/code> function and pushes it on top of the call stack:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" loading=\"lazy\" width=\"162\" height=\"250\" src=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2019\/12\/JavaScript-Call-Stack-step-2.png\" alt=\"JavaScript Call Stack - step 2\" class=\"wp-image-84607\"\/><\/figure>\n\n\n\n<p>The JavaScript engine starts executing the <code>average()<\/code> since because the <code>average()<\/code> function is on the top of the call stack.<\/p>\n\n\n\n<p>The <code>average()<\/code> function calls <code>add()<\/code> function. At this point, the JavaScript engine creates another function execution context for the <code>add()<\/code> function and places it on the top of the call stack:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" loading=\"lazy\" width=\"163\" height=\"250\" src=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2019\/12\/JavaScript-Call-Stack-step-3.png\" alt=\"JavaScript Call Stack - step 3\" class=\"wp-image-84608\"\/><\/figure>\n\n\n\n<p>JavaScript engine executes the <code>add()<\/code> function and pops it off the call stack:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" loading=\"lazy\" width=\"163\" height=\"250\" src=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2019\/12\/JavaScript-Call-Stack-step-4.png\" alt=\"JavaScript Call Stack - step 4\" class=\"wp-image-84609\"\/><\/figure>\n\n\n\n<p>At this point, the <code>average()<\/code> function is on the top of the call stack, the JavaScript engine executes and pops it off the call stack.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" loading=\"lazy\" width=\"163\" height=\"250\" src=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2019\/12\/JavaScript-Call-Stack-step-5.png\" alt=\"JavaScript Call Stack - step 5\" class=\"wp-image-84610\"\/><\/figure>\n\n\n\n<p>Now, the call stack is empty so the script stops executing:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" loading=\"lazy\" width=\"163\" height=\"251\" src=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2019\/12\/JavaScript-Call-Stack-empty-stack.png\" alt=\"JavaScript Call Stack - empty stack\" class=\"wp-image-84611\"\/><\/figure>\n\n\n\n<p>The following picture illustrates the overall status of the Call Stack in all steps:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" loading=\"lazy\" width=\"730\" height=\"168\" src=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2019\/12\/JavaScript-Call-Stack.png\" alt=\"JavaScript Call Stack\" class=\"wp-image-84613\" title=\"JavaScript Call Stack\" srcset=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2019\/12\/JavaScript-Call-Stack.png 730w, https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2019\/12\/JavaScript-Call-Stack-300x69.png 300w\" sizes=\"(max-width: 730px) 100vw, 730px\" \/><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"stack-overflow\">Stack overflow<\/h2>\n\n\n\n<p>The call stack has a fixed size, depending on the implementation of the host environment, either the web browser or Node.js.<\/p>\n\n\n\n<p>If the number of execution contexts exceeds the size of the stack, a stack overflow error will occur.<\/p>\n\n\n\n<p>For example, when you execute a <a href=\"https:\/\/www.javascripttutorial.net\/javascript-recursive-function\/\">recursive function<\/a> that has no exit condition, the JavaScript engine will issue a stack overflow error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">fn<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    fn();\n}\n\nfn(); <span class=\"hljs-comment\">\/\/ stack overflow<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"asynchronous-javascript\">Asynchronous JavaScript<\/h2>\n\n\n\n<p>JavaScript is a single-threaded programming language. This means that the JavaScript engine has only one call stack. Therefore, it only can do one thing at a time.<\/p>\n\n\n\n<p>When executing a script, the JavaScript engine executes code from top to bottom, line by line. In other words, it is synchronous.<\/p>\n\n\n\n<p>Asynchronous means the JavaScript engine can execute other tasks while waiting for another task to be completed. For example, the JavaScript engine can:<\/p>\n\n\n\n<ul>\n<li>Request for data from a remote server.<\/li>\n\n\n\n<li>Display a spinner<\/li>\n\n\n\n<li>When the data is available, display it on the webpage.<\/li>\n<\/ul>\n\n\n\n<p>To do this, the JavaScript engine uses an <a href=\"https:\/\/www.javascripttutorial.net\/javascript-event-loop\/\">event loop<\/a>, which will be covered in the following tutorial.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"summary\">Summary<\/h2>\n\n\n\n<ul>\n<li>JavaScript engine uses a call stack to manage execution contexts.<\/li>\n\n\n\n<li>The call stack uses the stack data structure that works based on the LIFO (last-in-first-out) principle.<\/li>\n<\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"84605\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/javascript-call-stack\/\"\n\t\t\t\tdata-post-title=\"JavaScript Call Stack\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"84605\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/javascript-call-stack\/\"\n\t\t\t\tdata-post-title=\"JavaScript Call Stack\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how JavaScript Call Stack manages the execution contexts including global &#038; function execution contexts.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":119,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Call Stack<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn how JavaScript Call Stack manages the execution contexts including global &amp; function execution contexts.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.javascripttutorial.net\/javascript-call-stack\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Call Stack\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you will learn how JavaScript Call Stack manages the execution contexts including global &amp; function execution contexts.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.javascripttutorial.net\/javascript-call-stack\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-12-13T05:23:44+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2019\/12\/JavaScript-Call-Stack-main.png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.javascripttutorial.net\/javascript-call-stack\/\",\"url\":\"https:\/\/www.javascripttutorial.net\/javascript-call-stack\/\",\"name\":\"JavaScript Call Stack\",\"isPartOf\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\"},\"datePublished\":\"2019-12-08T11:19:37+00:00\",\"dateModified\":\"2022-12-13T05:23:44+00:00\",\"description\":\"In this tutorial, you will learn how JavaScript Call Stack manages the execution contexts including global & function execution contexts.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/javascript-call-stack\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.javascripttutorial.net\/javascript-call-stack\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.javascripttutorial.net\/javascript-call-stack\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Call Stack\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\",\"url\":\"https:\/\/www.javascripttutorial.net\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.javascripttutorial.net\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Call Stack","description":"In this tutorial, you will learn how JavaScript Call Stack manages the execution contexts including global & function execution contexts.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.javascripttutorial.net\/javascript-call-stack\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Call Stack","og_description":"In this tutorial, you will learn how JavaScript Call Stack manages the execution contexts including global & function execution contexts.","og_url":"https:\/\/www.javascripttutorial.net\/javascript-call-stack\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-12-13T05:23:44+00:00","og_image":[{"url":"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2019\/12\/JavaScript-Call-Stack-main.png"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/www.javascripttutorial.net\/javascript-call-stack\/","url":"https:\/\/www.javascripttutorial.net\/javascript-call-stack\/","name":"JavaScript Call Stack","isPartOf":{"@id":"https:\/\/www.javascripttutorial.net\/#website"},"datePublished":"2019-12-08T11:19:37+00:00","dateModified":"2022-12-13T05:23:44+00:00","description":"In this tutorial, you will learn how JavaScript Call Stack manages the execution contexts including global & function execution contexts.","breadcrumb":{"@id":"https:\/\/www.javascripttutorial.net\/javascript-call-stack\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.javascripttutorial.net\/javascript-call-stack\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.javascripttutorial.net\/javascript-call-stack\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":3,"name":"JavaScript Call Stack"}]},{"@type":"WebSite","@id":"https:\/\/www.javascripttutorial.net\/#website","url":"https:\/\/www.javascripttutorial.net\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.javascripttutorial.net\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/84605"}],"collection":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/comments?post=84605"}],"version-history":[{"count":5,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/84605\/revisions"}],"predecessor-version":[{"id":90411,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/84605\/revisions\/90411"}],"up":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/media?parent=84605"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}