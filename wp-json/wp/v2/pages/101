{"id":101,"date":"2016-08-03T01:58:41","date_gmt":"2016-08-03T08:58:41","guid":{"rendered":"http:\/\/https://jsprifix.netlify.app/\/?page_id=101"},"modified":"2022-01-22T17:12:20","modified_gmt":"2022-01-23T01:12:20","slug":"javascript-syntax","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-syntax\/","title":{"rendered":"JavaScript Syntax"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about JavaScript syntax, including whitespace, statements, identifiers, comments, expressions, and keywords.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Whitespace<\/h2>\n\n\n\n<p>Whitespace refers to characters that provide the space between other characters. JavaScript has the following whitespace:<\/p>\n\n\n\n<ul><li>Carriage return<\/li><li>Space<\/li><li>New Line<\/li><li>tab<\/li><\/ul>\n\n\n\n<p>JavaScript engine ignores whitespace. However, you can use whitespace to format the code to make it easy to read and maintain.<\/p>\n\n\n\n<p>The following JavaScript code doesn&#8217;t use whitespace:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> formatted = <span class=\"hljs-literal\">true<\/span>; <span class=\"hljs-keyword\">if<\/span> (formatted) {<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'The code is easy to read'<\/span>);}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It&#8217;s is equivalent to the following code that uses whitespace. Hence, this code is much easy to read:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> formatted = <span class=\"hljs-literal\">true<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span> (formatted) {\n  <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'The code is easy to read'<\/span>);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that JavaScript bundlers remove all whitespace from JavaScript files and put them into a single file for deployment. By doing this, JavaScript bundlers make the JavaScript code lighter and faster to load in the web browsers.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"statements\">Statements<\/h2>\n\n\n\n<p>A statement is a code that declares a variable or instructs the JavaScript engine to do a task. A simple statement is terminated by a semicolon (<code>;<\/code>). <\/p>\n\n\n\n<p>Although the semicolon (<code>;<\/code>) is optional; you should always use it to terminate a statement. For example, the following <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-variables\/\">declares a variable<\/a> and shows it to the console:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> message = <span class=\"hljs-string\">\"Welcome to JavaScript\"<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(message);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Blocks<\/h3>\n\n\n\n<p>A block is a sequence of zero or more simple statements. A block is delimited by a pair of curly brackets <code>{}<\/code>. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-built_in\">window<\/span>.localStorage) {\n  <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'The local storage is supported'<\/span>);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Identifiers<\/h2>\n\n\n\n<p>An identifier is a name you choose for variables, parameters, <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-function\/\">functions<\/a>, classes, etc. An identifier name starts with a letter (<code>a-z<\/code>, or <code>A-Z<\/code>), an underscore(<code>_<\/code>), or a dollar sign (<code>$<\/code>) and is followed by a sequence of characters including (<code>a-z<\/code>, <code>A-Z<\/code>), numbers (<code>0-9<\/code>), underscores (<code>_<\/code>), and dollar signs (<code>$<\/code>).<\/p>\n\n\n\n<p>Note that the letter is not limited to the ASCII character and may include extended ASCII or Unicode though not recommended.<\/p>\n\n\n\n<p>Identifiers are case-sensitive. For example, the <code>message<\/code> is different from the <code>Message<\/code>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"comments\">Comments<\/h2>\n\n\n\n<p>Comments allow you to add notes or hints to JavaScript code. When executing the code, the JavaScript engine ignores the comments. <\/p>\n\n\n\n<p>JavaScript supports single-line and block comments. <\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Single-line comments<\/h3>\n\n\n\n<p>A single-line comment starts with two forward-slashes characters (<code>\/\/<\/code>). A single-line comment makes all the text following the <code>\/\/<\/code> on the same line into a comment. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JSON \/ JSON with Comments\" data-shcb-language-slug=\"json\"><span><code class=\"hljs language-json\"><span class=\"hljs-comment\">\/\/ this is a single-line comment<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JSON \/ JSON with Comments<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">json<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Block comments<\/h3>\n\n\n\n<p>A delimited comment begins with a forward slash and asterisk  <code>\/*<\/code> and ends with the opposite <code>*\/<\/code> as in the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JSON \/ JSON with Comments\" data-shcb-language-slug=\"json\"><span><code class=\"hljs language-json\"><span class=\"hljs-comment\">\/* This is a block comment\nthat can span multiple lines *\/<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JSON \/ JSON with Comments<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">json<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Expressions<\/h2>\n\n\n\n<p>An expression is a piece of code that evaluates to a value. For example:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">2 + 1<\/code><\/span><\/pre>\n\n\n<p>The above expression returns three.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"keywords\">Keywords &amp; Reserved words<\/h2>\n\n\n\n<p>JavaScript defines a list of reserved keywords that have specific uses. Therefore, you cannot use the reserved keywords as identifiers or property names by rules.<\/p>\n\n\n\n<p>The following table shows the JavaScript reserved words defined in ECMA-262:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-break\/\"><code>break<\/code><\/a><\/td><td><code>case<\/code><\/td><td><code>catch<\/code><\/td><\/tr><tr><td><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-continue\/\"><code>continue<\/code><\/a><\/td><td><code>debugger<\/code><\/td><td><code>default<\/code><\/td><\/tr><tr><td><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-if-else\/\"><code>else<\/code><\/a><\/td><td><code>export<\/code><\/td><td><code><a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-inheritance\/\">extends<\/a><\/code><\/td><\/tr><tr><td><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-function\/\"><code>function<\/code><\/a><\/td><td><code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-if\/\">if<\/a><\/code><\/td><td><code><a href=\"https:\/\/https://jsprifix.netlify.app/\/nodejs-tutorial\/nodejs-es-module\/\">import<\/a><\/code><\/td><\/tr><tr><td><code>new<\/code><\/td><td><code>return<\/code><\/td><td><code>super<\/code><\/td><\/tr><tr><td><code>throw<\/code><\/td><td><code>try<\/code><\/td><td><code>null<\/code><\/td><\/tr><tr><td><code>void<\/code><\/td><td><code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-while-loop\/\">while<\/a><\/code><\/td><td><code>with<\/code><\/td><\/tr><tr><td><a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-class\/\"><code>class<\/code><\/a><\/td><td><code>delete<\/code><\/td><td><code>finally<\/code><\/td><\/tr><tr><td><code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-for-loop\/\"><code><code>in<\/code><\/code><\/a><\/code><\/td><td><code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-switch-case\/\">switch<\/a><\/code><\/td><td><code>typeof<\/code><\/td><\/tr><tr><td><code>yield<\/code><\/td><td><code><a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-const\/\">const<\/a><\/code><\/td><td><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-do-while\/\"><code>do<\/code><\/a><\/td><\/tr><tr><td><code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-for-loop\/\">for<\/a><\/code><\/td><td><code>instanceof<\/code><\/td><td><code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/\">this<\/a><\/code><\/td><\/tr><tr><td><code>var<\/code><\/td><td><\/td><td><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>In addition to the reserved keywords, ECMA-252 also define a list of future reserved words that cannot be used as identifiers or property names:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><code>enum<\/code><\/td><td><code>implements<\/code><\/td><td><code>let<\/code> <\/td><\/tr><tr><td><code>protected<\/code><\/td><td><code>private<\/code><\/td><td><code>public<\/code><\/td><\/tr><tr><td><code>await<\/code><\/td><td><code>interface<\/code> <\/td><td><code>package<\/code><\/td><\/tr><tr><td><code>implements<\/code> <\/td><td><code>public<\/code> <\/td><td><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>Use whitespace including cariage return, space, newline, and tab to format the code. The JavaScript engine ignores the whiespace.<\/li><li>Use a semicolon (<code>;<\/code>) to terminate a simple statement.<\/li><li>Use the curly braces (<code>{}<\/code>) to form a block that groups one or more simple statments.<\/li><li>A single-line comment start with <code>\/\/<\/code> followed by a text. A block comment begins with <code>\/*<\/code> and ends with <code>*\/<\/code>. JavaScript engine also ignores the comments.<\/li><li>Identifers are names that you choose for variables, functions, classes, etc.<\/li><li>Do not use the reserved keywords and reserved words for identifers.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"101\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-syntax\/\"\n\t\t\t\tdata-post-title=\"JavaScript Syntax\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"101\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-syntax\/\"\n\t\t\t\tdata-post-title=\"JavaScript Syntax\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you will learn about JavaScript syntax, including whitespace, statements, identifiers, comments, expressions, and keywords. Whitespace Whitespace refers to characters that provide the space between other characters. JavaScript has the following whitespace: Carriage return Space New Line tab JavaScript engine ignores whitespace. However, you can use whitespace to format the code to [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":4,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Syntax<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about JavaScript syntax including case-sensitivity, identifiers, comments and statements.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-syntax\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Syntax\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you will learn about JavaScript syntax including case-sensitivity, identifiers, comments and statements.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-syntax\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-23T01:12:20+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-syntax\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-syntax\/\",\"name\":\"JavaScript Syntax\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2016-08-03T08:58:41+00:00\",\"dateModified\":\"2022-01-23T01:12:20+00:00\",\"description\":\"In this tutorial, you will learn about JavaScript syntax including case-sensitivity, identifiers, comments and statements.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-syntax\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-syntax\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-syntax\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Syntax\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Syntax","description":"In this tutorial, you will learn about JavaScript syntax including case-sensitivity, identifiers, comments and statements.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-syntax\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Syntax","og_description":"In this tutorial, you will learn about JavaScript syntax including case-sensitivity, identifiers, comments and statements.","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-syntax\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-23T01:12:20+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-syntax\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-syntax\/","name":"JavaScript Syntax","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2016-08-03T08:58:41+00:00","dateModified":"2022-01-23T01:12:20+00:00","description":"In this tutorial, you will learn about JavaScript syntax including case-sensitivity, identifiers, comments and statements.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-syntax\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-syntax\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-syntax\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript Syntax"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/101"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=101"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/101\/revisions"}],"predecessor-version":[{"id":89217,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/101\/revisions\/89217"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=101"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}