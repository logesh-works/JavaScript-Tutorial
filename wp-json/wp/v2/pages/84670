{"id":84670,"date":"2019-12-16T18:44:41","date_gmt":"2019-12-17T02:44:41","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=84670"},"modified":"2022-08-16T23:07:26","modified_gmt":"2022-08-17T06:07:26","slug":"javascript-variable-scopes","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-variable-scope\/","title":{"rendered":"JavaScript Variable Scopes"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the JavaScript variable scope that determines the visibility and accessibility of variables.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"what-is-variable-scope\">What is variable scope<\/h2>\n\n\n\n<p>Scope determines the visibility and accessibility of a <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-variables\/\">variable<\/a>. JavaScript has three scopes: <\/p>\n\n\n\n<ul><li>The global scope <\/li><li>Local scope<\/li><li>Block scope (started from ES6)<\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"the-global-scope\">The global scope<\/h2>\n\n\n\n<p>When the JavaScript engine executes a script, it creates a global execution context.<\/p>\n\n\n\n<p>Also, it also assigns variables that you declare outside of functions to the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-execution-context\/\">global execution context<\/a>. These variables are in the global scope. They are also known as global variables.<\/p>\n\n\n\n<p>See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> message = <span class=\"hljs-string\">'Hi'<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The variable <code>message<\/code> is global-scoped. It can be accessible everywhere in the script.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" loading=\"lazy\" width=\"556\" height=\"232\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/JavaScript-Global-Variables.png\" alt=\"JavaScript Global Variables\" class=\"wp-image-84674\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/JavaScript-Global-Variables.png 556w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/JavaScript-Global-Variables-300x125.png 300w\" sizes=\"(max-width: 556px) 100vw, 556px\" \/><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"local-scope\">Local scope<\/h2>\n\n\n\n<p>The variables that you declare inside a function are local to the function. They are called local variables. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> message = <span class=\"hljs-string\">'Hi'<\/span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">say<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">var<\/span> message = <span class=\"hljs-string\">'Hello'<\/span>;\n    <span class=\"hljs-built_in\">console<\/span>.log(message);\n}\n\nsay();\n<span class=\"hljs-built_in\">console<\/span>.log(message);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">Hello\nHi\n<\/code><\/span><\/pre>\n\n\n<p>When the JavaScript engine executes the <code>say()<\/code> function, it creates a function execution context. The variable <code>message<\/code> declared inside the <code>say()<\/code> function is bound to the function execution context of the function, not the global execution context.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" loading=\"lazy\" width=\"698\" height=\"492\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/JavaScript-Local-Variables.png\" alt=\"JavaScript Local Variables\" class=\"wp-image-84675\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/JavaScript-Local-Variables.png 698w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/JavaScript-Local-Variables-300x211.png 300w\" sizes=\"(max-width: 698px) 100vw, 698px\" \/><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"scope-chain\">Scope chain<\/h2>\n\n\n\n<p>Consider the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> message = <span class=\"hljs-string\">'Hi'<\/span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">say<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-built_in\">console<\/span>.log(message);\n}\n\nsay();\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">Hi\n<\/code><\/span><\/pre>\n\n\n<p>In this example, we reference the variable <code>message<\/code> inside the <code>say()<\/code> function. Behind the scenes, JavaScript performs the following:<\/p>\n\n\n\n<ul><li>Look up the variable <code>message<\/code> in the current context (function execution context) of the <code>say()<\/code> function. It cannot find any.<\/li><li>Find the variable <code>message<\/code> in the outer execution context which is the global execution context. It finds the variable <code>message<\/code>.<\/li><\/ul>\n\n\n\n<p>The way that JavaScript resolves a variable is by looking at it in its current scope, if it cannot find the variable, it goes up to the outer scope, which is called the scope chain.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" loading=\"lazy\" width=\"661\" height=\"488\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/JavaScript-Scope-Chain.png\" alt=\"JavaScript Scope Chain\" class=\"wp-image-84676\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/JavaScript-Scope-Chain.png 661w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/JavaScript-Scope-Chain-300x221.png 300w\" sizes=\"(max-width: 661px) 100vw, 661px\" \/><\/figure>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"more-scope-chain-example\">More scope chain example<\/h3>\n\n\n\n<p>Consider the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> y = <span class=\"hljs-number\">20<\/span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">bar<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">var<\/span> y = <span class=\"hljs-number\">200<\/span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">baz<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{  \n        <span class=\"hljs-built_in\">console<\/span>.log(y);\n    }\n\n    baz();\n}\n\nbar();\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">200\n<\/code><\/span><\/pre>\n\n\n<p>In this example:<\/p>\n\n\n\n<ul><li>First, the JavaScript engine finds the variable y in the scope of the <code>baz()<\/code> function. It cannot find any. So it goes out of this scope.<\/li><li>Then, the JavaScript engine finds the variable y in the <code>bar()<\/code> function. It can find the variable y in the scope of the <code>bar()<\/code> function so it stops searching.<\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"global-variable-leaks-the-weird-part-of-javascript\">Global variable leaks: the weird part of JavaScript<\/h2>\n\n\n\n<p>See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getCounter<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    counter = <span class=\"hljs-number\">10<\/span>;\n    <span class=\"hljs-keyword\">return<\/span> counter;\n}\n\n<span class=\"hljs-built_in\">console<\/span>.log(getCounter());<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">10<\/code><\/span><\/pre>\n\n\n<p>In this example, we assigned 10 to the <code>counter<\/code> variable without the <code>var<\/code>, <code>let<\/code>, or <code>const<\/code> keyword and then returned it.<\/p>\n\n\n\n<p>Outside the function, we called the <code>getCounter()<\/code> function and showed the result in the console.<\/p>\n\n\n\n<p>This issue is known as the leaks of the global variables.<\/p>\n\n\n\n<p>Under the hood, the JavaScript engine first looks up the <code>counter<\/code> variable in the local scope of the <code>getCounter()<\/code> function. Because there is no <code>var<\/code>, <code>let<\/code>, or <code>const<\/code> keyword, the <code>counter<\/code> variable is not available in the local scope. It hasn&#8217;t been created.<\/p>\n\n\n\n<p>Then, the JavaScript engine follows the scope chain and looks up the <code>counter<\/code> variable in the global scope. The global scope also doesn&#8217;t have the <code>counter<\/code> variable, so the JavaScript engine creates the <code>counter<\/code> variable in the global scope. <\/p>\n\n\n\n<p>To fix this &#8220;weird&#8221; behavior, you use the <code>'use strict'<\/code> at the top of the script or at the top of the function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-meta\">'use strict'<\/span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getCounter<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    counter = <span class=\"hljs-number\">10<\/span>;\n    <span class=\"hljs-keyword\">return<\/span> counter;\n}\n\n<span class=\"hljs-built_in\">console<\/span>.log(getCounter());<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Now, the code throws an error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">ReferenceError<\/span>: counter is not defined<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following shows how to use the <code>'use strict'<\/code> in the function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getCounter<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-string\">'use strict'<\/span>\n    counter = <span class=\"hljs-number\">10<\/span>;\n    <span class=\"hljs-keyword\">return<\/span> counter;\n}\n\n<span class=\"hljs-built_in\">console<\/span>.log(getCounter());<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"block-scope\">Block scope<\/h2>\n\n\n\n<p>ES6 provides the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-let\/\">let<\/a><\/code> and <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-const\/\">const<\/a><\/code> keywords that allow you to declare variables in block scope.<\/p>\n\n\n\n<p>Generally, whenever you see curly brackets <code>{}<\/code>, it is a block. It can be the area within the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-if-else\/\">if<\/a><\/code>, <code>else<\/code>, <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-switch-case\/\">switch<\/a><\/code> conditions or <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-for-loop\/\">for<\/a><\/code>, <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-do-while\/\">do while<\/a><\/code>, and <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-while-loop\/\">while<\/a><\/code> loops.<\/p>\n\n\n\n<p>See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">say<\/span>(<span class=\"hljs-params\">message<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">if<\/span>(!message) {\n        <span class=\"hljs-keyword\">let<\/span> greeting = <span class=\"hljs-string\">'Hello'<\/span>; <span class=\"hljs-comment\">\/\/ block scope<\/span>\n        <span class=\"hljs-built_in\">console<\/span>.log(greeting);\n    }\n    <span class=\"hljs-comment\">\/\/ say it again ?<\/span>\n    <span class=\"hljs-built_in\">console<\/span>.log(greeting); <span class=\"hljs-comment\">\/\/ ReferenceError<\/span>\n}\n\nsay();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we reference the variable <code>greeting<\/code> outside the <code>if<\/code> block that results in an error.<\/p>\n\n\n\n<p>In this tutorial, you have learned about the JavaScript variable scopes including function scope, global scope, and block scope.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"84670\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-variable-scope\/\"\n\t\t\t\tdata-post-title=\"JavaScript Variable Scopes\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"84670\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-variable-scope\/\"\n\t\t\t\tdata-post-title=\"JavaScript Variable Scopes\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about the JavaScript variable scope that determines the visibility and accessibility of variables.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":122,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Variable Scopes<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about the JavaScript variable scope that determines the visibility and accessibility of variables.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-variable-scope\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Variable Scopes\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you will learn about the JavaScript variable scope that determines the visibility and accessibility of variables.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-variable-scope\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-08-17T06:07:26+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/JavaScript-Global-Variables.png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-variable-scope\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-variable-scope\/\",\"name\":\"JavaScript Variable Scopes\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2019-12-17T02:44:41+00:00\",\"dateModified\":\"2022-08-17T06:07:26+00:00\",\"description\":\"In this tutorial, you will learn about the JavaScript variable scope that determines the visibility and accessibility of variables.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-variable-scope\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-variable-scope\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-variable-scope\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Variable Scopes\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Variable Scopes","description":"In this tutorial, you will learn about the JavaScript variable scope that determines the visibility and accessibility of variables.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-variable-scope\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Variable Scopes","og_description":"In this tutorial, you will learn about the JavaScript variable scope that determines the visibility and accessibility of variables.","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-variable-scope\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-08-17T06:07:26+00:00","og_image":[{"url":"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/JavaScript-Global-Variables.png"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-variable-scope\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-variable-scope\/","name":"JavaScript Variable Scopes","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2019-12-17T02:44:41+00:00","dateModified":"2022-08-17T06:07:26+00:00","description":"In this tutorial, you will learn about the JavaScript variable scope that determines the visibility and accessibility of variables.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-variable-scope\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-variable-scope\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-variable-scope\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript Variable Scopes"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/84670"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=84670"}],"version-history":[{"count":4,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/84670\/revisions"}],"predecessor-version":[{"id":90235,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/84670\/revisions\/90235"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=84670"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}