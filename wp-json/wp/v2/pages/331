{"id":331,"date":"2016-08-12T19:52:17","date_gmt":"2016-08-13T02:52:17","guid":{"rendered":"http:\/\/https://jsprifix.netlify.app/\/?page_id=331"},"modified":"2022-02-14T18:04:34","modified_gmt":"2022-02-15T02:04:34","slug":"javascript-stack","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-stack\/","title":{"rendered":"Implementing Javascript Stack Using an Array"},"content":{"rendered":"<p><strong>Summary<\/strong>: this tutorial introduces you to the JavaScript stack data structure and shows you how to use an array as a stack.<\/p>\n<h2>Introduction to the stack data structure<\/h2>\n<p>A stack is a data structure that holds a list of elements. A stack works based on the LIFO principle i.e., Last In, First out, meaning that the most recently added element is the first one to remove.<\/p>\n<p>A stack has two main operations that occur only at the top of the stack: push and pop. The push operation places an element at the top of stack whereas the pop operation removes an element from the top of the stack.<\/p>\n<p>The name <em>stack<\/em> comes from the analogy to a set of physical items e.g., DVD disc, books, stacked on top each other.<img decoding=\"async\" loading=\"lazy\" class=\"alignright wp-image-337 size-full\" title=\"JavaScript Stack: A Stack of books analogy\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2016\/08\/stack-of-books.jpg\" alt=\"JavaScript Stack: A Stack of books analogy\" width=\"300\" height=\"228\"><\/p>\n<p>A&nbsp;stack has many applications. For example, the simplest one is to reverse a word. To do it, you push a word into the stack, letter by letter, and pop the letters from the stack.<\/p>\n<p>The other applications of the stack are &#8220;undo&#8221; mechanism in text editors, syntax parsing, <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-function\/\">function<\/a> call, and expression conversion (infix to postfix, infix to prefix, postfix to infix, and prefix to infix).<\/p>\n<p>JavaScript <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-array\/\">Array<\/a> type provides the <code>push()<\/code> and <code>pop()<\/code>&nbsp;methods that allow you to use an array as a stack.<\/p>\n<h2>push() method<\/h2>\n<p>The <code>push()<\/code> method allows you to add one or more elements to the end of the array. The <code>push()<\/code> method returns the value of the <code>length<\/code> property that specifies the number of elements in the array.<\/p>\n<p>If you consider an array as a stack, the <code>push()<\/code> method adds one or more element at the top of the stack. The following example creates an empty array named <code>stack<\/code> and&nbsp;adds five numbers, one by one, at the end of the <code>stack<\/code> array. It is like to push each number into the top of the stack.<\/p>\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> stack = &#91;];\n\nstack.push(<span class=\"hljs-number\">1<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(stack); <span class=\"hljs-comment\">\/\/ &#91;1]<\/span>\n\nstack.push(<span class=\"hljs-number\">2<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(stack); <span class=\"hljs-comment\">\/\/ &#91;1,2]<\/span>\n\nstack.push(<span class=\"hljs-number\">3<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(stack); <span class=\"hljs-comment\">\/\/ &#91;1,2,3]<\/span>\n\nstack.push(<span class=\"hljs-number\">4<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(stack); <span class=\"hljs-comment\">\/\/ &#91;1,2,3,4]<\/span>\n\nstack.push(<span class=\"hljs-number\">5<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(stack); <span class=\"hljs-comment\">\/\/ &#91;1,2,3,4,5]<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n<p>The following figure illustrates each step in the script above.<\/p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"aligncenter wp-image-332 size-full\" title=\"JavaScript Stack Push Operations\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2016\/08\/JavaScript-Stack-Push-Operations.png\" alt=\"JavaScript Stack Push Operations\" width=\"791\" height=\"199\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2016\/08\/JavaScript-Stack-Push-Operations.png 791w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2016\/08\/JavaScript-Stack-Push-Operations-300x75.png 300w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2016\/08\/JavaScript-Stack-Push-Operations-768x193.png 768w\" sizes=\"(max-width: 791px) 100vw, 791px\" \/><\/p>\n<p>Initially, the stack is empty. Each time, we call the <code>push()<\/code> method to add a number to the stack. After 5 calls, the stack has 5 elements.<\/p>\n<p>Note that the <code>push()<\/code> method also allows you to add multiple items to the end of the&nbsp;array at a time.<\/p>\n<h2>pop() method<\/h2>\n<p>The <code>pop()<\/code> method removes the element at the end of the array and returns the element to the caller. If the array is empty, the <code>pop()<\/code> method returns <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-data-types\/#undefined\">undefined<\/a>.<\/p>\n<p>The following example shows how to pop elements from the top of the stack using the <code>pop()<\/code> method.<\/p>\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(stack.pop()); <span class=\"hljs-comment\">\/\/  5<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(stack); <span class=\"hljs-comment\">\/\/ &#91;1,2,3,4];<\/span>\n\n<span class=\"hljs-built_in\">console<\/span>.log(stack.pop()); <span class=\"hljs-comment\">\/\/  4<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(stack); <span class=\"hljs-comment\">\/\/ &#91;1,2,3];<\/span>\n\n<span class=\"hljs-built_in\">console<\/span>.log(stack.pop()); <span class=\"hljs-comment\">\/\/  3<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(stack); <span class=\"hljs-comment\">\/\/ &#91;1,2];<\/span>\n\n<span class=\"hljs-built_in\">console<\/span>.log(stack.pop()); <span class=\"hljs-comment\">\/\/  2<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(stack); <span class=\"hljs-comment\">\/\/ &#91;1];<\/span>\n\n<span class=\"hljs-built_in\">console<\/span>.log(stack.pop()); <span class=\"hljs-comment\">\/\/  1<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(stack); <span class=\"hljs-comment\">\/\/ &#91;]; -&gt; empty<\/span>\n\n<span class=\"hljs-built_in\">console<\/span>.log(stack.pop()); <span class=\"hljs-comment\">\/\/  undefined<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n<p>The figure below illustrates each step in the script.<\/p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"size-full wp-image-333 alignnone\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2016\/08\/JavaScrippt-Stack-Pop.png\" alt=\"JavaScrippt Stack Pop\" width=\"675\" height=\"195\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2016\/08\/JavaScrippt-Stack-Pop.png 675w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2016\/08\/JavaScrippt-Stack-Pop-300x87.png 300w\" sizes=\"(max-width: 675px) 100vw, 675px\" \/><\/p>\n<p>Initially, the stack has 5 elements.&nbsp;The <code>pop()<\/code> method removes the element at the end of the array i.e., at the top of the stack one at a time. After five operations, the stack is empty.<\/p>\n<h2>Reverse a string using a JavaScript stack<\/h2>\n<p>The following example shows you how to reverse a string using a stack.<\/p>\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">reverse<\/span>(<span class=\"hljs-params\">str<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">let<\/span> stack = &#91;];\n    <span class=\"hljs-comment\">\/\/ push letter into stack<\/span>\n    <span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">let<\/span> i = <span class=\"hljs-number\">0<\/span>; i &lt; str.length; i++) {\n        stack.push(str&#91;i]);\n    }\n    <span class=\"hljs-comment\">\/\/ pop letter from the stack<\/span>\n    <span class=\"hljs-keyword\">let<\/span> reverseStr = <span class=\"hljs-string\">''<\/span>;\n    <span class=\"hljs-keyword\">while<\/span> (stack.length &gt; <span class=\"hljs-number\">0<\/span>) {\n        reverseStr += stack.pop();\n    }\n    <span class=\"hljs-keyword\">return<\/span> reverseStr;\n}\n<span class=\"hljs-built_in\">console<\/span>.log(reverse(<span class=\"hljs-string\">'JavaScript Stack'<\/span>)); <span class=\"hljs-comment\">\/\/kcatS tpircSavaJ<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n<p>How the script works.<\/p>\n<p>The <code>reverse()<\/code> function accepts a string argument and returns its reversed version with the following logic:<\/p>\n<ol>\n<li>First, loop through the <code>str<\/code> and push each letter into the <code>stack<\/code> array.<\/li>\n<li>Second, pop each letter from the stack and construct the reversed string.<\/li>\n<\/ol>\n<p>In this tutorial, we have shown you how to use an array as a JavaScript stack data structure that has two main operations: push and pop.<\/p><div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"331\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-stack\/\"\n\t\t\t\tdata-post-title=\"Implementing Javascript Stack Using an Array\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"331\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-stack\/\"\n\t\t\t\tdata-post-title=\"Implementing Javascript Stack Using an Array\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: this tutorial introduces you to the JavaScript stack data structure and shows you how to use an array as a stack. Introduction to the stack data structure A stack is a data structure that holds a list of elements. A stack works based on the LIFO principle i.e., Last In, First out, meaning that [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":89577,"menu_order":28,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Implementing a Javascript Stack Using push &amp; pop Methods of an Array<\/title>\n<meta name=\"description\" content=\"This tutorial shows you how to implement a JavaScript stack using an array and illustrates how to use push() and pop() methods to perform stack operations.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-stack\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Implementing a Javascript Stack Using push &amp; pop Methods of an Array\" \/>\n<meta property=\"og:description\" content=\"This tutorial shows you how to implement a JavaScript stack using an array and illustrates how to use push() and pop() methods to perform stack operations.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-stack\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-15T02:04:34+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2016\/08\/stack-of-books.jpg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-stack\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-stack\/\",\"name\":\"Implementing a Javascript Stack Using push & pop Methods of an Array\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2016-08-13T02:52:17+00:00\",\"dateModified\":\"2022-02-15T02:04:34+00:00\",\"description\":\"This tutorial shows you how to implement a JavaScript stack using an array and illustrates how to use push() and pop() methods to perform stack operations.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-stack\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-stack\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-stack\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"JavaScript Array Methods\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-array-methods\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Implementing Javascript Stack Using an Array\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Implementing a Javascript Stack Using push & pop Methods of an Array","description":"This tutorial shows you how to implement a JavaScript stack using an array and illustrates how to use push() and pop() methods to perform stack operations.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-stack\/","og_locale":"en_US","og_type":"article","og_title":"Implementing a Javascript Stack Using push & pop Methods of an Array","og_description":"This tutorial shows you how to implement a JavaScript stack using an array and illustrates how to use push() and pop() methods to perform stack operations.","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-stack\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-02-15T02:04:34+00:00","og_image":[{"url":"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2016\/08\/stack-of-books.jpg"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-stack\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-stack\/","name":"Implementing a Javascript Stack Using push & pop Methods of an Array","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2016-08-13T02:52:17+00:00","dateModified":"2022-02-15T02:04:34+00:00","description":"This tutorial shows you how to implement a JavaScript stack using an array and illustrates how to use push() and pop() methods to perform stack operations.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-stack\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-stack\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-stack\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"JavaScript Array Methods","item":"https:\/\/https://jsprifix.netlify.app/\/javascript-array-methods\/"},{"@type":"ListItem","position":3,"name":"Implementing Javascript Stack Using an Array"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/331"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=331"}],"version-history":[{"count":1,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/331\/revisions"}],"predecessor-version":[{"id":86818,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/331\/revisions\/86818"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/89577"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=331"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}