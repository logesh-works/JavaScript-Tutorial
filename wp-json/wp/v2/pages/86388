{"id":86388,"date":"2020-04-05T02:49:01","date_gmt":"2020-04-05T09:49:01","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=86388"},"modified":"2022-01-22T00:23:59","modified_gmt":"2022-01-22T08:23:59","slug":"javascript-asynchronous-iterators","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-asynchronous-iterators\/","title":{"rendered":"JavaScript Asynchronous Iterators"},"content":{"rendered":"\r\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the JavaScript asynchronous iterators that allow you to access asynchronous data sequentially.<\/p>\r\n\r\n\r\n\r\n<h2 class=\"wp-block-heading\">Introduction to JavaScript Asynchronous Iterators<\/h2>\r\n\r\n\r\n\r\n<p><a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/\">ES6<\/a> introduced the <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/\">iterator<\/a> interface that allows you to access data sequentially. The iterator is well-suited for accessing the synchronous data sources like <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-array\/\">arrays<\/a>, <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-set\/\">sets<\/a>, and <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-map\/\">maps<\/a>.<\/p>\r\n\r\n\r\n\r\n<p>The main method of an iterator interface is the <code>next()<\/code> that returns the <code>{value, done}<\/code> object, where <code>done<\/code> is a boolean indicating whether the end of the sequence is reached and <code>value<\/code> is the yielded value in the sequence.<\/p>\r\n\r\n\r\n\r\n<p>The synchronous data means that the next <code>value<\/code> in the sequence and the <code>done<\/code> state is known at the time the <code>next()<\/code> method returns.<\/p>\r\n\r\n\r\n\r\n<p>Besides the synchronous data sources, JavaScript often has to access asynchronous data sources like I\/O access. For the asynchronous data sources, the <code>value<\/code> and <code>done<\/code> state of the iterator is often unknown at the time the <code>next()<\/code> method returns.<\/p>\r\n\r\n\r\n\r\n<p>To deal with the asynchronous data sources, ES2018 introduced the asynchronous iterator (or async iterator) interface.<\/p>\r\n\r\n\r\n\r\n<p>An async iterator is like an iterator except that its <code>next()<\/code> method returns a <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-promises\/\">promise<\/a> that resolves to the <code>{value, done}<\/code> object.<\/p>\r\n\r\n\r\n\r\n<p>The following illustrates the <code>Sequence<\/code> class that implements the iterator interface. (Check it out the <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/\">iterator tutorial<\/a> for more information on how to implement <code>Sequence<\/code> class.)<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Sequence<\/span> <\/span>{\r\n    <span class=\"hljs-keyword\">constructor<\/span>(start = 0, end = Infinity, interval = 1) {\r\n            <span class=\"hljs-keyword\">this<\/span>.start = start;\r\n            <span class=\"hljs-keyword\">this<\/span>.end = end;\r\n            <span class=\"hljs-keyword\">this<\/span>.interval = interval;\r\n        }\r\n        &#91;<span class=\"hljs-built_in\">Symbol<\/span>.iterator]() {\r\n            <span class=\"hljs-keyword\">let<\/span> counter = <span class=\"hljs-number\">0<\/span>;\r\n            <span class=\"hljs-keyword\">let<\/span> nextIndex = <span class=\"hljs-keyword\">this<\/span>.start;\r\n            <span class=\"hljs-keyword\">return<\/span> {\r\n                <span class=\"hljs-attr\">next<\/span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\r\n                    <span class=\"hljs-keyword\">if<\/span> (nextIndex &lt;= <span class=\"hljs-keyword\">this<\/span>.end) {\r\n                        <span class=\"hljs-keyword\">let<\/span> result = {\r\n                            <span class=\"hljs-attr\">value<\/span>: nextIndex,\r\n                            <span class=\"hljs-attr\">done<\/span>: <span class=\"hljs-literal\">false<\/span>\r\n                        }\r\n                        nextIndex += <span class=\"hljs-keyword\">this<\/span>.interval;\r\n                        counter++;\r\n                        <span class=\"hljs-keyword\">return<\/span> result;\r\n                    }\r\n                    <span class=\"hljs-keyword\">return<\/span> {\r\n                        <span class=\"hljs-attr\">value<\/span>: counter,\r\n                        <span class=\"hljs-attr\">done<\/span>: <span class=\"hljs-literal\">true<\/span>\r\n                    };\r\n                }\r\n            }\r\n        }\r\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>To make this <code>Sequence<\/code> class asynchronously, you need to modify it as follows:<\/p>\r\n\r\n\r\n\r\n<ul><li>Use the <code>Symbol.asyncIterator<\/code> instead of the <code>Symbol.iterator<\/code><\/li><li>Return a Promise from the <code>next()<\/code> method.<\/li><\/ul>\r\n\r\n\r\n\r\n<p>The following code transforms the <code>Sequence<\/code> class to the <code>AsyncSequence<\/code> class:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">AsyncSequence<\/span> <\/span>{\r\n    <span class=\"hljs-keyword\">constructor<\/span>(start = 0, end = Infinity, interval = 1) {\r\n            <span class=\"hljs-keyword\">this<\/span>.start = start;\r\n            <span class=\"hljs-keyword\">this<\/span>.end = end;\r\n            <span class=\"hljs-keyword\">this<\/span>.interval = interval;\r\n        }\r\n        &#91;<span class=\"hljs-built_in\">Symbol<\/span>.asyncIterator]() {\r\n            <span class=\"hljs-keyword\">let<\/span> counter = <span class=\"hljs-number\">0<\/span>;\r\n            <span class=\"hljs-keyword\">let<\/span> nextIndex = <span class=\"hljs-keyword\">this<\/span>.start;\r\n            <span class=\"hljs-keyword\">return<\/span> {\r\n                <span class=\"hljs-attr\">next<\/span>: <span class=\"hljs-keyword\">async<\/span> () =&gt; {\r\n                    <span class=\"hljs-keyword\">if<\/span> (nextIndex &lt;= <span class=\"hljs-keyword\">this<\/span>.end) {\r\n                        <span class=\"hljs-keyword\">let<\/span> result = {\r\n                            <span class=\"hljs-attr\">value<\/span>: nextIndex,\r\n                            <span class=\"hljs-attr\">done<\/span>: <span class=\"hljs-literal\">false<\/span>\r\n                        }\r\n                        nextIndex += <span class=\"hljs-keyword\">this<\/span>.interval;\r\n                        counter++;\r\n\r\n                        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Promise<\/span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject<\/span>) =&gt;<\/span> {\r\n                            setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\r\n                                resolve(result);\r\n                            }, <span class=\"hljs-number\">1000<\/span>);\r\n                        });\r\n                    }\r\n                    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Promise<\/span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject<\/span>) =&gt;<\/span> {\r\n                        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\r\n                            resolve({\r\n                                <span class=\"hljs-attr\">value<\/span>: counter,\r\n                                <span class=\"hljs-attr\">done<\/span>: <span class=\"hljs-literal\">true<\/span>\r\n                            });\r\n                        }, <span class=\"hljs-number\">1000<\/span>);\r\n\r\n                    });\r\n                }\r\n            }\r\n        }\r\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>The <code>AsyncSequence<\/code> returns the next number in the sequence after every 1 second.<\/p>\r\n\r\n\r\n\r\n<h2 class=\"wp-block-heading\">The <code>for await...of<\/code> statement<\/h2>\r\n\r\n\r\n\r\n<p>To iterate over an asynchronous iterable object, ES2018 introduced the <code>for await...of<\/code> statement:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for<\/span> <span class=\"hljs-keyword\">await<\/span> (variable <span class=\"hljs-keyword\">of<\/span> iterable) {\r\n    <span class=\"hljs-comment\">\/\/ statement<\/span>\r\n}\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>Since we can use the <code>await<\/code> keyword in an <code>async<\/code> function only, we can create an async <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-immediately-invoked-function-expression-iife\/\">IIFE<\/a> as that uses the <code>AsyncSequence<\/code> class as follows:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">(<span class=\"hljs-keyword\">async<\/span> () =&gt; {\r\n\r\n    <span class=\"hljs-keyword\">let<\/span> seq = <span class=\"hljs-keyword\">new<\/span> AsyncSequence(<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">1<\/span>);\r\n\r\n    <span class=\"hljs-keyword\">for<\/span> <span class=\"hljs-keyword\">await<\/span> (<span class=\"hljs-keyword\">let<\/span> value <span class=\"hljs-keyword\">of<\/span> seq) {\r\n        <span class=\"hljs-built_in\">console<\/span>.log(value);\r\n    }\r\n\r\n})();\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>Output (each number is returned after every second)<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-number\">1<\/span>\r\n<span class=\"hljs-number\">2<\/span>\r\n<span class=\"hljs-number\">3<\/span>\r\n<span class=\"hljs-number\">4<\/span>\r\n<span class=\"hljs-number\">5<\/span>\r\n<span class=\"hljs-number\">6<\/span>\r\n<span class=\"hljs-number\">7<\/span>\r\n<span class=\"hljs-number\">8<\/span>\r\n<span class=\"hljs-number\">9<\/span>\r\n<span class=\"hljs-number\">10<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>The following table illustrates the differences between the iterators and async iterators:<\/p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-table\"><table><thead><tr><th>#<\/th><th>Iterators<\/th><th>Async iterators<\/th><\/tr><\/thead><tbody><tr><td>Well-known Symbol<\/td><td><code>Symbol.iterator<\/code><\/td><td><code>Symbol.asyncIterator<\/code><\/td><\/tr><tr><td><code>next()<\/code>&nbsp;return value is<\/td><td><code>{value, done }<\/code><\/td><td><code><a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-promises\/\">Promise<\/a><\/code> that resolves to <code>{value, done}<\/code><\/td><\/tr><tr><td>Loop statement<\/td><td><code><a href=\"http:\/\/for..of\">for...of<\/a><\/code><\/td><td><code>for await...of<\/code><\/td><\/tr><\/tbody><\/table><\/figure>\r\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"86388\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-asynchronous-iterators\/\"\n\t\t\t\tdata-post-title=\"JavaScript Asynchronous Iterators\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"86388\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-asynchronous-iterators\/\"\n\t\t\t\tdata-post-title=\"JavaScript Asynchronous Iterators\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about the JavaScript asynchronous iterators that allow you to access asynchronous data sequentially.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":98,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Asynchronous Iterators<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about the JavaScript asynchronous iterators that allow you to access asynchronous data sequentially.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-asynchronous-iterators\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Asynchronous Iterators\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you will learn about the JavaScript asynchronous iterators that allow you to access asynchronous data sequentially.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-asynchronous-iterators\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-22T08:23:59+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"2 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-asynchronous-iterators\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-asynchronous-iterators\/\",\"name\":\"JavaScript Asynchronous Iterators\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2020-04-05T09:49:01+00:00\",\"dateModified\":\"2022-01-22T08:23:59+00:00\",\"description\":\"In this tutorial, you will learn about the JavaScript asynchronous iterators that allow you to access asynchronous data sequentially.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-asynchronous-iterators\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-asynchronous-iterators\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-asynchronous-iterators\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Asynchronous Iterators\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Asynchronous Iterators","description":"In this tutorial, you will learn about the JavaScript asynchronous iterators that allow you to access asynchronous data sequentially.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-asynchronous-iterators\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Asynchronous Iterators","og_description":"In this tutorial, you will learn about the JavaScript asynchronous iterators that allow you to access asynchronous data sequentially.","og_url":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-asynchronous-iterators\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-22T08:23:59+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"2 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-asynchronous-iterators\/","url":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-asynchronous-iterators\/","name":"JavaScript Asynchronous Iterators","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2020-04-05T09:49:01+00:00","dateModified":"2022-01-22T08:23:59+00:00","description":"In this tutorial, you will learn about the JavaScript asynchronous iterators that allow you to access asynchronous data sequentially.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-asynchronous-iterators\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-asynchronous-iterators\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-asynchronous-iterators\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript Asynchronous Iterators"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86388"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=86388"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86388\/revisions"}],"predecessor-version":[{"id":86394,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86388\/revisions\/86394"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=86388"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}