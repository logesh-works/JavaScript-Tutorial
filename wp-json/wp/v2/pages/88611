{"id":88611,"date":"2021-09-02T04:19:39","date_gmt":"2021-09-02T11:19:39","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=88611"},"modified":"2021-09-03T01:13:32","modified_gmt":"2021-09-03T08:13:32","slug":"javascript-filereader","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-filereader\/","title":{"rendered":"JavaScript FileReader"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the JavaScript FileReader API and how to use it to implement the file upload.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the JavaScript FileReader API<\/h2>\n\n\n\n<p>When you <a href=\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-drag-and-drop\/\">drag and drop<\/a> files to the web browser or select files to upload via the file input element, JavaScript represents each file as a <code>File<\/code> object. <\/p>\n\n\n\n<p>The <code>File<\/code> object allows you to access the selected file in JavaScript. And JavaScript uses the <code>FileList<\/code> object to hold the <code>File<\/code> objects.<\/p>\n\n\n\n<p>To read the content of a file, you use the <code>FileReader<\/code> object. Note that the <code>FileReader<\/code> only can access the files you selected via drag &amp; drop or file input.<\/p>\n\n\n\n<p>To use the <code>FileReader<\/code> object, you follow these steps:<\/p>\n\n\n\n<p>First, create a new <code>FileObject<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> reader = <span class=\"hljs-keyword\">new<\/span> FileReader();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, call one of the read methods to read the content of a file. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">reader.readAsDataURL(file);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>readAsDataURL()<\/code> method reads the content of the file, which you get from the <code>FileList<\/code> object.<\/p>\n\n\n\n<p>The <code>readAsDataURL()<\/code> method returns an object with the <code>result<\/code> property that contains the data as a <code>data: URL<\/code>. The <code>data:URL<\/code> represents the file&#8217;s data as a base64 encoded string.<\/p>\n\n\n\n<p>For example, you can use the <code>readAsDataURL()<\/code> to read an image and show its base64 encoded string on a webpage.<\/p>\n\n\n\n<p>Besides the <code>readAsDataURL()<\/code> method, the <code>FileReader<\/code> has other methods for reading file&#8217;s data such as <code>readAsText()<\/code>, <code>readAsBinaryString()<\/code>, and <code>readAsArrayBuffer()<\/code>.<\/p>\n\n\n\n<p>Since all of these methods read the file&#8217;s data asynchronously, you cannot just return the result like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> data = reader.readAsDataURL(file);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When the <code>readAsDataURL()<\/code> method completes reading the file successfully, the <code>FileReader<\/code> fires the <code>load<\/code> event.<\/p>\n\n\n\n<p>Third, add an event handler to handle the <code>load<\/code> event of the <code>FileReader<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">reader.addEventListener(<span class=\"hljs-string\">'load'<\/span>, (e) =&gt; {\n    <span class=\"hljs-keyword\">const<\/span> data = e.target.result;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Using JavaScript FileReader to implement an image upload application<\/h2>\n\n\n\n<p>We&#8217;ll use the <code>FileReader<\/code> to implement an <a href=\"https:\/\/https://jsprifix.netlify.app/\/sample\/webapis\/filereader\/\" target=\"_blank\" rel=\"noreferrer noopener\">image upload application<\/a>:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><a href=\"https:\/\/https://jsprifix.netlify.app/\/sample\/webapis\/filereader\/\"><img decoding=\"async\" loading=\"lazy\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2021\/09\/JavaScript-FileReader-API-Drag-n-Drop-Files.jpg\" alt=\"JavaScript FileReader API Demo\" class=\"wp-image-88614\" width=\"724\" height=\"397\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2021\/09\/JavaScript-FileReader-API-Drag-n-Drop-Files.jpg 724w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2021\/09\/JavaScript-FileReader-API-Drag-n-Drop-Files-300x165.jpg 300w\" sizes=\"(max-width: 724px) 100vw, 724px\" \/><\/a><\/figure><\/div>\n\n\n\n<p>When you drag &amp; drop images to the drop zone, the application will use the <code>FileReader<\/code> to read the images and show them on the page together with the filename and filesize:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><a href=\"https:\/\/https://jsprifix.netlify.app/\/sample\/webapis\/filereader\/\"><img decoding=\"async\" loading=\"lazy\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2021\/09\/JavaScript-FileReader-API-Drag-n-Drop-Files-Result.jpg\" alt=\"JavaScript FileReader API Demo\" class=\"wp-image-88615\" width=\"751\" height=\"868\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2021\/09\/JavaScript-FileReader-API-Drag-n-Drop-Files-Result.jpg 751w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2021\/09\/JavaScript-FileReader-API-Drag-n-Drop-Files-Result-260x300.jpg 260w\" sizes=\"(max-width: 751px) 100vw, 751px\" \/><\/a><\/figure>\n\n\n\n<p>Also, the application will use the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/\">Fetch API<\/a> to upload the files to the server.<\/p>\n\n\n\n<p>For the server-side, we&#8217;ll implement a simple PHP script that uploads the images to the <code>'uploads'<\/code> folder on the server.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Setting up the project structure<\/h3>\n\n\n\n<p>First, create the following file and directory structure:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">\u251c\u2500\u2500 css\n|  \u2514\u2500\u2500 style.css\n\u251c\u2500\u2500 images\n|  \u2514\u2500\u2500 upload.svg\n\u251c\u2500\u2500 js\n|  \u2514\u2500\u2500 app.js\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 upload.php\n\u2514\u2500\u2500 uploads<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">index.html<\/h3>\n\n\n\n<p>The following shows the <code>index.html<\/code> file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">&lt;!DOCTYPE html&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html<\/span> <span class=\"hljs-attr\">lang<\/span>=<span class=\"hljs-string\">\"en\"<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta<\/span> <span class=\"hljs-attr\">charset<\/span>=<span class=\"hljs-string\">\"UTF-8\"<\/span> \/&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta<\/span> <span class=\"hljs-attr\">name<\/span>=<span class=\"hljs-string\">\"viewport\"<\/span> <span class=\"hljs-attr\">content<\/span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"<\/span> \/&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link<\/span> <span class=\"hljs-attr\">rel<\/span>=<span class=\"hljs-string\">\"stylesheet\"<\/span> <span class=\"hljs-attr\">href<\/span>=<span class=\"hljs-string\">\"css\/style.css\"<\/span> \/&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title<\/span>&gt;<\/span>FileReader API Demo - Image Upload Application<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">title<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">head<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div<\/span> <span class=\"hljs-attr\">class<\/span>=<span class=\"hljs-string\">\"dropzone\"<\/span>&gt;<\/span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img<\/span> <span class=\"hljs-attr\">src<\/span>=<span class=\"hljs-string\">\"images\/upload.svg\"<\/span> <span class=\"hljs-attr\">alt<\/span>=<span class=\"hljs-string\">\"upload\"<\/span> <span class=\"hljs-attr\">width<\/span>=<span class=\"hljs-string\">\"60\"<\/span> \/&gt;<\/span>\n\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"file\"<\/span> <span class=\"hljs-attr\">class<\/span>=<span class=\"hljs-string\">\"files\"<\/span> <span class=\"hljs-attr\">id<\/span>=<span class=\"hljs-string\">\"images\"<\/span>\n                    <span class=\"hljs-attr\">accept<\/span>=<span class=\"hljs-string\">\"image\/png, image\/jpeg\"<\/span>\n                    <span class=\"hljs-attr\">multiple<\/span> \/&gt;<\/span>\n             <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label<\/span> <span class=\"hljs-attr\">for<\/span>=<span class=\"hljs-string\">\"images\"<\/span>&gt;<\/span>Choose multiple images<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">label<\/span>&gt;<\/span>\n\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3<\/span>&gt;<\/span>or drag &amp; drop your PNG or JPEG files here<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">h3<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div<\/span> <span class=\"hljs-attr\">class<\/span>=<span class=\"hljs-string\">\"image-list\"<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">main<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script<\/span> <span class=\"hljs-attr\">src<\/span>=<span class=\"hljs-string\">\"js\/app.js\"<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">script<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">body<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">html<\/span>&gt;<\/span><\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In the <code>index.html<\/code>, we add the <code>css\/style.css<\/code> to the <code>head<\/code> of the <code>html<\/code> document and <code>js\/app.js<\/code> before the enclosing <code>body<\/code> tag.<\/p>\n\n\n\n<p>The <code>div<\/code> element with the class <code>dropzone<\/code> allows you to drag and drop images into it. Also, the file input element will enable you to select files to upload.<\/p>\n\n\n\n<p>The file input element accepts multiple files and only allows jpeg and png images:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">&lt;input type=<span class=\"hljs-string\">\"file\"<\/span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span><\/span>=<span class=\"hljs-string\">\"files\"<\/span> id=<span class=\"hljs-string\">\"images\"<\/span>\n    accept=<span class=\"hljs-string\">\"image\/png, image\/jpeg\"<\/span>\n    multiple \/&gt;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>style.css<\/code> provides the styles that transform the file input element into a button. Also, it has the <code>active<\/code> class that highlights the dropzone when you drag the file into it.<\/p>\n\n\n\n<p>The <code>div<\/code> element with the <code>image-list<\/code> class will show the uploaded images.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">app.js<\/h3>\n\n\n\n<p>First, select dropzone, file input (files), and image list elements using the <code>querySelector()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> imageList = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'.image-list'<\/span>);\n<span class=\"hljs-keyword\">const<\/span> fileInput = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'.files'<\/span>);\n<span class=\"hljs-keyword\">const<\/span> dropzone = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'.dropzone'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, define a function that adds the active class to or remove it from the dropzone:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> setActive = <span class=\"hljs-function\">(<span class=\"hljs-params\">dropzone, active = <span class=\"hljs-literal\">true<\/span><\/span>) =&gt;<\/span> {\n    <span class=\"hljs-keyword\">const<\/span> hasActiveClass = dropzone.classList.contains(<span class=\"hljs-string\">'active'<\/span>);\n\n    <span class=\"hljs-keyword\">if<\/span> (active &amp;&amp; !hasActiveClass) {\n        <span class=\"hljs-keyword\">return<\/span> dropzone.classList.add(<span class=\"hljs-string\">'active'<\/span>);\n    }\n\n    <span class=\"hljs-keyword\">if<\/span> (!active &amp;&amp; hasActiveClass) {\n        <span class=\"hljs-keyword\">return<\/span> dropzone.classList.remove(<span class=\"hljs-string\">'active'<\/span>);\n    }\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you call <code>setActive(dropzone)<\/code>, it&#8217;ll add the active class to the <code>dropzone<\/code>. If you call <code>setActive(dropzone, false)<\/code>, it&#8217;ll remove the <code>active<\/code> class from the <code>dropzone<\/code>.<\/p>\n\n\n\n<p>Third, highlight the <code>dropzone<\/code> when the <code>dragenter<\/code> and <code>dragover<\/code> events occur and remove the highlight when the <code>dragleave<\/code> and <code>drop<\/code> events occur:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">dropzone.addEventListener(<span class=\"hljs-string\">'dragenter'<\/span>, (e) =&gt; {\n    e.preventDefault();\n    setActive(dropzone);\n});\n\ndropzone.addEventListener(<span class=\"hljs-string\">'dragover'<\/span>, (e) =&gt; {\n    e.preventDefault();\n    setActive(dropzone);\n});\n\ndropzone.addEventListener(<span class=\"hljs-string\">'dragleave'<\/span>, (e) =&gt; {\n    e.preventDefault();\n    setActive(dropzone, <span class=\"hljs-literal\">false<\/span>);\n});\n\ndropzone.addEventListener(<span class=\"hljs-string\">'drop'<\/span>, (e) =&gt; {\n    e.preventDefault();\n    setActive(dropzone, <span class=\"hljs-literal\">false<\/span>);\n    <span class=\"hljs-comment\">\/\/ ..<\/span>\n});<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Fourth, get the <code>FileList<\/code> object in the <code>e.target<\/code> as <code>e.target.files<\/code> in the <code>drop<\/code> event handler of <code>dropzone<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">dropzone.addEventListener(<span class=\"hljs-string\">'drop'<\/span>, (e) =&gt; {\n    e.preventDefault();\n    setActive(dropzone, <span class=\"hljs-literal\">false<\/span>);\n    <span class=\"hljs-comment\">\/\/ get the FileList<\/span>\n    <span class=\"hljs-keyword\">const<\/span> { files } = e.dataTransfer;\n    handleImages(files);\n});<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In the drop event handler, we use object destructuring to get the <code>FileList<\/code> object and call the <code>handleImages()<\/code> function to handle the uploaded images:<\/p>\n\n\n\n<p>Fifth, define the <code>handleImages()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> handleImages = <span class=\"hljs-function\">(<span class=\"hljs-params\">files<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-comment\">\/\/ get valid images<\/span>\n    <span class=\"hljs-keyword\">let<\/span> validImages = &#91;...files].filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">file<\/span>) =&gt;<\/span>\n        &#91;<span class=\"hljs-string\">'image\/jpeg'<\/span>, <span class=\"hljs-string\">'image\/png'<\/span>].includes(file.type)\n    );\n    <span class=\"hljs-comment\">\/\/  show the image<\/span>\n    validImages.forEach(showImage);\n\n    <span class=\"hljs-comment\">\/\/ upload all images<\/span>\n    uploadImages(validImages);\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>handleImages()<\/code> function gets the valid images, shows each valid image on the page using the <code>showImage()<\/code> function and uploads all the images to the server using the <code>uploadImages()<\/code> function.<\/p>\n\n\n\n<p>Sixth, define the <code>showImage()<\/code> function that shows each image in the <code>validImages<\/code> array:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> showImage = <span class=\"hljs-function\">(<span class=\"hljs-params\">image<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-keyword\">const<\/span> reader = <span class=\"hljs-keyword\">new<\/span> FileReader();\n    reader.readAsDataURL(image);\n    reader.addEventListener(<span class=\"hljs-string\">'load'<\/span>, (e) =&gt; {\n        <span class=\"hljs-keyword\">const<\/span> div = <span class=\"hljs-built_in\">document<\/span>.createElement(<span class=\"hljs-string\">'div'<\/span>);\n        div.classList.add(<span class=\"hljs-string\">'image'<\/span>);\n        div.innerHTML = <span class=\"hljs-string\">`\n            &lt;img src=\"<span class=\"hljs-subst\">${e.target.result}<\/span>\" alt=\"<span class=\"hljs-subst\">${image.name}<\/span>\"&gt;\n            &lt;p&gt;<span class=\"hljs-subst\">${image.name}<\/span>&lt;\/p&gt;\n            &lt;p&gt;<span class=\"hljs-subst\">${formatBytes(image.size)}<\/span>&lt;\/p&gt;\n        `<\/span>;\n        imageList.appendChild(div);\n    });\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>showImage()<\/code> uses the <code>FileReader<\/code> to read the uploaded image as the data URL. Once the <code>FileReader<\/code> completes reading the file, it&#8217;ll create a new <code>div<\/code> element to hold the image information.<\/p>\n\n\n\n<p>Note that the <code>formatBytes()<\/code> function converts the size in bytes into a human-readable format:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">formatBytes<\/span>(<span class=\"hljs-params\">size, decimals = <span class=\"hljs-number\">2<\/span><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">if<\/span> (size === <span class=\"hljs-number\">0<\/span>) <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">'0 bytes'<\/span>;\n    <span class=\"hljs-keyword\">const<\/span> k = <span class=\"hljs-number\">1024<\/span>;\n    <span class=\"hljs-keyword\">const<\/span> dm = decimals &lt; <span class=\"hljs-number\">0<\/span> ? <span class=\"hljs-number\">0<\/span> : decimals;\n    <span class=\"hljs-keyword\">const<\/span> sizes = &#91;<span class=\"hljs-string\">'Bytes'<\/span>, <span class=\"hljs-string\">'KB'<\/span>, <span class=\"hljs-string\">'MB'<\/span>, <span class=\"hljs-string\">'GB'<\/span>, <span class=\"hljs-string\">'TB'<\/span>, <span class=\"hljs-string\">'PB'<\/span>, <span class=\"hljs-string\">'EB'<\/span>, <span class=\"hljs-string\">'ZB'<\/span>, <span class=\"hljs-string\">'YB'<\/span>];\n    <span class=\"hljs-keyword\">const<\/span> i = <span class=\"hljs-built_in\">Math<\/span>.floor(<span class=\"hljs-built_in\">Math<\/span>.log(size) \/ <span class=\"hljs-built_in\">Math<\/span>.log(k));\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-built_in\">parseFloat<\/span>((size \/ <span class=\"hljs-built_in\">Math<\/span>.pow(k, i)).toFixed(dm)) + <span class=\"hljs-string\">' '<\/span> + sizes&#91;i];\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Seventh, define the <code>uploadImages()<\/code> function that uploads all images to the server:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> uploadImages = <span class=\"hljs-keyword\">async<\/span> (images) =&gt; {\n\n    <span class=\"hljs-keyword\">const<\/span> formData = <span class=\"hljs-keyword\">new<\/span> FormData();\n\n    &#91;...images].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">image<\/span>) =&gt;<\/span>\n        formData.append(<span class=\"hljs-string\">'images&#91;]'<\/span>, image, image.name)\n    );\n\n    <span class=\"hljs-keyword\">const<\/span> response = <span class=\"hljs-keyword\">await<\/span> fetch(<span class=\"hljs-string\">'upload.php'<\/span>, {\n        <span class=\"hljs-attr\">method<\/span>: <span class=\"hljs-string\">'POST'<\/span>,\n        <span class=\"hljs-attr\">body<\/span>: formData,\n    });\n\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">await<\/span> response.json();\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>uploadImages()<\/code> function uses the <code>FormData<\/code> API to construct data for submission:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> formData = <span class=\"hljs-keyword\">new<\/span> FormData();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>For each image, we add it to the <code>FormData<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">&#91;...images].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">image<\/span>) =&gt;<\/span>\n    formData.append(<span class=\"hljs-string\">'images&#91;]'<\/span>, image, image.name)\n);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that the <code>images<\/code> variable is a <code>FileList<\/code> object, not an array. To use the <code>forEach()<\/code> method, you use the spread operator (<code>...<\/code>) to convert the <code>FileList<\/code> object to an array like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">&#91;...images]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>All key\/value pairs in the form data have the same key as <code>images[]<\/code>; in PHP, you can access it as an array (<code>$_FILES['images']<\/code>)<\/p>\n\n\n\n<p>The <code>uploadImages()<\/code> function uses the Fetch API to upload the images (as the <code>FormData<\/code> object) to the server:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-19\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> response = <span class=\"hljs-keyword\">await<\/span> fetch(<span class=\"hljs-string\">'upload.php'<\/span>, {\n    <span class=\"hljs-attr\">method<\/span>: <span class=\"hljs-string\">'POST'<\/span>,\n    <span class=\"hljs-attr\">body<\/span>: formData,\n});\n\n<span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">await<\/span> response.json();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-19\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Eighth, add the change event handler to the file input element if users select files using this input element:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-20\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">fileInput.addEventListener(<span class=\"hljs-string\">'change'<\/span>, (e) =&gt; {\n    <span class=\"hljs-keyword\">const<\/span> { files } = e.target;\n    handleImages(files);\n});<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-20\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In the change event handler, you can access the FileList object as <code>e.target.files<\/code>. The logic for showing and uploading images is the same as drag &amp; drop.<\/p>\n\n\n\n<p>Note that if you drag &amp; drop images outside the dropzone, the web browser will display the images by default.<\/p>\n\n\n\n<p>To prevent this, you call the <code>preventDefault()<\/code> method of the <code>dragover<\/code> and <code>drop<\/code> event objects of the document like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-21\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">\/\/ prevent the drag &amp; drop on the page<\/span>\n<span class=\"hljs-built_in\">document<\/span>.addEventListener(<span class=\"hljs-string\">'dragover'<\/span>, (e) =&gt; e.preventDefault());\n<span class=\"hljs-built_in\">document<\/span>.addEventListener(<span class=\"hljs-string\">'drop'<\/span>, (e) =&gt; e.preventDefault());<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-21\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following shows the complete <code>app.js<\/code> file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-22\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> imageList = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'.image-list'<\/span>);\n<span class=\"hljs-keyword\">const<\/span> fileInput = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'.files'<\/span>);\n<span class=\"hljs-keyword\">const<\/span> dropzone = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'.dropzone'<\/span>);\n\n<span class=\"hljs-keyword\">const<\/span> setActive = <span class=\"hljs-function\">(<span class=\"hljs-params\">dropzone, active = <span class=\"hljs-literal\">true<\/span><\/span>) =&gt;<\/span> {\n    <span class=\"hljs-comment\">\/\/ active class<\/span>\n    <span class=\"hljs-keyword\">const<\/span> hasActiveClass = dropzone.classList.contains(<span class=\"hljs-string\">'active'<\/span>);\n\n    <span class=\"hljs-keyword\">if<\/span> (active &amp;&amp; !hasActiveClass) {\n        <span class=\"hljs-keyword\">return<\/span> dropzone.classList.add(<span class=\"hljs-string\">'active'<\/span>);\n    }\n\n    <span class=\"hljs-keyword\">if<\/span> (!active &amp;&amp; hasActiveClass) {\n        <span class=\"hljs-keyword\">return<\/span> dropzone.classList.remove(<span class=\"hljs-string\">'active'<\/span>);\n    }\n};\n\ndropzone.addEventListener(<span class=\"hljs-string\">'dragenter'<\/span>, (e) =&gt; {\n    e.preventDefault();\n    setActive(dropzone);\n});\n\ndropzone.addEventListener(<span class=\"hljs-string\">'dragover'<\/span>, (e) =&gt; {\n    e.preventDefault();\n    setActive(dropzone);\n});\n\ndropzone.addEventListener(<span class=\"hljs-string\">'dragleave'<\/span>, (e) =&gt; {\n    e.preventDefault();\n    setActive(dropzone, <span class=\"hljs-literal\">false<\/span>);\n});\n\ndropzone.addEventListener(<span class=\"hljs-string\">'drop'<\/span>, (e) =&gt; {\n    e.preventDefault();\n    setActive(dropzone, <span class=\"hljs-literal\">false<\/span>);\n    <span class=\"hljs-comment\">\/\/ get the valid files<\/span>\n    <span class=\"hljs-keyword\">const<\/span> { files } = e.dataTransfer;\n    <span class=\"hljs-comment\">\/\/ hand images<\/span>\n    handleImages(files);\n});\n\n<span class=\"hljs-keyword\">const<\/span> handleImages = <span class=\"hljs-function\">(<span class=\"hljs-params\">files<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-comment\">\/\/ get valid images<\/span>\n    <span class=\"hljs-keyword\">let<\/span> validImages = &#91;...files].filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">file<\/span>) =&gt;<\/span>\n        &#91;<span class=\"hljs-string\">'image\/jpeg'<\/span>, <span class=\"hljs-string\">'image\/png'<\/span>].includes(file.type)\n    );\n    <span class=\"hljs-comment\">\/\/  show the image<\/span>\n    validImages.forEach(showImage);\n    <span class=\"hljs-comment\">\/\/ upload files<\/span>\n    uploadImages(validImages);\n};\n\n<span class=\"hljs-keyword\">const<\/span> showImage = <span class=\"hljs-function\">(<span class=\"hljs-params\">image<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-keyword\">const<\/span> reader = <span class=\"hljs-keyword\">new<\/span> FileReader();\n    reader.readAsDataURL(image);\n    reader.addEventListener(<span class=\"hljs-string\">'load'<\/span>, (e) =&gt; {\n        <span class=\"hljs-keyword\">const<\/span> div = <span class=\"hljs-built_in\">document<\/span>.createElement(<span class=\"hljs-string\">'div'<\/span>);\n        div.classList.add(<span class=\"hljs-string\">'image'<\/span>);\n        div.innerHTML = <span class=\"hljs-string\">`\n            &lt;img src=\"<span class=\"hljs-subst\">${e.target.result}<\/span>\" alt=\"<span class=\"hljs-subst\">${image.name}<\/span>\"&gt;\n            &lt;p&gt;<span class=\"hljs-subst\">${image.name}<\/span>&lt;\/p&gt;\n            &lt;p&gt;<span class=\"hljs-subst\">${formatBytes(image.size)}<\/span>&lt;\/p&gt;\n        `<\/span>;\n        imageList.appendChild(div);\n    });\n};\n\n<span class=\"hljs-keyword\">const<\/span> uploadImages = <span class=\"hljs-keyword\">async<\/span> (images) =&gt; {\n    <span class=\"hljs-keyword\">const<\/span> formData = <span class=\"hljs-keyword\">new<\/span> FormData();\n\n    &#91;...images].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">image<\/span>) =&gt;<\/span>\n        formData.append(<span class=\"hljs-string\">'images&#91;]'<\/span>, image, image.name)\n    );\n\n    <span class=\"hljs-keyword\">const<\/span> response = <span class=\"hljs-keyword\">await<\/span> fetch(<span class=\"hljs-string\">'upload.php'<\/span>, {\n        <span class=\"hljs-attr\">method<\/span>: <span class=\"hljs-string\">'POST'<\/span>,\n        <span class=\"hljs-attr\">body<\/span>: formData,\n    });\n\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">await<\/span> response.json();\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">formatBytes<\/span>(<span class=\"hljs-params\">size, decimals = <span class=\"hljs-number\">2<\/span><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">if<\/span> (size === <span class=\"hljs-number\">0<\/span>) <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">'0 bytes'<\/span>;\n    <span class=\"hljs-keyword\">const<\/span> k = <span class=\"hljs-number\">1024<\/span>;\n    <span class=\"hljs-keyword\">const<\/span> dm = decimals &lt; <span class=\"hljs-number\">0<\/span> ? <span class=\"hljs-number\">0<\/span> : decimals;\n    <span class=\"hljs-keyword\">const<\/span> sizes = &#91;<span class=\"hljs-string\">'Bytes'<\/span>, <span class=\"hljs-string\">'KB'<\/span>, <span class=\"hljs-string\">'MB'<\/span>, <span class=\"hljs-string\">'GB'<\/span>, <span class=\"hljs-string\">'TB'<\/span>, <span class=\"hljs-string\">'PB'<\/span>, <span class=\"hljs-string\">'EB'<\/span>, <span class=\"hljs-string\">'ZB'<\/span>, <span class=\"hljs-string\">'YB'<\/span>];\n\n    <span class=\"hljs-keyword\">const<\/span> i = <span class=\"hljs-built_in\">Math<\/span>.floor(<span class=\"hljs-built_in\">Math<\/span>.log(size) \/ <span class=\"hljs-built_in\">Math<\/span>.log(k));\n\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-built_in\">parseFloat<\/span>((size \/ <span class=\"hljs-built_in\">Math<\/span>.pow(k, i)).toFixed(dm)) + <span class=\"hljs-string\">' '<\/span> + sizes&#91;i];\n}\n\nfileInput.addEventListener(<span class=\"hljs-string\">'change'<\/span>, (e) =&gt; {\n    <span class=\"hljs-keyword\">const<\/span> { files } = e.target;\n    handleImages(files);\n});\n\n<span class=\"hljs-comment\">\/\/ prevent the drag &amp; drop on the page<\/span>\n<span class=\"hljs-built_in\">document<\/span>.addEventListener(<span class=\"hljs-string\">'dragover'<\/span>, (e) =&gt; e.preventDefault());\n<span class=\"hljs-built_in\">document<\/span>.addEventListener(<span class=\"hljs-string\">'drop'<\/span>, (e) =&gt; e.preventDefault());<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-22\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Finally, create a simple <code>upload.php<\/code> script that moves the uploaded images to the <code>uploads<\/code> folder:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-23\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">&lt;?php\r\n\r\n<span class=\"hljs-keyword\">const<\/span> APP_ROOT = <span class=\"hljs-string\">'http:\/\/localhost:8080\/'<\/span>;\r\n\r\n<span class=\"hljs-keyword\">const<\/span> UPLOAD_DIR = __DIR__ . <span class=\"hljs-string\">'\/uploads'<\/span>;\r\n\r\n<span class=\"hljs-keyword\">const<\/span> MESSAGES = &#91;\r\n    <span class=\"hljs-function\"><span class=\"hljs-params\">UPLOAD_ERR_OK<\/span> =&gt;<\/span> <span class=\"hljs-string\">'File uploaded successfully'<\/span>,\r\n    UPLOAD_ERR_INI_SIZE =&gt; <span class=\"hljs-string\">'File is too big to upload'<\/span>,\r\n    UPLOAD_ERR_FORM_SIZE =&gt; <span class=\"hljs-string\">'File is too big to upload'<\/span>,\r\n    UPLOAD_ERR_PARTIAL =&gt; <span class=\"hljs-string\">'File was only partially uploaded'<\/span>,\r\n    UPLOAD_ERR_NO_FILE =&gt; <span class=\"hljs-string\">'No file was uploaded'<\/span>,\r\n    UPLOAD_ERR_NO_TMP_DIR =&gt; <span class=\"hljs-string\">'Missing a temporary folder on the server'<\/span>,\r\n    UPLOAD_ERR_CANT_WRITE =&gt; <span class=\"hljs-string\">'File is failed to save to disk.'<\/span>,\r\n    UPLOAD_ERR_EXTENSION =&gt; <span class=\"hljs-string\">'File is not allowed to upload to this server'<\/span>,\r\n];\r\n\r\n<span class=\"hljs-keyword\">const<\/span> ALLOWED_FILES = &#91;\r\n    <span class=\"hljs-string\">'image\/png'<\/span> =&gt; <span class=\"hljs-string\">'png'<\/span>,\r\n    <span class=\"hljs-string\">'image\/jpeg'<\/span> =&gt; <span class=\"hljs-string\">'jpg'<\/span>\r\n];\r\n\r\n<span class=\"hljs-keyword\">const<\/span> MAX_SIZE = <span class=\"hljs-number\">5<\/span> * <span class=\"hljs-number\">1024<\/span> * <span class=\"hljs-number\">1024<\/span>; <span class=\"hljs-comment\">\/\/  5MB<\/span>\r\n\r\n<span class=\"hljs-keyword\">const<\/span> HTTP_STATUSES = &#91;\r\n    <span class=\"hljs-number\">200<\/span> =&gt; <span class=\"hljs-string\">'OK'<\/span>,\r\n    <span class=\"hljs-number\">400<\/span> =&gt; <span class=\"hljs-string\">'Bad Request'<\/span>,\r\n    <span class=\"hljs-number\">404<\/span> =&gt; <span class=\"hljs-string\">'Not Found'<\/span>,\r\n    <span class=\"hljs-number\">405<\/span> =&gt; <span class=\"hljs-string\">'Method Not Allowed'<\/span>\r\n];\r\n\r\n\r\n$is_post_request = strtolower($_SERVER&#91;<span class=\"hljs-string\">'REQUEST_METHOD'<\/span>]) === <span class=\"hljs-string\">'post'<\/span>;\r\n$has_files = isset($_FILES&#91;<span class=\"hljs-string\">'images'<\/span>]);\r\n\r\n<span class=\"hljs-keyword\">if<\/span> (!$is_post_request || !$has_files) {\r\n    response(<span class=\"hljs-number\">405<\/span>, &#91;\r\n        <span class=\"hljs-string\">'success'<\/span> =&gt; <span class=\"hljs-literal\">false<\/span>,\r\n        <span class=\"hljs-string\">'message'<\/span> =&gt; <span class=\"hljs-string\">' Method not allowed or files do not exist'<\/span>\r\n    ]);\r\n}\r\n\r\n$files = $_FILES&#91;<span class=\"hljs-string\">'images'<\/span>];\r\n$file_count = count($files&#91;<span class=\"hljs-string\">'name'<\/span>]);\r\n\r\n<span class=\"hljs-comment\">\/\/ validation<\/span>\r\n$errors = &#91;];\r\n<span class=\"hljs-keyword\">for<\/span> ($i = <span class=\"hljs-number\">0<\/span>; $i &lt; $file_count; $i++) {\r\n    <span class=\"hljs-comment\">\/\/ get the uploaded file info<\/span>\r\n    $status = $files&#91;<span class=\"hljs-string\">'error'<\/span>]&#91;$i];\r\n    $filename = $files&#91;<span class=\"hljs-string\">'name'<\/span>]&#91;$i];\r\n    $tmp = $files&#91;<span class=\"hljs-string\">'tmp_name'<\/span>]&#91;$i];\r\n\r\n    <span class=\"hljs-comment\">\/\/ an error occurs<\/span>\r\n    <span class=\"hljs-keyword\">if<\/span> ($status !== UPLOAD_ERR_OK) {\r\n        $errors&#91;$filename] = MESSAGES&#91;$status];\r\n        <span class=\"hljs-keyword\">continue<\/span>;\r\n    }\r\n    <span class=\"hljs-comment\">\/\/ validate the file size<\/span>\r\n    $filesize = filesize($tmp);\r\n\r\n    <span class=\"hljs-keyword\">if<\/span> ($filesize &gt; MAX_SIZE) {\r\n        <span class=\"hljs-comment\">\/\/ construct an error message<\/span>\r\n        $message = sprintf(\r\n            <span class=\"hljs-string\">\"The file %s is %s which is greater than the allowed size %s\"<\/span>,\r\n            $filename,\r\n            format_filesize($filesize),\r\n            format_filesize(MAX_SIZE)\r\n        );\r\n\r\n        $errors&#91;$filesize] = $message;\r\n        <span class=\"hljs-keyword\">continue<\/span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">\/\/ validate the file type<\/span>\r\n    <span class=\"hljs-keyword\">if<\/span> (!in_array(get_mime_type($tmp), array_keys(ALLOWED_FILES))) {\r\n        $errors&#91;$filename] = <span class=\"hljs-string\">\"The file $filename is allowed to upload\"<\/span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">if<\/span> ($errors) {\r\n    response(<span class=\"hljs-number\">400<\/span>, &#91;\r\n        <span class=\"hljs-string\">'success'<\/span> =&gt; <span class=\"hljs-literal\">false<\/span>,\r\n        <span class=\"hljs-string\">'message'<\/span> =&gt; $errors\r\n    ]);\r\n}\r\n\r\n<span class=\"hljs-comment\">\/\/ move the files<\/span>\r\n<span class=\"hljs-keyword\">for<\/span> ($i = <span class=\"hljs-number\">0<\/span>; $i &lt; $file_count; $i++) {\r\n    $filename = $files&#91;<span class=\"hljs-string\">'name'<\/span>]&#91;$i];\r\n    $tmp = $files&#91;<span class=\"hljs-string\">'tmp_name'<\/span>]&#91;$i];\r\n    $mime_type = get_mime_type($tmp);\r\n\r\n    <span class=\"hljs-comment\">\/\/ set the filename as the basename + extension<\/span>\r\n    $uploaded_file = pathinfo($filename, PATHINFO_FILENAME) . <span class=\"hljs-string\">'.'<\/span> . ALLOWED_FILES&#91;$mime_type];\r\n    <span class=\"hljs-comment\">\/\/ new filepath<\/span>\r\n    $filepath = UPLOAD_DIR . <span class=\"hljs-string\">'\/'<\/span> . $uploaded_file;\r\n\r\n    <span class=\"hljs-comment\">\/\/ move the file to the upload dir<\/span>\r\n    $success = move_uploaded_file($tmp, $filepath);\r\n    <span class=\"hljs-keyword\">if<\/span> (!$success) {\r\n        $errors&#91;$filename] = <span class=\"hljs-string\">\"The file $filename was failed to move.\"<\/span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">if<\/span> ($errors) {\r\n    response(<span class=\"hljs-number\">400<\/span>, &#91;\r\n        <span class=\"hljs-string\">'success'<\/span> =&gt; <span class=\"hljs-literal\">false<\/span>,\r\n        <span class=\"hljs-string\">'message'<\/span> =&gt; $errors\r\n    ]);\r\n}\r\n\r\nresponse(<span class=\"hljs-number\">200<\/span>, &#91;\r\n    <span class=\"hljs-string\">'success'<\/span> =&gt; <span class=\"hljs-literal\">true<\/span>,\r\n    <span class=\"hljs-string\">'message'<\/span> =&gt; <span class=\"hljs-string\">'The files uploaded successfully'<\/span>\r\n]);\r\n\r\n\r\n<span class=\"hljs-comment\">\/**\r\n * Return a mime type of file or false if an error occurred\r\n *\r\n * @param string $filename\r\n * @return string | bool\r\n *\/<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">get_mime_type<\/span>(<span class=\"hljs-params\">string $filename<\/span>)\r\n<\/span>{\r\n    $info = finfo_open(FILEINFO_MIME_TYPE);\r\n    <span class=\"hljs-keyword\">if<\/span> (!$info) {\r\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-literal\">false<\/span>;\r\n    }\r\n\r\n    $mime_type = finfo_file($info, $filename);\r\n    finfo_close($info);\r\n\r\n    <span class=\"hljs-keyword\">return<\/span> $mime_type;\r\n}\r\n\r\n<span class=\"hljs-comment\">\/**\r\n * Return a human-readable file size\r\n *\r\n * <span class=\"hljs-doctag\">@param <\/span>int $bytes\r\n * <span class=\"hljs-doctag\">@param <\/span>int $decimals\r\n * <span class=\"hljs-doctag\">@return <span class=\"hljs-variable\">string<\/span><\/span>\r\n *\/<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">format_filesize<\/span>(<span class=\"hljs-params\">int $bytes, int $decimals = <span class=\"hljs-number\">2<\/span><\/span>): <span class=\"hljs-title\">string<\/span>\r\n<\/span>{\r\n    $units = <span class=\"hljs-string\">'BKMGTP'<\/span>;\r\n    $factor = floor((strlen($bytes) - <span class=\"hljs-number\">1<\/span>) \/ <span class=\"hljs-number\">3<\/span>);\r\n\r\n    <span class=\"hljs-keyword\">return<\/span> sprintf(<span class=\"hljs-string\">\"%.{$decimals}f\"<\/span>, $bytes \/ pow(<span class=\"hljs-number\">1024<\/span>, $factor)) . $units&#91;(int)$factor];\r\n}\r\n\r\n<span class=\"hljs-comment\">\/**\r\n * Response JSON to the client\r\n * <span class=\"hljs-doctag\">@param <\/span>int $status_code\r\n * <span class=\"hljs-doctag\">@param <\/span>array|null $data\r\n *\/<\/span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">response<\/span>(<span class=\"hljs-params\">int $status_code, array $data = null<\/span>)\r\n<\/span>{\r\n    header(<span class=\"hljs-string\">\"HTTP\/1.1 \"<\/span> . $status_code . <span class=\"hljs-string\">\" \"<\/span> . HTTP_STATUSES&#91;$status_code]);\r\n    header(<span class=\"hljs-string\">\"Content-Type: application\/json\"<\/span>);\r\n    echo json_encode($data);\r\n    exit;\r\n}\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-23\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Read more on <a href=\"https:\/\/www.phptutorial.net\/php-tutorial\/php-upload-multiple-files\/\" target=\"_blank\" rel=\"noreferrer noopener\">how to upload multiple files in PHP<\/a> for more information.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>Use the JavaScript FileReader API to read the files selected by users via drag &amp; drop or file input element.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"88611\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-filereader\/\"\n\t\t\t\tdata-post-title=\"JavaScript FileReader\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"88611\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-filereader\/\"\n\t\t\t\tdata-post-title=\"JavaScript FileReader\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about the JavaScript FileReader API and how to use it to implement the file upload.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":87825,"menu_order":6,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript FileReader<\/title>\n<meta name=\"description\" content=\"In this tutorial, you&#039;ll learn about the JavaScript FileReader API and how to use it to implement the file upload.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-filereader\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript FileReader\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you&#039;ll learn about the JavaScript FileReader API and how to use it to implement the file upload.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-filereader\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2021-09-03T08:13:32+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2021\/09\/JavaScript-FileReader-API-Drag-n-Drop-Files.jpg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"10 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-filereader\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-filereader\/\",\"name\":\"JavaScript FileReader\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2021-09-02T11:19:39+00:00\",\"dateModified\":\"2021-09-03T08:13:32+00:00\",\"description\":\"In this tutorial, you'll learn about the JavaScript FileReader API and how to use it to implement the file upload.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-filereader\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-filereader\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-filereader\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Web API\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript FileReader\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript FileReader","description":"In this tutorial, you'll learn about the JavaScript FileReader API and how to use it to implement the file upload.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-filereader\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript FileReader","og_description":"In this tutorial, you'll learn about the JavaScript FileReader API and how to use it to implement the file upload.","og_url":"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-filereader\/","og_site_name":"PriFix Tutorial","article_modified_time":"2021-09-03T08:13:32+00:00","og_image":[{"url":"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2021\/09\/JavaScript-FileReader-API-Drag-n-Drop-Files.jpg"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"10 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-filereader\/","url":"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-filereader\/","name":"JavaScript FileReader","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2021-09-02T11:19:39+00:00","dateModified":"2021-09-03T08:13:32+00:00","description":"In this tutorial, you'll learn about the JavaScript FileReader API and how to use it to implement the file upload.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-filereader\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-filereader\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-filereader\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"Web API","item":"https:\/\/https://jsprifix.netlify.app/\/web-apis\/"},{"@type":"ListItem","position":3,"name":"JavaScript FileReader"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/88611"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=88611"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/88611\/revisions"}],"predecessor-version":[{"id":88633,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/88611\/revisions\/88633"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/87825"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=88611"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}