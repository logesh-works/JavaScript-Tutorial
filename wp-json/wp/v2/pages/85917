{"id":85917,"date":"2020-03-16T03:37:40","date_gmt":"2020-03-16T10:37:40","guid":{"rendered":"https:\/\/www.javascripttutorial.net\/?page_id=85917"},"modified":"2022-02-12T21:29:39","modified_gmt":"2022-02-13T05:29:39","slug":"javascript-promise-all","status":"publish","type":"page","link":"https:\/\/www.javascripttutorial.net\/es6\/javascript-promise-all\/","title":{"rendered":"JavaScript Promise.all()"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to use the <code>Promise.all()<\/code> static method to aggregate results from multiple asynchronous operations.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"introduction-to-the-javascript-promise-all-method\">Introduction to the JavaScript Promise.all() method<\/h2>\n\n\n\n<p>The <code>Promise.all()<\/code> static method takes an <a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-iterator\/\">iterable<\/a> of <a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/\">promises<\/a>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">Promise<\/span>.all(iterable);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>Promise.all()<\/code> method returns a single promise that resolves when all the input promises have been resolved. The returned promise resolves to an array of the results of the input promises:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/02\/JavaScript-Promise.all-Fulfilled-1.svg\"><img decoding=\"async\" src=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/02\/JavaScript-Promise.all-Fulfilled-1.svg\" alt=\"\" class=\"wp-image-89543\"\/><\/a><\/figure>\n\n\n\n<p>In this diagram, the <code>promise1<\/code> resolves to a value <code>v1<\/code> at <code>t1<\/code> and the <code>promise2<\/code> resolves to a value <code>v2<\/code> at <code>t2<\/code>. Hence, the <code>Promise.all(promise1, promise2)<\/code> returns a promise that resolves to an array containing the results of the <code>promise1<\/code> and <code>promise2<\/code> <code>[v1, v2]<\/code> at <code>t2<\/code>.<\/p>\n\n\n\n<p>In other words, the <code>Promise.all()<\/code> waits for all the input promises to resolve and returns a new promise that resolves to an array containing the results of the input promises. <\/p>\n\n\n\n<p>If one of the input promise rejects, the <code>Promise.all()<\/code> method immediately returns a promise that rejects with an error of the first rejected promise:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/02\/JavaScript-Promise.all-Rejected.svg\"><img decoding=\"async\" src=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/02\/JavaScript-Promise.all-Rejected.svg\" alt=\"JavaScript Promise.all Rejected\" class=\"wp-image-89548\"\/><\/a><\/figure>\n\n\n\n<p>In this diagram, the <code>promise2<\/code> rejects at <code>t1<\/code> with an <code>error<\/code>. Therefore, the <code>Promise.all()<\/code> returns a new promise that immediately rejects with the same error. Also, the Promise.all() doesn&#8217;t care other input promises, whether they will resolve or reject.<\/p>\n\n\n\n<p>In practice, the <code>Promise.all()<\/code> is useful to aggregate the results from multiple asynchronous operations.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"javascript-promise-all-method-examples\">JavaScript Promise.all() method examples<\/h2>\n\n\n\n<p>Let&#8217;s take some examples to understand how the <code>Promise.all()<\/code> method works.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"1-resolved-promises-example\">1) Resolved promises example<\/h3>\n\n\n\n<p>The following promises resolve to 10, 20, and 30 after 1, 2, and 3 seconds. We use the <code><a href=\"https:\/\/www.javascripttutorial.net\/javascript-bom\/javascript-settimeout\/\">setTimeout()<\/a><\/code> to simulate the asynchronous operations:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> p1 = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Promise<\/span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject<\/span>) =&gt;<\/span> {\r\n  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\r\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'The first promise has resolved'<\/span>);\r\n    resolve(<span class=\"hljs-number\">10<\/span>);\r\n  }, <span class=\"hljs-number\">1<\/span> * <span class=\"hljs-number\">1000<\/span>);\r\n});\r\n<span class=\"hljs-keyword\">const<\/span> p2 = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Promise<\/span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject<\/span>) =&gt;<\/span> {\r\n  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\r\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'The second promise has resolved'<\/span>);\r\n    resolve(<span class=\"hljs-number\">20<\/span>);\r\n  }, <span class=\"hljs-number\">2<\/span> * <span class=\"hljs-number\">1000<\/span>);\r\n});\r\n<span class=\"hljs-keyword\">const<\/span> p3 = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Promise<\/span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject<\/span>) =&gt;<\/span> {\r\n  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\r\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'The third promise has resolved'<\/span>);\r\n    resolve(<span class=\"hljs-number\">30<\/span>);\r\n  }, <span class=\"hljs-number\">3<\/span> * <span class=\"hljs-number\">1000<\/span>);\r\n});\r\n\r\n<span class=\"hljs-built_in\">Promise<\/span>.all(&#91;p1, p2, p3]).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">results<\/span>) =&gt;<\/span> {\r\n  <span class=\"hljs-keyword\">const<\/span> total = results.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">p, c<\/span>) =&gt;<\/span> p + c);\r\n\r\n  <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Results: <span class=\"hljs-subst\">${results}<\/span>`<\/span>);\r\n  <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Total: <span class=\"hljs-subst\">${total}<\/span>`<\/span>);\r\n});\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">The first promise has resolved\nThe second promise has resolved\nThe third promise has resolved\nResults: 10,20,30\nTotal: 60\n<\/code><\/span><\/pre>\n\n\n<p>When all promises have resolved, the values from these promises are passed into the callback of the <code>then()<\/code> method as an array.<\/p>\n\n\n\n<p>Inside the callback, we use the Array&#8217;s <code><a href=\"https:\/\/www.javascripttutorial.net\/javascript-array-reduce\/\">reduce()<\/a><\/code> method to calculate the total value and use the <code>console.log<\/code> to display the array of values as well as the total.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"2-rejected-promises-example\">2) Rejected promises example<\/h3>\n\n\n\n<p>The <code>Promise.all()<\/code> returns a Promise that is rejected if any of the input promises are rejected.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> p1 = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Promise<\/span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject<\/span>) =&gt;<\/span> {\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'The first promise has resolved'<\/span>);\n        resolve(<span class=\"hljs-number\">10<\/span>);\n    }, <span class=\"hljs-number\">1<\/span> * <span class=\"hljs-number\">1000<\/span>);\n\n});\n<span class=\"hljs-keyword\">const<\/span> p2 = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Promise<\/span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject<\/span>) =&gt;<\/span> {\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'The second promise has rejected'<\/span>);\n        reject(<span class=\"hljs-string\">'Failed'<\/span>);\n    }, <span class=\"hljs-number\">2<\/span> * <span class=\"hljs-number\">1000<\/span>);\n});\n<span class=\"hljs-keyword\">const<\/span> p3 = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Promise<\/span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject<\/span>) =&gt;<\/span> {\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'The third promise has resolved'<\/span>);\n        resolve(<span class=\"hljs-number\">30<\/span>);\n    }, <span class=\"hljs-number\">3<\/span> * <span class=\"hljs-number\">1000<\/span>);\n});\n\n\n<span class=\"hljs-built_in\">Promise<\/span>.all(&#91;p1, p2, p3])\n    .then(<span class=\"hljs-built_in\">console<\/span>.log) <span class=\"hljs-comment\">\/\/ never execute<\/span>\n    .catch(<span class=\"hljs-built_in\">console<\/span>.log);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">The first promise has resolved\nThe second promise has rejected\nFailed\nThe third promise has resolved\n<\/code><\/span><\/pre>\n\n\n<p>In this example, we have three promises: the first one is resolved after 1 second, the second is rejected after 2 seconds, and the third one is resolved after 3 seconds.<\/p>\n\n\n\n<p>As a result, the returned promise is rejected because the second promise is rejected. The <code>catch()<\/code> method is executed to display the reason for the rejected promise.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"summary\">Summary<\/h2>\n\n\n\n<ul><li>The <code>Promise.all()<\/code> method accepts a list of promises and returns a new promsie that resolve to an array of  results of the input promises if all the input promises resolved; or reject with an error of the first rejected promise.<\/li><li>Use the <code>Promise.all()<\/code> method to aggregate results from multiple asynchronous operations.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"85917\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promise-all\/\"\n\t\t\t\tdata-post-title=\"JavaScript Promise.all()\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"85917\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promise-all\/\"\n\t\t\t\tdata-post-title=\"JavaScript Promise.all()\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how to use the JavaScript Promise.all() method to aggregate results from multiple asynchronous operations.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":87,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Promise.all(): Aggregate Results from Multiple Promises<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn how to use the Promise.all() method to aggregate results from multiple asynchronous operations.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promise-all\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Promise.all(): Aggregate Results from Multiple Promises\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you will learn how to use the Promise.all() method to aggregate results from multiple asynchronous operations.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promise-all\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-13T05:29:39+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/02\/JavaScript-Promise.all-Fulfilled-1.svg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promise-all\/\",\"url\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promise-all\/\",\"name\":\"JavaScript Promise.all(): Aggregate Results from Multiple Promises\",\"isPartOf\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\"},\"datePublished\":\"2020-03-16T10:37:40+00:00\",\"dateModified\":\"2022-02-13T05:29:39+00:00\",\"description\":\"In this tutorial, you will learn how to use the Promise.all() method to aggregate results from multiple asynchronous operations.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promise-all\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promise-all\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promise-all\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Promise.all()\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\",\"url\":\"https:\/\/www.javascripttutorial.net\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.javascripttutorial.net\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Promise.all(): Aggregate Results from Multiple Promises","description":"In this tutorial, you will learn how to use the Promise.all() method to aggregate results from multiple asynchronous operations.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.javascripttutorial.net\/es6\/javascript-promise-all\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Promise.all(): Aggregate Results from Multiple Promises","og_description":"In this tutorial, you will learn how to use the Promise.all() method to aggregate results from multiple asynchronous operations.","og_url":"https:\/\/www.javascripttutorial.net\/es6\/javascript-promise-all\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-02-13T05:29:39+00:00","og_image":[{"url":"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/02\/JavaScript-Promise.all-Fulfilled-1.svg"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/www.javascripttutorial.net\/es6\/javascript-promise-all\/","url":"https:\/\/www.javascripttutorial.net\/es6\/javascript-promise-all\/","name":"JavaScript Promise.all(): Aggregate Results from Multiple Promises","isPartOf":{"@id":"https:\/\/www.javascripttutorial.net\/#website"},"datePublished":"2020-03-16T10:37:40+00:00","dateModified":"2022-02-13T05:29:39+00:00","description":"In this tutorial, you will learn how to use the Promise.all() method to aggregate results from multiple asynchronous operations.","breadcrumb":{"@id":"https:\/\/www.javascripttutorial.net\/es6\/javascript-promise-all\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.javascripttutorial.net\/es6\/javascript-promise-all\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.javascripttutorial.net\/es6\/javascript-promise-all\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":3,"name":"JavaScript Promise.all()"}]},{"@type":"WebSite","@id":"https:\/\/www.javascripttutorial.net\/#website","url":"https:\/\/www.javascripttutorial.net\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.javascripttutorial.net\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/85917"}],"collection":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/comments?post=85917"}],"version-history":[{"count":5,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/85917\/revisions"}],"predecessor-version":[{"id":89549,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/85917\/revisions\/89549"}],"up":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/media?parent=85917"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}