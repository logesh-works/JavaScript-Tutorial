{"id":488,"date":"2016-08-25T10:41:27","date_gmt":"2016-08-25T17:41:27","guid":{"rendered":"http:\/\/https://jsprifix.netlify.app/\/?page_id=488"},"modified":"2022-01-22T00:12:36","modified_gmt":"2022-01-22T08:12:36","slug":"javascript-arrow-function","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/","title":{"rendered":"An Introduction to JavaScript Arrow Functions"},"content":{"rendered":"\r\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to use the JavaScript arrow function to write more concise code for function expressions.<\/p>\r\n\r\n\r\n\r\n<h2 class=\"wp-block-heading\">Introduction to JavaScript arrow functions<\/h2>\r\n\r\n\r\n\r\n<p>ES6 arrow functions provide you with an alternative way to write a shorter syntax compared to the function expression. <\/p>\r\n\r\n\r\n\r\n<p>The following example defines a function expression that returns the sum of two numbers:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> add = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">x, y<\/span>) <\/span>{\r\n\t<span class=\"hljs-keyword\">return<\/span> x + y;\r\n};\r\n\r\n<span class=\"hljs-built_in\">console<\/span>.log(add(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>)); <span class=\"hljs-comment\">\/\/ 30<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>The following example is equivalent to the above <code>add()<\/code> function expression but use an arrow function instead:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> add = <span class=\"hljs-function\">(<span class=\"hljs-params\">x, y<\/span>) =&gt;<\/span> x + y;\r\n\r\n<span class=\"hljs-built_in\">console<\/span>.log(add(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>)); <span class=\"hljs-comment\">\/\/ 30;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>In this example, the arrow function has one expression <code>x + y<\/code> so it returns the result of the expression.<\/p>\r\n\r\n\r\n\r\n<p>However, if you use the block syntax, you need to specify the <code>return<\/code> keyword:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> add = <span class=\"hljs-function\">(<span class=\"hljs-params\">x, y<\/span>) =&gt;<\/span> { <span class=\"hljs-keyword\">return<\/span> x + y; };<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>The &nbsp;<code>typeof<\/code> operator&nbsp;returns <code>function<\/code> indicating the type of arrow function.<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span> add); <span class=\"hljs-comment\">\/\/ function<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>The arrow function is also an instance of the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/\">Function type<\/a> as shown in the following example:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(add <span class=\"hljs-keyword\">instanceof<\/span> <span class=\"hljs-built_in\">Function<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\">JavaScript arrow functions with multiple parameters<\/h3>\r\n\r\n\r\n\r\n<p>If an arrow function has two or more parameters, you use the following syntax:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">(p1, p2, ..., pn) =&gt; expression;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>The following expression:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">=&gt; expression<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>is equivalent to the following expression:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">=&gt; { <span class=\"hljs-keyword\">return<\/span> expression; }<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>For example, to <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-array-sort\/\">sort an array<\/a> of numbers in the descending order, you use the <code>sort()<\/code> method of the array object as follows:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> numbers = &#91;<span class=\"hljs-number\">4<\/span>,<span class=\"hljs-number\">2<\/span>,<span class=\"hljs-number\">6<\/span>];\r\nnumbers.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>(<span class=\"hljs-params\">a,b<\/span>)<\/span>{ \r\n    <span class=\"hljs-keyword\">return<\/span> b - a; \r\n});\r\n<span class=\"hljs-built_in\">console<\/span>.log(numbers); <span class=\"hljs-comment\">\/\/ &#91;6,4,2]<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>The code is more concise with the arrow function syntax:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> numbers = &#91;<span class=\"hljs-number\">4<\/span>,<span class=\"hljs-number\">2<\/span>,<span class=\"hljs-number\">6<\/span>];\r\nnumbers.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b<\/span>) =&gt;<\/span> b - a);\r\n<span class=\"hljs-built_in\">console<\/span>.log(numbers); <span class=\"hljs-comment\">\/\/ &#91;6,4,2]<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\">JavaScript arrow functions with a single parameter<\/h3>\r\n\r\n\r\n\r\n<p>If an arrow function takes a single parameter, you use the following syntax:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">(p1) =&gt; { statements }<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>Note that you can omit the parentheses as follows:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">p =&gt; { statements }<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>The following example uses an arrow function as an argument of the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-array-map\/\">map()<\/a><\/code> method that transforms an array of strings into an array of the string&#8217;s lengths.<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> names = &#91;<span class=\"hljs-string\">'John'<\/span>, <span class=\"hljs-string\">'Mac'<\/span>, <span class=\"hljs-string\">'Peter'<\/span>];\r\n<span class=\"hljs-keyword\">let<\/span> lengths = names.map(<span class=\"hljs-function\"><span class=\"hljs-params\">name<\/span> =&gt;<\/span> name.length);\r\n\r\n<span class=\"hljs-built_in\">console<\/span>.log(lengths);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>Output:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JSON \/ JSON with Comments\" data-shcb-language-slug=\"json\"><span><code class=\"hljs language-json\">&#91; <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">5<\/span> ]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JSON \/ JSON with Comments<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">json<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\">JavaScript arrow functions with no parameter<\/h3>\r\n\r\n\r\n\r\n<p>If the arrow function has no parameter, you need to use parentheses, like this:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">() =&gt; { statements }<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>For example:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> logDoc = <span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">window<\/span>.document);\r\nlogDoc();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<h2 class=\"wp-block-heading\">Line break between parameter definition and arrow<\/h2>\r\n\r\n\r\n\r\n<p>JavaScript doesn&#8217;t allow you to have a line break between the parameter definition and the arrow (<code>=><\/code>) in an arrow function. <\/p>\r\n\r\n\r\n\r\n<p>For example, the following code causes a <code>SyntaxError<\/code>:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> multiply = <span class=\"hljs-function\">(<span class=\"hljs-params\">x,y<\/span>) \r\n=&gt;<\/span> x * y; \r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>However, the following code works perfectly fine:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> multiply = <span class=\"hljs-function\">(<span class=\"hljs-params\">x,y<\/span>) =&gt;<\/span> \r\nx * y;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>JavaScript allows you to have  line breaks between parameters as shown in the following example:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-19\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> multiply = (\r\n  x,\r\n  y\r\n) =&gt; \r\nx * y;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-19\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<h2 class=\"wp-block-heading\">Statements &amp; expressions in the arrow function body<\/h2>\r\n\r\n\r\n\r\n<p>In JavaScript, an expression evaluates to a value as shown in the following example.<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">10 + 20;<\/code><\/span><\/pre>\r\n\r\n\r\n<p>A statement does a specific task such as:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-20\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if<\/span> (x === y) {\r\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'x equals y'<\/span>);\r\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-20\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>If you use an expression in the body of an arrow function, you don&#8217;t need to use the curly braces.<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-21\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> square = <span class=\"hljs-function\"><span class=\"hljs-params\">x<\/span> =&gt;<\/span> x * x;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-21\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>However, if you use&nbsp;a statement, you must wrap it inside a pair of curly braces as in the following example:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-22\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> except = <span class=\"hljs-function\"><span class=\"hljs-params\">msg<\/span> =&gt;<\/span> {\r\n    <span class=\"hljs-keyword\">throw<\/span> msg;\r\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-22\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<h2 class=\"wp-block-heading\">JavaScript arrow functions and object literal<\/h2>\r\n\r\n\r\n\r\n<p>Consider the following example:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-23\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> setColor = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">color<\/span>) <\/span>{\r\n    <span class=\"hljs-keyword\">return<\/span> {<span class=\"hljs-attr\">value<\/span>: color}\r\n};\r\n\r\n<span class=\"hljs-keyword\">let<\/span> backgroundColor = setColor(<span class=\"hljs-string\">'Red'<\/span>);\r\n<span class=\"hljs-built_in\">console<\/span>.log(backgroundColor.value); <span class=\"hljs-comment\">\/\/ \"Red\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-23\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>The <code>setColor()<\/code> function expression returns an object that has the <code>value<\/code> property set to the <code>color<\/code> argument.\u00a0<\/p>\r\n\r\n\r\n\r\n<p>If you use the following syntax to return an object literal from an arrow function, you will get an error.<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-24\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">p =&gt; {object:literal}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-24\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>For example, the following code causes an error.<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-25\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> setColor = <span class=\"hljs-function\"><span class=\"hljs-params\">color<\/span> =&gt;<\/span> {<span class=\"hljs-attr\">value<\/span>: color };<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-25\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>Since both block and object literal use curly brackets, the JavasScript engine cannot distinguish between a block and an object.<\/p>\r\n\r\n\r\n\r\n<p>To fix this, you need to wrap the object literal in parentheses as follows:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-26\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> setColor = <span class=\"hljs-function\"><span class=\"hljs-params\">color<\/span> =&gt;<\/span> ({<span class=\"hljs-attr\">value<\/span>: color });<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-26\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<h2 class=\"wp-block-heading\">Arrow function vs. regular function<\/h2>\r\n\r\n\r\n\r\n<p>There are two main differences between an arrow function and a regular function.<\/p>\r\n\r\n\r\n\r\n<ol><li>First, in the arrow function, the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-this\/\">this<\/a><\/code>, <code>arguments<\/code>, <code>super<\/code>, <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-new-target\/\">new.target<\/a><\/code> are lexical. It means that the arrow function uses these variables (or constructs) from the enclosing lexical scope.<\/li><li>Second, an arrow function cannot be used as a function constructor. If you use the <code>new<\/code> keyword to create a new object from an arrow function, you will get an error.<\/li><\/ol>\r\n\r\n\r\n\r\n<h3 class=\"wp-block-heading\">JavaScript arrow functions and <code>this<\/code> value<\/h3>\r\n\r\n\r\n\r\n<p>In JavaScript, a new function defines its own <code>this<\/code> value. However, it is not the case for the arrow function. See the following example:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-27\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Car<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\r\n    <span class=\"hljs-keyword\">this<\/span>.speed = <span class=\"hljs-number\">0<\/span>;\r\n\r\n    <span class=\"hljs-keyword\">this<\/span>.speedUp = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">speed<\/span>) <\/span>{\r\n        <span class=\"hljs-keyword\">this<\/span>.speed = speed;\r\n        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\r\n            <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">this<\/span>.speed); <span class=\"hljs-comment\">\/\/ undefined<\/span>\r\n        }, <span class=\"hljs-number\">1000<\/span>);\r\n\r\n    };\r\n}\r\n\r\n<span class=\"hljs-keyword\">let<\/span> car = <span class=\"hljs-keyword\">new<\/span> Car();\r\ncar.speedUp(<span class=\"hljs-number\">50<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-27\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>Inside the anonymous function of the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-bom\/javascript-settimeout\/\">setTimeout()<\/a><\/code> function, the <code>this.speed<\/code> is <code>undefined<\/code>. The reason is that the <code>this<\/code> of the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-anonymous-functions\/\">anonymous function<\/a> shadows the <code>this<\/code> of the <code>speedUp()<\/code> method.<\/p>\r\n\r\n\r\n\r\n<p>To fix this, you assign the <code>this<\/code> value to a variable that doesn&#8217;t shadow inside the anonymous function as follows:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-28\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Car<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\r\n    <span class=\"hljs-keyword\">this<\/span>.speed = <span class=\"hljs-number\">0<\/span>;\r\n\r\n    <span class=\"hljs-keyword\">this<\/span>.speedUp = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">speed<\/span>) <\/span>{\r\n        <span class=\"hljs-keyword\">this<\/span>.speed = speed;\r\n        <span class=\"hljs-keyword\">let<\/span> self = <span class=\"hljs-keyword\">this<\/span>;\r\n        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\r\n            <span class=\"hljs-built_in\">console<\/span>.log(self.speed);\r\n        }, <span class=\"hljs-number\">1000<\/span>);\r\n\r\n    };\r\n}\r\n\r\n<span class=\"hljs-keyword\">let<\/span> car = <span class=\"hljs-keyword\">new<\/span> Car();\r\ncar.speedUp(<span class=\"hljs-number\">50<\/span>); <span class=\"hljs-comment\">\/\/ 50;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-28\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>Unlike an anonymous function, an arrow function captures the <code>this<\/code> value of the enclosing context instead of creating its own <code>this<\/code> context. The following code should work as expected:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-29\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Car<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\r\n    <span class=\"hljs-keyword\">this<\/span>.speed = <span class=\"hljs-number\">0<\/span>;\r\n\r\n    <span class=\"hljs-keyword\">this<\/span>.speedUp = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">speed<\/span>) <\/span>{\r\n        <span class=\"hljs-keyword\">this<\/span>.speed = speed;\r\n        setTimeout(\r\n            <span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">this<\/span>.speed),\r\n            <span class=\"hljs-number\">1000<\/span>);\r\n\r\n    };\r\n}\r\n\r\n<span class=\"hljs-keyword\">let<\/span> car = <span class=\"hljs-keyword\">new<\/span> Car();\r\ncar.speedUp(<span class=\"hljs-number\">50<\/span>); <span class=\"hljs-comment\">\/\/ 50;<\/span>\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-29\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<h3 class=\"wp-block-heading\">JavaScript arrow functions and the arguments object<\/h3>\r\n\r\n\r\n\r\n<p>An arrow function doesn&#8217;t have the <code>arguments<\/code> object. For example:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-30\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">show<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\r\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-function\"><span class=\"hljs-params\">x<\/span> =&gt;<\/span> x + <span class=\"hljs-built_in\">arguments<\/span>&#91;<span class=\"hljs-number\">0<\/span>];\r\n}\r\n\r\n<span class=\"hljs-keyword\">let<\/span> display = show(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>);\r\n<span class=\"hljs-keyword\">let<\/span> result = display(<span class=\"hljs-number\">5<\/span>);\r\n<span class=\"hljs-built_in\">console<\/span>.log(result); <span class=\"hljs-comment\">\/\/ 15<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-30\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>The arrow function inside the <code>showMe()<\/code> function references the <code>arguments<\/code> object. However, this <code>arguments<\/code> object belongs to the <code>show()<\/code> function, not the arrow function.<\/p>\r\n\r\n\r\n\r\n<p>Also, an arrow function doesn&#8217;t have the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-new-target\/\">new.target<\/a><\/code> keyword.<\/p>\r\n\r\n\r\n\r\n<h3 class=\"wp-block-heading\">JavaScript arrow functions and the prototype property<\/h3>\r\n\r\n\r\n\r\n<p>When you define a <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-function\/\">function<\/a> using a <code>function<\/code> keyword, the function has a property called <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-prototype\/\">prototype<\/a><\/code>:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-31\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">dump<\/span>(<span class=\"hljs-params\"> message <\/span>) <\/span>{\r\n    <span class=\"hljs-built_in\">console<\/span>.log(message);\r\n}\r\n<span class=\"hljs-built_in\">console<\/span>.log(dump.hasOwnProperty(<span class=\"hljs-string\">'prototype'<\/span>)); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-31\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>However, arrow functions don&#8217;t have the <code>prototype<\/code> property:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-32\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> dump = <span class=\"hljs-function\"><span class=\"hljs-params\">message<\/span> =&gt;<\/span> <span class=\"hljs-built_in\">console<\/span>.log(message);\r\n<span class=\"hljs-built_in\">console<\/span>.log(dump.hasOwnProperty(<span class=\"hljs-string\">'prototype'<\/span>)); <span class=\"hljs-comment\">\/\/ false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-32\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>It is a good practice to use arrow functions for <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-callback\/\">callbacks<\/a> and <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-closure\/\">closures<\/a> because the syntax of arrow functions is cleaner.<\/p>\r\n\r\n\r\n\r\n<h2 class=\"wp-block-heading\">Summary<\/h2>\r\n\r\n\r\n\r\n<ul><li>Use the <code>(...args) => expression;<\/code> to define an arrow function.<\/li><li>Use the <code>(...args) => { statements }<\/code> to define an arrow function that has multiple statements.<\/li><li>An arrow function doesn&#8217;t have its binding to <code>this<\/code> or <code>super<\/code>.<\/li><li>An arrow function doesn&#8217;t have <code>arguments<\/code> object, <code>new.target<\/code> keyword, and <code>prototype<\/code> property.<\/li><\/ul>\r\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"488\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/\"\n\t\t\t\tdata-post-title=\"An Introduction to JavaScript Arrow Functions\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"488\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/\"\n\t\t\t\tdata-post-title=\"An Introduction to JavaScript Arrow Functions\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how to use the JavaScript arrow function to write more concise code for function expressions.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":81,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>A Gentle Introduction to JavaScript Arrow Function<\/title>\n<meta name=\"description\" content=\"This tutorial shows you how to use JavaScript arrow function syntax in ES6 and provides you with some pitfalls of using arrow functions.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"A Gentle Introduction to JavaScript Arrow Function\" \/>\n<meta property=\"og:description\" content=\"This tutorial shows you how to use JavaScript arrow function syntax in ES6 and provides you with some pitfalls of using arrow functions.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-22T08:12:36+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/\",\"name\":\"A Gentle Introduction to JavaScript Arrow Function\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2016-08-25T17:41:27+00:00\",\"dateModified\":\"2022-01-22T08:12:36+00:00\",\"description\":\"This tutorial shows you how to use JavaScript arrow function syntax in ES6 and provides you with some pitfalls of using arrow functions.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"An Introduction to JavaScript Arrow Functions\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"A Gentle Introduction to JavaScript Arrow Function","description":"This tutorial shows you how to use JavaScript arrow function syntax in ES6 and provides you with some pitfalls of using arrow functions.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/","og_locale":"en_US","og_type":"article","og_title":"A Gentle Introduction to JavaScript Arrow Function","og_description":"This tutorial shows you how to use JavaScript arrow function syntax in ES6 and provides you with some pitfalls of using arrow functions.","og_url":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-22T08:12:36+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/","url":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/","name":"A Gentle Introduction to JavaScript Arrow Function","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2016-08-25T17:41:27+00:00","dateModified":"2022-01-22T08:12:36+00:00","description":"This tutorial shows you how to use JavaScript arrow function syntax in ES6 and provides you with some pitfalls of using arrow functions.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"An Introduction to JavaScript Arrow Functions"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/488"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=488"}],"version-history":[{"count":4,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/488\/revisions"}],"predecessor-version":[{"id":88413,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/488\/revisions\/88413"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=488"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}