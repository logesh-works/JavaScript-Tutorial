{"id":1007,"date":"2016-12-01T01:57:33","date_gmt":"2016-12-01T09:57:33","guid":{"rendered":"http:\/\/www.javascripttutorial.net\/?page_id=1007"},"modified":"2022-08-16T23:52:14","modified_gmt":"2022-08-17T06:52:14","slug":"es6-modules","status":"publish","type":"page","link":"https:\/\/www.javascripttutorial.net\/es6\/es6-modules\/","title":{"rendered":"A Comprehensive Look at ES6 Modules"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about <strong>ES6 modules<\/strong> and how to export variables, functions, and classes from a module, and reuse them in other modules.<\/p>\n\n\n\n<p>An ES6 module is a JavaScript file that executes in strict mode only. It means that any <a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-let\/\">variables<\/a> or <a href=\"https:\/\/www.javascripttutorial.net\/javascript-function\/\">functions<\/a>&nbsp;declared in the module won&#8217;t be added automatically to the global scope.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Executing modules on web browsers<\/h2>\n\n\n\n<p>First, create a new file called <code>message.js<\/code> and add the following code:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export<\/span> <span class=\"hljs-keyword\">let<\/span> message = <span class=\"hljs-string\">'ES6 Modules'<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>message.js<\/code> is a module in ES6 that contains the <code>message<\/code> variable. The <code>export<\/code> statement exposes the <code>message<\/code> variable to other modules.<\/p>\n\n\n\n<p>Second, create another new file named <code>app.js<\/code> that uses the <code>message.js<\/code> module. The <code>app.js<\/code> module creates a new heading 1 (h1) element and attaches it to an HTML page. The <code>import<\/code> statement imports the <code>message<\/code> variable from the <code>message.js<\/code> module.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> { message } <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/message.js'<\/span>\n\n<span class=\"hljs-keyword\">const<\/span> h1 = <span class=\"hljs-built_in\">document<\/span>.createElement(<span class=\"hljs-string\">'h1'<\/span>);\nh1.textContent = message\n\n<span class=\"hljs-built_in\">document<\/span>.body.appendChild(h1)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Third, create a new HTML page that uses the <code>app.js<\/code> module:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head<\/span>&gt;<\/span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta<\/span> <span class=\"hljs-attr\">charset<\/span>=<span class=\"hljs-string\">\"utf-8\"<\/span>&gt;<\/span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title<\/span>&gt;<\/span>ES6 Modules<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">title<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">head<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"module\"<\/span> <span class=\"hljs-attr\">src<\/span>=<span class=\"hljs-string\">\".\/app.js\"<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">script<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">body<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">html<\/span>&gt;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that we used the <code>type=\"module\"<\/code> in the &lt;script> tag to load the <code>app.js<\/code> module. If you view the page on a web browser, you will see the following page:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" loading=\"lazy\" width=\"310\" height=\"128\" src=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2019\/12\/es6-module.png\" alt=\"es6 module\" class=\"wp-image-84747\" srcset=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2019\/12\/es6-module.png 310w, https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2019\/12\/es6-module-300x124.png 300w\" sizes=\"(max-width: 310px) 100vw, 310px\" \/><\/figure>\n\n\n\n<p>Let&#8217;s examine the export and import statements in more detail.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Exporting<\/h2>\n\n\n\n<p>To export a <a href=\"https:\/\/www.javascripttutorial.net\/javascript-variables\/\">variable<\/a>, a <a href=\"https:\/\/www.javascripttutorial.net\/javascript-function\/\">function<\/a>, or a <a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-class\/\">class<\/a>, you place the <code>export<\/code> keyword in front of it as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">\/\/ log.js<\/span>\n<span class=\"hljs-keyword\">export<\/span> <span class=\"hljs-keyword\">let<\/span> message = <span class=\"hljs-string\">'Hi'<\/span>;\n\n<span class=\"hljs-keyword\">export<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getMessage<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n  <span class=\"hljs-keyword\">return<\/span> message;\n}\n\n<span class=\"hljs-keyword\">export<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">setMessage<\/span>(<span class=\"hljs-params\">msg<\/span>) <\/span>{\n  message = msg;\n}\n\n<span class=\"hljs-keyword\">export<\/span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Logger<\/span> <\/span>{\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we have the <code>log.js<\/code> module with a variable, two functions, and one class. We used the <code>export<\/code> keyword to exports all identifiers in the module.<\/p>\n\n\n\n<p>Note that the <code>export<\/code> keyword requires the function or class to have a name to be exported. You can&#8217;t export an anonymous function or class using this syntax.<\/p>\n\n\n\n<p>JavaScript allows you to define a variable, a function, or a class first and then export it later as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">\/\/ foo.js<\/span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">foo<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n   <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'foo'<\/span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">bar<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n  <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'bar'<\/span>);\n}\n<span class=\"hljs-keyword\">export<\/span> foo;\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we defined the <code>foo()<\/code> function first and then exported it. Since we didn&#8217;t export the <code>bar()<\/code> function, we couldn&#8217;t access it in other modules. The <code>bar()<\/code> function is inaccessible outside the module or we say it is private.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Importing<\/h2>\n\n\n\n<p>Once you define a module with exports, you can access the exported variables, functions, and classes in another module by using the <code>import<\/code> keyword. The following illustrates the syntax:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> { what, ever } <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/other_module.js'<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this syntax:<\/p>\n\n\n\n<ul><li>First, specify what to import inside the curly braces, which are called bindings.<\/li><li>Then, specify the module from which you import the given bindings.<\/li><\/ul>\n\n\n\n<p class=\"note\">Note that when you import a binding from a module, the binding behaves like it was defined using <a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-const\/\">const<\/a>. It means you can&#8217;t have another identifier with the same name or change the value of the binding.<\/p>\n\n\n\n<p>See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">\/\/ greeting.js<\/span>\n<span class=\"hljs-keyword\">export<\/span> <span class=\"hljs-keyword\">let<\/span> message = <span class=\"hljs-string\">'Hi'<\/span>;\n\n<span class=\"hljs-keyword\">export<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">setMessage<\/span>(<span class=\"hljs-params\">msg<\/span>) <\/span>{\n  message = msg;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When you import the <code>message<\/code> variable and <code>setMessage()<\/code> function, you can use the <code>setMessage()<\/code> function to change the value of the <code>message<\/code> variable as shown below:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">\/\/ app.js<\/span>\n<span class=\"hljs-keyword\">import<\/span> {message, setMessage } <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/greeting.js'<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(message); <span class=\"hljs-comment\">\/\/ 'Hi'<\/span>\n\nsetMessage(<span class=\"hljs-string\">'Hello'<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(message); <span class=\"hljs-comment\">\/\/ 'Hello' <\/span>\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, you can&#8217;t change the value of the <code>message<\/code> variable directly. The following expression causes an error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">message = <span class=\"hljs-string\">'Hallo'<\/span>; <span class=\"hljs-comment\">\/\/ error<\/span>\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Behind the scenes, when you called the <code>setMessage()<\/code> function. JavaScript went back to the <code>greeting.js<\/code> module and executed the code in there and changed the <code>message<\/code> variable. The change was then automatically reflected on the imported <code>message<\/code> binding.<\/p>\n\n\n\n<p>The <code>message<\/code> binding in the <code>app.js<\/code> is the local name for exported <code>message<\/code> identifier. So basically the <code>message<\/code>&nbsp;variables in the <code>app.js<\/code> and <code>greeting.js<\/code> modules aren&#8217;t the same.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Import a single binding<\/h3>\n\n\n\n<p>Suppose you have a module with the <code>foo<\/code> variable as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">\/\/ foo.js<\/span>\n<span class=\"hljs-keyword\">export<\/span> foo = <span class=\"hljs-number\">10<\/span>;\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Then, in another module, you can reuse the <code>foo<\/code> variable:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">\/\/ app.js<\/span>\n<span class=\"hljs-keyword\">import<\/span> { foo } <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/foo.js'<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(foo); <span class=\"hljs-comment\">\/\/ 10;<\/span>\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, you can&#8217;t change the value of <code>foo<\/code>. If you attempt to do so, you will get an error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">foo = <span class=\"hljs-number\">20<\/span>; <span class=\"hljs-comment\">\/\/ throws an error<\/span>\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Import multiple bindings<\/h3>\n\n\n\n<p>Suppose you have the <code>cal.js<\/code> module as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">\/\/ cal.js<\/span>\n<span class=\"hljs-keyword\">export<\/span> <span class=\"hljs-keyword\">let<\/span> a = <span class=\"hljs-number\">10<\/span>,\n           b = <span class=\"hljs-number\">20<\/span>,\n           result = <span class=\"hljs-number\">0<\/span>;\n\n<span class=\"hljs-keyword\">export<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">sum<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n  result = a + b;\n  <span class=\"hljs-keyword\">return<\/span> result;\n}\n\n<span class=\"hljs-keyword\">export<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">multiply<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n  result = a * b;\n  <span class=\"hljs-keyword\">return<\/span> result;\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And you want to import these bindings from the <code>cal.js<\/code>, you can explicitly list them as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> {a, b, result, sum, multiply } <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/cal.js'<\/span>;\nsum();\n<span class=\"hljs-built_in\">console<\/span>.log(result); <span class=\"hljs-comment\">\/\/ 30<\/span>\n\nmultiply();\n<span class=\"hljs-built_in\">console<\/span>.log(result); <span class=\"hljs-comment\">\/\/ 200<\/span>\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Import an entire module as an object<\/h3>\n\n\n\n<p>To import everything from a module as a single object, you&nbsp;use the asterisk (*) pattern as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> * <span class=\"hljs-keyword\">as<\/span> cal <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/cal.js'<\/span>;\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we imported all bindings from the <code>cal.js<\/code> module as the <code>cal<\/code> object. In this case, all the bindings become properties of the <code>cal<\/code> object, so you can access them as shown below:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">cal<\/span><span class=\"hljs-selector-class\">.a<\/span>;\n<span class=\"hljs-selector-tag\">cal<\/span><span class=\"hljs-selector-class\">.b<\/span>;\n<span class=\"hljs-selector-tag\">cal<\/span><span class=\"hljs-selector-class\">.sum<\/span>();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This import is called <em>namespace import<\/em>.<\/p>\n\n\n\n<p>It&#8217;s important to keep in mind that the imported module executes <em>only once<\/em> even if import multiple times. Consider this example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> { a } <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/cal.js'<\/span>;\n<span class=\"hljs-keyword\">import<\/span> { b } <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/cal.js'<\/span>;\n<span class=\"hljs-keyword\">import<\/span> {result} <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/cal.js'<\/span>;\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>After the first <code>import<\/code> statement, the <code>cal.js<\/code> module is executed and loaded into the memory, and it is reused whenever it is referenced by the subsequent&nbsp;<code>import<\/code> statement.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Limitation of <code>import<\/code> and <code>export<\/code> statements<\/h2>\n\n\n\n<p>Note that you must use the <code>import<\/code> or <code>export<\/code> statement <em>outside<\/em> other statements and functions. The following example causes a <code>SyntaxError<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if<\/span>( requiredSum ) {\n   <span class=\"hljs-keyword\">export<\/span> sum;\n}  \n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Because we used the <code>export<\/code> statement inside the <code><a href=\"https:\/\/www.javascripttutorial.net\/javascript-if-else\/\">if<\/a><\/code> statement. Similarly, the following <code>import<\/code> statement also causes a <code>SyntaxError<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-19\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">importSum<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n   <span class=\"hljs-keyword\">import<\/span> {sum} <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/cal.js'<\/span>;\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-19\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Because we used the <code>import<\/code> statement inside a function.<\/p>\n\n\n\n<p>The reason for the error is that JavaScript must <em>statically<\/em> determine what will be exported and imported.<\/p>\n\n\n\n<p class=\"note\">Note that ES2020 introduced the function-like object <a href=\"https:\/\/www.javascripttutorial.net\/es-next\/javascript-import\/\">import()<\/a> that allows you to dynamically import a module.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Aliasing<\/h2>\n\n\n\n<p>JavaScript allows you to create aliases for variables, functions, or classes when you export and import. See the following <code>math.js<\/code> module:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-20\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">\/\/ math.js  <\/span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span>(<span class=\"hljs-params\"> a, b <\/span>) <\/span>{\n   <span class=\"hljs-keyword\">return<\/span> a + b;\n}\n\n<span class=\"hljs-keyword\">export<\/span> { add <span class=\"hljs-keyword\">as<\/span> sum };\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-20\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, instead of exporting the <code>add()<\/code> function, we used the <code>as<\/code> keyword to assign the <code>sum()<\/code> function an alias.<\/p>\n\n\n\n<p>So when you import the <code>add()<\/code> function from the <code>math.js<\/code> module, you must use <code>sum<\/code> instead:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-21\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> { sum } <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/math.js'<\/span>;\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-21\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you want to use a different name when you import, you can use the <code>as<\/code> keyword as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-22\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> {sum <span class=\"hljs-keyword\">as<\/span> total} <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/math.js'<\/span>;\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-22\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Re-exporting a binding<\/h2>\n\n\n\n<p>It&#8217;s possible to export bindings that you have imported. This is called re-exporting. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-23\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> { sum } <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/math.js'<\/span>;\n<span class=\"hljs-keyword\">export<\/span> { sum };\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-23\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we imported <code>sum<\/code> from the <code>math.js<\/code> module and re-export it. The following statement is equivalent to the statements above:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-24\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export<\/span> {sum} <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/math.js'<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-24\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In case you want to rename the bindings before re-exporting, you use the <code>as<\/code> keyword. The following example of imports <code>sum<\/code> from the <code>math.js<\/code> module and re-export it as <code>add<\/code>.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-25\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export<\/span> { sum <span class=\"hljs-keyword\">as<\/span> add } <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/math.js'<\/span>;\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-25\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you want to export all the bindings from another module, you can use the asterisk (*):<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-26\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export<\/span> * <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/cal.js'<\/span>;\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-26\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Importing without bindings<\/h2>\n\n\n\n<p>Sometimes, you want to develop a module that doesn&#8217;t export anything, for example, you may want to add a new method to a built-in object such as the <a href=\"https:\/\/www.javascripttutorial.net\/javascript-array\/\">Array<\/a>.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-27\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">\/\/ array.js<\/span>\n<span class=\"hljs-keyword\">if<\/span> (!<span class=\"hljs-built_in\">Array<\/span>.prototype.contain) {\n  <span class=\"hljs-built_in\">Array<\/span>.prototype.contain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>(<span class=\"hljs-params\">e<\/span>) <\/span>{\n    <span class=\"hljs-comment\">\/\/ contain implementation<\/span>\n    <span class=\"hljs-comment\">\/\/ ...<\/span>\n  }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-27\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Now, you can import the module without any binding and use the <code>contain()<\/code> method defined in the <code>array.js<\/code> module as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-28\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> <span class=\"hljs-string\">'.\/array.js'<\/span>;\n&#91;<span class=\"hljs-number\">1<\/span>,<span class=\"hljs-number\">2<\/span>,<span class=\"hljs-number\">3<\/span>].contain(<span class=\"hljs-number\">2<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-28\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Default exports<\/h2>\n\n\n\n<p>A module can have one and only one default export. The default export is easier to import. The default for a module can be a variable, a function, or a class.<\/p>\n\n\n\n<p>The following is the <code>sort.js<\/code> module with a default export.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-29\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">\/\/ sort.js<\/span>\n<span class=\"hljs-keyword\">export<\/span> <span class=\"hljs-keyword\">default<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>(<span class=\"hljs-params\">arr<\/span>) <\/span>{\n  <span class=\"hljs-comment\">\/\/ sorting here<\/span>\n} \n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-29\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that you don&#8217;t need to specify the name for the function because the module represents the function name.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-30\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> sort <span class=\"hljs-keyword\">from<\/span> sort.js;\nsort(&#91;<span class=\"hljs-number\">2<\/span>,<span class=\"hljs-number\">1<\/span>,<span class=\"hljs-number\">3<\/span>]);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-30\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>As you see, the &nbsp;<code>sort<\/code> identifier represents the default function of the <code>sort.js<\/code> module. Notice that we didn&#8217;t use the curly brace <code>{}<\/code> surrounding the &nbsp;<code>sort<\/code> identifier.<\/p>\n\n\n\n<p>Let&#8217;s change the <code>sort.js<\/code> module to include the default export as well as the non-default one:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-31\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">\/\/ sort.js<\/span>\n<span class=\"hljs-keyword\">export<\/span> <span class=\"hljs-keyword\">default<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>(<span class=\"hljs-params\">arr<\/span>) <\/span>{\n  <span class=\"hljs-comment\">\/\/ sorting here<\/span>\n}\n<span class=\"hljs-keyword\">export<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">heapSort<\/span>(<span class=\"hljs-params\">arr<\/span>) <\/span>{\n  <span class=\"hljs-comment\">\/\/ heapsort<\/span>\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-31\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To import both default and non-default bindings, you specify a list of bindings after the <code>import<\/code> keyword with the following rules:<\/p>\n\n\n\n<ul><li>The default binding must come first.<\/li><li>The non-default binding must be surrounded by curly braces.<\/li><\/ul>\n\n\n\n<p>See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-32\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> sort, {heapSort} <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/sort.js'<\/span>;\nsort(&#91;<span class=\"hljs-number\">2<\/span>,<span class=\"hljs-number\">1<\/span>,<span class=\"hljs-number\">3<\/span>]);\nheapSort(&#91;<span class=\"hljs-number\">3<\/span>,<span class=\"hljs-number\">1<\/span>,<span class=\"hljs-number\">2<\/span>]);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-32\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To rename the default export, you also use the <code>as<\/code> keyword as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-33\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> { <span class=\"hljs-keyword\">default<\/span> <span class=\"hljs-keyword\">as<\/span> quicksort, heapSort} <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/sort.js'<\/span>;\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-33\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this tutorial, you have learned about ES6 modules and how to export bindings from a module and import them into another module.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1007\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/es6\/es6-modules\/\"\n\t\t\t\tdata-post-title=\"A Comprehensive Look at ES6 Modules\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1007\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/es6\/es6-modules\/\"\n\t\t\t\tdata-post-title=\"A Comprehensive Look at ES6 Modules\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about ES6 modules and how to export variables, functions, classes from a module and reuse them in other modules.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":103,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>A Comprehensive Look at ES6 Modules<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about ES6 modules and how to export bindings from a module and import them into another module.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.javascripttutorial.net\/es6\/es6-modules\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"A Comprehensive Look at ES6 Modules\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you will learn about ES6 modules and how to export bindings from a module and import them into another module.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.javascripttutorial.net\/es6\/es6-modules\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-08-17T06:52:14+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2019\/12\/es6-module.png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"8 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/es6-modules\/\",\"url\":\"https:\/\/www.javascripttutorial.net\/es6\/es6-modules\/\",\"name\":\"A Comprehensive Look at ES6 Modules\",\"isPartOf\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\"},\"datePublished\":\"2016-12-01T09:57:33+00:00\",\"dateModified\":\"2022-08-17T06:52:14+00:00\",\"description\":\"In this tutorial, you will learn about ES6 modules and how to export bindings from a module and import them into another module.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/es6-modules\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.javascripttutorial.net\/es6\/es6-modules\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/es6-modules\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"A Comprehensive Look at ES6 Modules\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\",\"url\":\"https:\/\/www.javascripttutorial.net\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.javascripttutorial.net\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"A Comprehensive Look at ES6 Modules","description":"In this tutorial, you will learn about ES6 modules and how to export bindings from a module and import them into another module.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.javascripttutorial.net\/es6\/es6-modules\/","og_locale":"en_US","og_type":"article","og_title":"A Comprehensive Look at ES6 Modules","og_description":"In this tutorial, you will learn about ES6 modules and how to export bindings from a module and import them into another module.","og_url":"https:\/\/www.javascripttutorial.net\/es6\/es6-modules\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-08-17T06:52:14+00:00","og_image":[{"url":"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2019\/12\/es6-module.png"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"8 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/www.javascripttutorial.net\/es6\/es6-modules\/","url":"https:\/\/www.javascripttutorial.net\/es6\/es6-modules\/","name":"A Comprehensive Look at ES6 Modules","isPartOf":{"@id":"https:\/\/www.javascripttutorial.net\/#website"},"datePublished":"2016-12-01T09:57:33+00:00","dateModified":"2022-08-17T06:52:14+00:00","description":"In this tutorial, you will learn about ES6 modules and how to export bindings from a module and import them into another module.","breadcrumb":{"@id":"https:\/\/www.javascripttutorial.net\/es6\/es6-modules\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.javascripttutorial.net\/es6\/es6-modules\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.javascripttutorial.net\/es6\/es6-modules\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":3,"name":"A Comprehensive Look at ES6 Modules"}]},{"@type":"WebSite","@id":"https:\/\/www.javascripttutorial.net\/#website","url":"https:\/\/www.javascripttutorial.net\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.javascripttutorial.net\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/1007"}],"collection":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/comments?post=1007"}],"version-history":[{"count":4,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/1007\/revisions"}],"predecessor-version":[{"id":90251,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/1007\/revisions\/90251"}],"up":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/media?parent=1007"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}