{"id":947,"date":"2016-11-25T01:08:08","date_gmt":"2016-11-25T09:08:08","guid":{"rendered":"http:\/\/https://jsprifix.netlify.app/\/?page_id=947"},"modified":"2022-01-18T17:04:21","modified_gmt":"2022-01-19T01:04:21","slug":"javascript-comparison-operators","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-comparison-operators\/","title":{"rendered":"JavaScript Comparison Operators"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to use JavaScript comparison operators to compare two values.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to JavaScript comparison operators<\/h2>\n\n\n\n<p>To compare two values, you use a comparison operator. The following table shows the comparison operators in JavaScript:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Operator<\/th><th>Meaning<\/th><\/tr><\/thead><tbody><tr><td>&lt;<\/td><td>less than<\/td><\/tr><tr><td>&gt;<\/td><td>greater than<\/td><\/tr><tr><td>&lt;=<\/td><td>less than or equal to<\/td><\/tr><tr><td>&gt;=<\/td><td>greater than or equal to<\/td><\/tr><tr><td>==<\/td><td>equal to<\/td><\/tr><tr><td>!=<\/td><td>not equal to<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>A comparison operator returns a <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/\">Boolean<\/a> value indicating that the comparison is true or not. See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> r1 = <span class=\"hljs-number\">20<\/span> &gt; <span class=\"hljs-number\">10<\/span>; <span class=\"hljs-comment\">\/\/ true<\/span>\n<span class=\"hljs-keyword\">let<\/span> r2 = <span class=\"hljs-number\">20<\/span> &lt; <span class=\"hljs-number\">10<\/span>; <span class=\"hljs-comment\">\/\/ false<\/span>\n<span class=\"hljs-keyword\">let<\/span> r3 = <span class=\"hljs-number\">10<\/span> == <span class=\"hljs-number\">10<\/span>; <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img decoding=\"async\" loading=\"lazy\" width=\"579\" height=\"297\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2016\/11\/JavaScript-Comparison-Operators.png\" alt=\"Javascript Comparison Operators\" class=\"wp-image-956\" title=\"Javascript Comparison Operators\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2016\/11\/JavaScript-Comparison-Operators.png 579w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2016\/11\/JavaScript-Comparison-Operators-300x154.png 300w\" sizes=\"(max-width: 579px) 100vw, 579px\" \/><\/figure><\/div>\n\n\n\n<p>A comparison operator takes two values. If the types of the values are not comparable, the comparison operator converts them into values of comparable types according to specific rules.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Compare numbers<\/h3>\n\n\n\n<p>If values are numbers, the comparison operators perform a numeric comparison. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> a = <span class=\"hljs-number\">10<\/span>, \n    b = <span class=\"hljs-number\">20<\/span>; \n\n<span class=\"hljs-built_in\">console<\/span>.log(a &gt;= b);  <span class=\"hljs-comment\">\/\/ false<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(a == <span class=\"hljs-number\">10<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This example is straightforward. The variable <code>a<\/code> is <code>10<\/code>, <code>b<\/code> is <code>20<\/code>. The expression <code>a &gt;= b<\/code>&nbsp;expression returns <code>false<\/code> and the expression <code>a == 10<\/code>&nbsp;expression returns&nbsp;<code>true<\/code>.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Compare strings<\/h3>\n\n\n\n<p>If the operands are strings, JavaScript compares the character codes numerically one by one in the string.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> name1 = <span class=\"hljs-string\">'alice'<\/span>,\n    name2 = <span class=\"hljs-string\">'bob'<\/span>;    \n\n<span class=\"hljs-keyword\">let<\/span> result = name1 &lt; name2;\n<span class=\"hljs-built_in\">console<\/span>.log(result); <span class=\"hljs-comment\">\/\/ true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(name1 == <span class=\"hljs-string\">'alice'<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Because JavaScript compares the character codes in the strings numerically, you may receive an unexpected result, for example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> f1 = <span class=\"hljs-string\">'apple'<\/span>,\n    f2 = <span class=\"hljs-string\">'Banana'<\/span>;\n<span class=\"hljs-keyword\">let<\/span> result = f2 &lt; f1;\n<span class=\"hljs-built_in\">console<\/span>.log(result); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, <code>f2<\/code> is less than <code>f1<\/code> because the letter <code>B<\/code> has the character code <code>66<\/code> while the letter <code>a<\/code> has the character code <code>97<\/code>.<\/p>\n\n\n\n<p>To fix this, you need to:<\/p>\n\n\n\n<ul><li>First, convert the strings into a common format, either lowercase or uppercase<\/li><li>Second, compare the converted values<\/li><\/ul>\n\n\n\n<p>For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> f1 = <span class=\"hljs-string\">'apple'<\/span>,\n    f2 = <span class=\"hljs-string\">'Banana'<\/span>;\n\n<span class=\"hljs-keyword\">let<\/span> result = f2.toLowerCase() &lt; f1.toLowerCase();\n<span class=\"hljs-built_in\">console<\/span>.log(result); <span class=\"hljs-comment\">\/\/ false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that the <code>toLowerCase()<\/code> is a method of the String object that converts the string to lowercase.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Compare a number with a value of another type<\/h3>\n\n\n\n<p>If a value is a number and the other is not, the comparison operator will convert the non-numeric value into a number and compare them numerically. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-number\">10<\/span> &lt; <span class=\"hljs-string\">'20'<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the comparison operator converts the string <code>'20'<\/code> into the number <code>20<\/code> and compares with the number 10. Here is an example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-number\">10<\/span> == <span class=\"hljs-string\">'10'<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the comparison operator converts the string <code>'10'<\/code>&nbsp;into the number <code>10<\/code> and compares&nbsp;them numerically.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Compare an object with a non-object<\/h3>\n\n\n\n<p>If a value is an object, the&nbsp;<code>valueOf()<\/code> method of that object is called to return the value for comparison. If the object doesn&#8217;t have the <code>valueOf()<\/code> method, the <code>toString()<\/code> method is called instead. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> apple = {\n  <span class=\"hljs-attr\">valueOf<\/span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-number\">10<\/span>;\n  },\n};\n\n<span class=\"hljs-keyword\">let<\/span> orange = {\n  <span class=\"hljs-attr\">toString<\/span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">'20'<\/span>;\n  },\n};\n<span class=\"hljs-built_in\">console<\/span>.log(apple &gt; <span class=\"hljs-number\">10<\/span>); <span class=\"hljs-comment\">\/\/ false<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(orange == <span class=\"hljs-number\">20<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span>\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this first comparison, the <code>apple<\/code> object has the <code>valueOf()<\/code> method that returns <code>10<\/code>. Therefore, the comparison operator uses the number 10 for comparison. <\/p>\n\n\n\n<p>In the second comparison, JavaScript first calls the <code>valueOf()<\/code> method. However, the <code>orange<\/code> object doesn&#8217;t have the <code>valueOf()<\/code> method. So JavaScript calls the <code>toString()<\/code> method to get the returned value of <code>20<\/code> for comparison.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Compare a Boolean with another value<\/h3>\n\n\n\n<p>If a value is a Boolean value, JavaScript converts it to a number and compares the converted value with the other value; <code>true<\/code> is converted to <code>1<\/code> and <code>false<\/code> is converted to <code>0<\/code>. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-literal\">true<\/span> &gt; <span class=\"hljs-number\">0<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-literal\">false<\/span> &lt; <span class=\"hljs-number\">1<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-literal\">true<\/span> &gt; <span class=\"hljs-literal\">false<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-literal\">false<\/span> &gt; <span class=\"hljs-literal\">true<\/span>); <span class=\"hljs-comment\">\/\/ false<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-literal\">true<\/span> &gt;= <span class=\"hljs-literal\">true<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-literal\">true<\/span> &lt;= <span class=\"hljs-literal\">true<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-literal\">false<\/span> &lt;= <span class=\"hljs-literal\">false<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-literal\">false<\/span> &gt;= <span class=\"hljs-literal\">false<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In addition to the above rules, the equal (<code>==<\/code>) and not-equal(<code>!=<\/code>) operators also have the following rules.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Compare <code>null<\/code> and <code>undefined<\/code><\/h3>\n\n\n\n<p>In JavaScript, <code>null<\/code> equals <code>undefined<\/code>. It means that the following expression returns <code>true<\/code>.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-literal\">null<\/span> == <span class=\"hljs-literal\">undefined<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Compare <code>NaN<\/code> with other values<\/h3>\n\n\n\n<p>If either value is <code>NaN<\/code>, then the equal operator(<code>==<\/code>) returns <code>false<\/code>.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-literal\">NaN<\/span> == <span class=\"hljs-number\">1<\/span>); <span class=\"hljs-comment\">\/\/ false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Even<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-literal\">NaN<\/span> == <span class=\"hljs-literal\">NaN<\/span>); <span class=\"hljs-comment\">\/\/ false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The not-equal (<code>!=<\/code>) operator returns <code>true<\/code> when comparing the <code>NaN<\/code> with another value:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-literal\">NaN<\/span> != <span class=\"hljs-number\">1<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And also<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-literal\">NaN<\/span> != <span class=\"hljs-literal\">NaN<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Strict equal (<code>===<\/code>) and not strict equal (<code>!==<\/code>)<\/h2>\n\n\n\n<p>Besides the comparison operators above, JavaScript provides the strict equal ( <code>===<\/code>) and not strict equal&nbsp; ( <code>!==<\/code>) operators.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Operator<\/th><th>Meaning<\/th><\/tr><\/thead><tbody><tr><td>===<\/td><td>strict equal<\/td><\/tr><tr><td>!==<\/td><td>not strict equal<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>The strict equal and not strict equal operators behave like the equal and not equal operators except that they don&#8217;t convert the operand before comparison. See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">\"10\"<\/span> == <span class=\"hljs-number\">10<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">\"10\"<\/span> === <span class=\"hljs-number\">10<\/span>); <span class=\"hljs-comment\">\/\/ false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In the first comparison, since we use the equality operator, JavaScript converts the string into the number and performs the comparison.<\/p>\n\n\n\n<p>However, in the second comparison, we use the strict equal operator ( <code>===<\/code>), JavaScript doesn&#8217;t convert the string before comparison, therefore the result is <code>false<\/code>.<\/p>\n\n\n\n<p>In this tutorial, you have learned how to use the JavaScript comparison operators to compare values.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"947\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-comparison-operators\/\"\n\t\t\t\tdata-post-title=\"JavaScript Comparison Operators\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"947\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-comparison-operators\/\"\n\t\t\t\tdata-post-title=\"JavaScript Comparison Operators\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how to use JavaScript comparison operators to compare two values.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":19,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Comparison Operators<\/title>\n<meta name=\"description\" content=\"This tutorial shows how to use JavaScript comparison operators that compare two values and return a Boolean value indicating whether the comparison is true\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-comparison-operators\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Comparison Operators\" \/>\n<meta property=\"og:description\" content=\"This tutorial shows how to use JavaScript comparison operators that compare two values and return a Boolean value indicating whether the comparison is true\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-comparison-operators\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-19T01:04:21+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2016\/11\/JavaScript-Comparison-Operators.png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-comparison-operators\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-comparison-operators\/\",\"name\":\"JavaScript Comparison Operators\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2016-11-25T09:08:08+00:00\",\"dateModified\":\"2022-01-19T01:04:21+00:00\",\"description\":\"This tutorial shows how to use JavaScript comparison operators that compare two values and return a Boolean value indicating whether the comparison is true\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-comparison-operators\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-comparison-operators\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-comparison-operators\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Comparison Operators\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Comparison Operators","description":"This tutorial shows how to use JavaScript comparison operators that compare two values and return a Boolean value indicating whether the comparison is true","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-comparison-operators\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Comparison Operators","og_description":"This tutorial shows how to use JavaScript comparison operators that compare two values and return a Boolean value indicating whether the comparison is true","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-comparison-operators\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-19T01:04:21+00:00","og_image":[{"url":"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2016\/11\/JavaScript-Comparison-Operators.png"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-comparison-operators\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-comparison-operators\/","name":"JavaScript Comparison Operators","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2016-11-25T09:08:08+00:00","dateModified":"2022-01-19T01:04:21+00:00","description":"This tutorial shows how to use JavaScript comparison operators that compare two values and return a Boolean value indicating whether the comparison is true","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-comparison-operators\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-comparison-operators\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-comparison-operators\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript Comparison Operators"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/947"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=947"}],"version-history":[{"count":3,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/947\/revisions"}],"predecessor-version":[{"id":89090,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/947\/revisions\/89090"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=947"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}