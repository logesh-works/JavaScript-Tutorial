{"id":88394,"date":"2021-05-27T20:21:47","date_gmt":"2021-05-28T03:21:47","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=88394"},"modified":"2022-03-05T01:18:44","modified_gmt":"2022-03-05T09:18:44","slug":"javascript-getters-and-setters","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-getters-and-setters\/","title":{"rendered":"JavaScript Getters and Setters"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about JavaScript getters and setters and how to use them effectively.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the JavaScript getters and setters<\/h2>\n\n\n\n<p>The following example <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-class\/\">defines a class<\/a> called <code>Person<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Person<\/span> <\/span>{\n    <span class=\"hljs-keyword\">constructor<\/span>(name) {\n        <span class=\"hljs-keyword\">this<\/span>.name = name;\n    }\n}\n\n<span class=\"hljs-keyword\">let<\/span> person = <span class=\"hljs-keyword\">new<\/span> Person(<span class=\"hljs-string\">\"John\"<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(person.name); <span class=\"hljs-comment\">\/\/ John<\/span>\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>Person<\/code> class has a property <code>name<\/code> and a constructor. The constructor initializes the <code>name<\/code> property to a string.<\/p>\n\n\n\n<p>Sometimes, you don&#8217;t want the <code>name<\/code> property to be accessed directly like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">person<\/span><span class=\"hljs-selector-class\">.name<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To do that, you may come up with a pair of methods that manipulate the <code>name<\/code> property. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Person<\/span> <\/span>{\n    <span class=\"hljs-keyword\">constructor<\/span>(name) {\n        <span class=\"hljs-keyword\">this<\/span>.setName(name);\n    }\n    getName() {\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.name;\n    }\n    setName(newName) {\n        newName = newName.trim();\n        <span class=\"hljs-keyword\">if<\/span> (newName === <span class=\"hljs-string\">''<\/span>) {\n            <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-string\">'The name cannot be empty'<\/span>;\n        }\n        <span class=\"hljs-keyword\">this<\/span>.name = newName;\n    }\n}\n\n<span class=\"hljs-keyword\">let<\/span> person = <span class=\"hljs-keyword\">new<\/span> Person(<span class=\"hljs-string\">'Jane Doe'<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(person); <span class=\"hljs-comment\">\/\/ Jane Doe<\/span>\n\nperson.setName(<span class=\"hljs-string\">'Jane Smith'<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(person.getName()); <span class=\"hljs-comment\">\/\/ Jane Smith<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>Person<\/code> class has the <code>name<\/code> property. Also, it has two additional methods <code>getName()<\/code> and <code>setName()<\/code>.<\/p>\n\n\n\n<p>The <code>getName()<\/code> method returns the value of the <code>name<\/code> property.<\/p>\n\n\n\n<p>The <code>setName()<\/code> method assigns an argument to the <code>name<\/code> property. The <code>setName()<\/code> removes the whitespaces from both ends of the <code>newName<\/code> argument and throws an exception if the <code>newName<\/code> is empty.<\/p>\n\n\n\n<p>The <code>constructor()<\/code> calls the <code>setName()<\/code> method to initialize the <code>name<\/code> property:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">constructor<\/span>(name) {\n    <span class=\"hljs-keyword\">this<\/span>.setName(name);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>getName()<\/code> and <code>setName()<\/code> methods are known as getter and setter in other programming languages such as Java and C++.<\/p>\n\n\n\n<p>ES6 provides specific syntax for defining the getter and setter using the get and set keywords. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Person<\/span> <\/span>{\n    <span class=\"hljs-keyword\">constructor<\/span>(name) {\n        <span class=\"hljs-keyword\">this<\/span>.name = name;\n    }\n    <span class=\"hljs-keyword\">get<\/span> name() {\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>._name;\n    }\n    <span class=\"hljs-keyword\">set<\/span> name(newName) {\n        newName = newName.trim();\n        <span class=\"hljs-keyword\">if<\/span> (newName === <span class=\"hljs-string\">''<\/span>) {\n            <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-string\">'The name cannot be empty'<\/span>;\n        }\n        <span class=\"hljs-keyword\">this<\/span>._name = newName;\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, the <code>name<\/code> property is changed to <code>_name<\/code> to avoid the name collision with the getter and setter.<\/p>\n\n\n\n<p>Second, the getter uses the <code>get<\/code> keyword followed by the method name:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">get<\/span> name() {\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>._name;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To call the getter, you use the following syntax:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> name = person.name;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When JavaScript sees the access to <code>name<\/code> property of the <code>Person<\/code> class, it checks if the <code>Person<\/code> class has any <code>name<\/code> property.<\/p>\n\n\n\n<p>If not, JavaScript checks if the Person class has any method that binds to the <code>name<\/code> property. In this example, the <code>name()<\/code> method binds to the <code>name<\/code> property via the <code>get<\/code> keyword. Once JavaScript finds the getter method, it executes the getter method and returns a value.<\/p>\n\n\n\n<p>Third, the setter uses the <code>set<\/code> keyword followed by the method name:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">set<\/span> name(newName) {\n    newName = newName.trim();\n    <span class=\"hljs-keyword\">if<\/span> (newName === <span class=\"hljs-string\">''<\/span>) {\n        <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-string\">'The name cannot be empty'<\/span>;\n    }\n    <span class=\"hljs-keyword\">this<\/span>._name = newName;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>JavaScript will call the <code>name()<\/code> setter when you assign a value to the <code>name<\/code> property like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">person.name = <span class=\"hljs-string\">'Jane Smith'<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If a class has only a getter but not a setter and you attempt to use the setter, the change won&#8217;t take any effect. See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Person<\/span> <\/span>{\n    <span class=\"hljs-keyword\">constructor<\/span>(name) {\n        <span class=\"hljs-keyword\">this<\/span>._name = name;\n    }\n    <span class=\"hljs-keyword\">get<\/span> name() {\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>._name;\n    }\n}\n\n<span class=\"hljs-keyword\">let<\/span> person = <span class=\"hljs-keyword\">new<\/span> Person(<span class=\"hljs-string\">\"Jane Doe\"<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(person.name);\n\n<span class=\"hljs-comment\">\/\/ attempt to change the name, but cannot<\/span>\nperson.name = <span class=\"hljs-string\">'Jane Smith'<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(person.name); <span class=\"hljs-comment\">\/\/ Jane Doe<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>Person<\/code> class has the <code>name<\/code> getter but not the <code>name<\/code> setter. It attempts to call the setter. However, the change doesn&#8217;t take effect since the Person class doesn&#8217;t have the name setter.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Using getter in an object literal<\/h2>\n\n\n\n<p>The following example defines a getter called <code>latest<\/code> to return the latest attendee of the <code>meeting<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> meeting = {\n    <span class=\"hljs-attr\">attendees<\/span>: &#91;],\n    add(attendee) {\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${attendee}<\/span> joined the meeting.`<\/span>);\n        <span class=\"hljs-keyword\">this<\/span>.attendees.push(attendee);\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>;\n    },\n    <span class=\"hljs-keyword\">get<\/span> latest() {\n        <span class=\"hljs-keyword\">let<\/span> count = <span class=\"hljs-keyword\">this<\/span>.attendees.length;\n        <span class=\"hljs-keyword\">return<\/span> count == <span class=\"hljs-number\">0<\/span> ? <span class=\"hljs-literal\">undefined<\/span> : <span class=\"hljs-keyword\">this<\/span>.attendees&#91;count - <span class=\"hljs-number\">1<\/span>];\n    }\n};\n\nmeeting.add(<span class=\"hljs-string\">'John'<\/span>).add(<span class=\"hljs-string\">'Jane'<\/span>).add(<span class=\"hljs-string\">'Peter'<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`The latest attendee is <span class=\"hljs-subst\">${meeting.latest}<\/span>.`<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">John joined a meeting.\nJane joined a meeting.\nPeter joined a meeting.\nThe latest attendee is Peter.<\/code><\/span><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>Use the <code>get<\/code> and <code>set<\/code> keywords to define the JavaScript getters and setters for a class or an object.<\/li><li>The <code>get<\/code> keyword binds an object property to a method that will be invoked when that property is looked up.<\/li><li>The <code>set<\/code> keyword binds an object property to a method that will be invoked when that property is assigned.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"88394\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-getters-and-setters\/\"\n\t\t\t\tdata-post-title=\"JavaScript Getters and Setters\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"88394\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-getters-and-setters\/\"\n\t\t\t\tdata-post-title=\"JavaScript Getters and Setters\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you will learn about JavaScript getters and setters and how to use them effectively. Introduction to the JavaScript getters and setters The following example defines a class called Person: The Person class has a property name and a constructor. The constructor initializes the name property to a string. Sometimes, you don&#8217;t [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":63,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Introduction to JavaScript getters and setters in ES6<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about JavaScript getters and setters in ES6 and how to use them effectively.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-getters-and-setters\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Introduction to JavaScript getters and setters in ES6\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you will learn about JavaScript getters and setters in ES6 and how to use them effectively.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-getters-and-setters\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-03-05T09:18:44+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-getters-and-setters\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-getters-and-setters\/\",\"name\":\"Introduction to JavaScript getters and setters in ES6\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2021-05-28T03:21:47+00:00\",\"dateModified\":\"2022-03-05T09:18:44+00:00\",\"description\":\"In this tutorial, you will learn about JavaScript getters and setters in ES6 and how to use them effectively.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-getters-and-setters\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-getters-and-setters\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-getters-and-setters\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Getters and Setters\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Introduction to JavaScript getters and setters in ES6","description":"In this tutorial, you will learn about JavaScript getters and setters in ES6 and how to use them effectively.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-getters-and-setters\/","og_locale":"en_US","og_type":"article","og_title":"Introduction to JavaScript getters and setters in ES6","og_description":"In this tutorial, you will learn about JavaScript getters and setters in ES6 and how to use them effectively.","og_url":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-getters-and-setters\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-03-05T09:18:44+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-getters-and-setters\/","url":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-getters-and-setters\/","name":"Introduction to JavaScript getters and setters in ES6","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2021-05-28T03:21:47+00:00","dateModified":"2022-03-05T09:18:44+00:00","description":"In this tutorial, you will learn about JavaScript getters and setters in ES6 and how to use them effectively.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-getters-and-setters\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-getters-and-setters\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-getters-and-setters\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript Getters and Setters"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/88394"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=88394"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/88394\/revisions"}],"predecessor-version":[{"id":90186,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/88394\/revisions\/90186"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=88394"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}