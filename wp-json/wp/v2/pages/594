{"id":594,"date":"2016-09-06T02:56:34","date_gmt":"2016-09-06T09:56:34","guid":{"rendered":"http:\/\/https://jsprifix.netlify.app/\/?page_id=594"},"modified":"2022-08-16T23:54:23","modified_gmt":"2022-08-17T06:54:23","slug":"symbol","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/","title":{"rendered":"The Ultimate Guide to JavaScript Symbol"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the JavaScript symbol primitive type and&nbsp;how to use the symbol effectively.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Creating symbols<\/h2>\n\n\n\n<p>ES6 added <code>Symbol<\/code> as a new primitive type. Unlike other primitive types such as <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-data-types\/#number\">number<\/a>, <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-data-types\/#boolean\">boolean<\/a>, <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-data-types\/#null\">null<\/a>, <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-data-types\/#undefined\">undefined<\/a>, and <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-data-types\/#string\">string<\/a>, the symbol type doesn&#8217;t have a literal form.<\/p>\n\n\n\n<p>To create a new symbol, you use the global <code>Symbol()<\/code> function as shown in this example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> s = <span class=\"hljs-built_in\">Symbol<\/span>(<span class=\"hljs-string\">'foo'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>Symbol()<\/code> function creates a new <em>unique<\/em> value each time you call it:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">Symbol<\/span>() === <span class=\"hljs-built_in\">Symbol<\/span>()); <span class=\"hljs-comment\">\/\/ false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>Symbol()<\/code> function accepts a <code>description<\/code> as an optional argument. The <code>description<\/code> argument will make your symbol more descriptive.<\/p>\n\n\n\n<p>The following example creates two symbols: <code>firstName<\/code> and <code>lastName<\/code>.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> firstName = <span class=\"hljs-built_in\">Symbol<\/span>(<span class=\"hljs-string\">'first name'<\/span>),\n    lastName = <span class=\"hljs-built_in\">Symbol<\/span>(<span class=\"hljs-string\">'last name'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>You can access the symbol&#8217;s description property using the <code>toString()<\/code> method. The <code>console.log()<\/code> method calls the <code>toString()<\/code> method of the symbol implicitly as shown in the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(firstName); <span class=\"hljs-comment\">\/\/ Symbol(first name)<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(lastName); <span class=\"hljs-comment\">\/\/ Symbol(last name)<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Since symbols are primitive values, you can use the &nbsp;<code>typeof<\/code> operator to check whether a variable is a symbol. ES6 extended&nbsp; <code>typeof<\/code> to return the <code>symbol<\/code> string when you pass in a symbol variable:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span> firstName); <span class=\"hljs-comment\">\/\/ symbol<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Since a symbol is a primitive value, if you attempt to create a symbol using the <code>new<\/code> operator, you will get an error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> s = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Symbol<\/span>(); <span class=\"hljs-comment\">\/\/ error<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Sharing symbols<\/h2>\n\n\n\n<p>ES6 provides you with a global symbol registry that allows you to share symbols globally. If you want to create a symbol that will be shared, you use the <code>Symbol.for()<\/code> method instead of calling the <code>Symbol()<\/code> function.<\/p>\n\n\n\n<p>The <code>Symbol.for()<\/code> method accepts a single parameter that can be used for symbol&#8217;s description, as shown in the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> ssn = <span class=\"hljs-built_in\">Symbol<\/span>.for(<span class=\"hljs-string\">'ssn'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>Symbol.for()<\/code> method first searches for the symbol with the &nbsp;<code>ssn<\/code> key in the global symbol registry. It returns the existing symbol if there is one. Otherwise, the <code>Symbol.for()<\/code> method creates a new symbol, registers it to the global symbol registry with the specified&nbsp;key, and returns the symbol.<\/p>\n\n\n\n<p>Later, if you call the <code>Symbol.for()<\/code> method using the same key, the <code>Symbol.for()<\/code> method will return the existing symbol.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> citizenID = <span class=\"hljs-built_in\">Symbol<\/span>.for(<span class=\"hljs-string\">'ssn'<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(ssn === citizenID); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we used the <code>Symbol.for()<\/code> method to look up the symbol with the &nbsp;<code>ssn<\/code> key. Since the global symbol registry already contained it, the <code>Symbol.for()<\/code> method returned the existing symbol.<\/p>\n\n\n\n<p>To get the key associated with a symbol, you use the <code>Symbol.keyFor()<\/code> method as shown in the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">Symbol<\/span>.keyFor(citizenID)); <span class=\"hljs-comment\">\/\/ 'ssn'<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If a symbol that does not exist in the global symbol registry, the <code>System.keyFor()<\/code> method returns <code>undefined<\/code>.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> systemID = <span class=\"hljs-built_in\">Symbol<\/span>(<span class=\"hljs-string\">'sys'<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">Symbol<\/span>.keyFor(systemID)); <span class=\"hljs-comment\">\/\/ undefined<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Symbol usages<\/h2>\n\n\n\n<h3 class=\"wp-block-heading\">A) Using symbols as unique values<\/h3>\n\n\n\n<p>Whenever you use a string or a number in your code, you should use symbols instead. For example, you have to manage the status in the task management application. <\/p>\n\n\n\n<p>Before ES6, you would use strings such as <code>open<\/code>, <code>in progress<\/code>, <code>completed<\/code>, <code>canceled<\/code>, and <code>on hold<\/code> to represent different statuses of a task.\u00a0In ES6, you can use symbols as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> statuses = {\n    <span class=\"hljs-attr\">OPEN<\/span>: <span class=\"hljs-built_in\">Symbol<\/span>(<span class=\"hljs-string\">'Open'<\/span>),\n    <span class=\"hljs-attr\">IN_PROGRESS<\/span>: <span class=\"hljs-built_in\">Symbol<\/span>(<span class=\"hljs-string\">'In progress'<\/span>),\n    <span class=\"hljs-attr\">COMPLETED<\/span>: <span class=\"hljs-built_in\">Symbol<\/span>(<span class=\"hljs-string\">'Completed'<\/span>),\n    <span class=\"hljs-attr\">HOLD<\/span>: <span class=\"hljs-built_in\">Symbol<\/span>(<span class=\"hljs-string\">'On hold'<\/span>),\n    <span class=\"hljs-attr\">CANCELED<\/span>: <span class=\"hljs-built_in\">Symbol<\/span>(<span class=\"hljs-string\">'Canceled'<\/span>)\n};\n<span class=\"hljs-comment\">\/\/ complete a task<\/span>\ntask.setStatus(statuses.COMPLETED);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">B) Using symbol as the computed property name of an object<\/h3>\n\n\n\n<p>You can use symbols as <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-computed-property\/\">computed property<\/a> names. See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> status = <span class=\"hljs-built_in\">Symbol<\/span>(<span class=\"hljs-string\">'status'<\/span>);\n<span class=\"hljs-keyword\">let<\/span> task = {\n    &#91;status]: statuses.OPEN,\n    <span class=\"hljs-attr\">description<\/span>: <span class=\"hljs-string\">'Learn ES6 Symbol'<\/span>\n};\n<span class=\"hljs-built_in\">console<\/span>.log(task);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To get all the enumerable properties of an object, you use the <code>Object.keys()<\/code> method.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">Object<\/span>.keys(task)); <span class=\"hljs-comment\">\/\/ &#91;\"description\"]<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To get all properties of an object whether the properties are enumerable or not, you use the <code>Object.getOwnPropertyNames()<\/code> method.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">Object<\/span>.getOwnPropertyNames(task)); <span class=\"hljs-comment\">\/\/ &#91;\"description\"]<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To get all property symbols of an object, you use the <code>Object.getOwnPropertySymbols()<\/code> method, which has been added in ES6.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">Object<\/span>.getOwnPropertySymbols(task)); <span class=\"hljs-comment\">\/\/&#91;Symbol(status)]<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>Object.getOwnPropertySymbols()<\/code> method returns an array of own property symbols from an object.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Well-known symbols<\/h2>\n\n\n\n<p>ES6 provides predefined symbols which are called well-known symbols. The well-known symbols represent the common behaviors in JavaScript. Each well-known symbol is a static property of the <code>Symbol<\/code> object.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Symbol.hasInstance<\/h3>\n\n\n\n<p>The <code>Symbol.hasInstance<\/code> is a symbol that changes the behavior of the <code>instanceof<\/code> operator. Typically, when you use the <code>instanceof<\/code> operator:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">obj <span class=\"hljs-keyword\">instanceof<\/span> type;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>JavaScript will call the <code>Symbol.hasIntance<\/code> method as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">type&#91;<span class=\"hljs-built_in\">Symbol<\/span>.hasInstance](obj);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It then depends on the method to determine if&nbsp; <code>obj<\/code> is an instance of the <code>type<\/code> object. See the following example.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Stack<\/span> <\/span>{\n}\n<span class=\"hljs-built_in\">console<\/span>.log(&#91;] <span class=\"hljs-keyword\">instanceof<\/span> Stack); <span class=\"hljs-comment\">\/\/ false<\/span>\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>[]<\/code> array is not an instance of the <code>Stack<\/code> class, therefore, the <code>instanceof<\/code> operator returns <code>false<\/code> in this example.<\/p>\n\n\n\n<p>Assuming that you want the <code>[]<\/code> array is an instance of the <code>Stack<\/code> class, you can add the <code>Symbol.hasInstance<\/code> method as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-19\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Stack<\/span> <\/span>{\n    <span class=\"hljs-keyword\">static<\/span> &#91;<span class=\"hljs-built_in\">Symbol<\/span>.hasInstance](obj) {\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-built_in\">Array<\/span>.isArray(obj);\n    }\n}\n<span class=\"hljs-built_in\">console<\/span>.log(&#91;] <span class=\"hljs-keyword\">instanceof<\/span> Stack); <span class=\"hljs-comment\">\/\/ true<\/span>\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-19\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\" id=\"symbol.iterator\">Symbol.iterator<\/h3>\n\n\n\n<p>The <code>Symbol.iterator<\/code> specifies whether a function will return an iterator for an object.<\/p>\n\n\n\n<p>The objects that have <code>Symbol.iterator<\/code> property are called iterable objects.<\/p>\n\n\n\n<p>In ES6, all collection objects (A<a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-array\/\">rray<\/a>, <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-set\/\">Set<\/a> and <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-map\/\">Map<\/a>) and strings are iterable objects.<\/p>\n\n\n\n<p>ES6 provides the <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-for-of\/\">for&#8230;of<\/a> loop that works with the iterable object as in the following example.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-20\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> numbers = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>];\n<span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">let<\/span> num <span class=\"hljs-keyword\">of<\/span> numbers) {\n    <span class=\"hljs-built_in\">console<\/span>.log(num);\n}\n\n<span class=\"hljs-comment\">\/\/ 1<\/span>\n<span class=\"hljs-comment\">\/\/ 2<\/span>\n<span class=\"hljs-comment\">\/\/ 3<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-20\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Internally, JavaScript engine first calls the <code>Symbol.iterator<\/code> method of the <code>numbers<\/code> array to get the iterator object. Then, it calls the <code>iterator.next()<\/code> method and copies the value property fo the iterator object into the <code>num <\/code>variable. After three iterations, the <code>done<\/code> property of the result object is <code>true<\/code>, the loop exits.<\/p>\n\n\n\n<p>You can access the default iterator object via <code>System.iterator<\/code> symbol as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-21\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> iterator = numbers&#91;<span class=\"hljs-built_in\">Symbol<\/span>.iterator]();\n\n<span class=\"hljs-built_in\">console<\/span>.log(iterator.next()); <span class=\"hljs-comment\">\/\/ Object {value: 1, done: false}<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(iterator.next()); <span class=\"hljs-comment\">\/\/ Object {value: 2, done: false}<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(iterator.next()); <span class=\"hljs-comment\">\/\/ Object {value: 3, done: false}<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(iterator.next()); <span class=\"hljs-comment\">\/\/ Object {value: undefined, done: true}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-21\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>By default, a collection is not iterable. However, you can make it iterable by using the <code>Symbol.iterator<\/code> as shown in the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-22\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">List<\/span> <\/span>{\n    <span class=\"hljs-keyword\">constructor<\/span>() {\n        <span class=\"hljs-keyword\">this<\/span>.elements = &#91;];\n    }\n\n    add(element) {\n        <span class=\"hljs-keyword\">this<\/span>.elements.push(element);\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>;\n    }\n\n    *&#91;<span class=\"hljs-built_in\">Symbol<\/span>.iterator]() {\n        <span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">let<\/span> element <span class=\"hljs-keyword\">of<\/span> <span class=\"hljs-keyword\">this<\/span>.elements) {\n            <span class=\"hljs-keyword\">yield<\/span>  element;\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">let<\/span> chars = <span class=\"hljs-keyword\">new<\/span> List();\nchars.add(<span class=\"hljs-string\">'A'<\/span>)\n     .add(<span class=\"hljs-string\">'B'<\/span>)\n     .add(<span class=\"hljs-string\">'C'<\/span>);\n\n<span class=\"hljs-comment\">\/\/ because of the Symbol.iterator<\/span>\n<span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">let<\/span> c <span class=\"hljs-keyword\">of<\/span> chars) {\n    <span class=\"hljs-built_in\">console<\/span>.log(c);\n}\n\n<span class=\"hljs-comment\">\/\/ A<\/span>\n<span class=\"hljs-comment\">\/\/ B<\/span>\n<span class=\"hljs-comment\">\/\/ C<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-22\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Symbol.isConcatSpreadable<\/h3>\n\n\n\n<p>To concatenate two arrays, you use the <code>concat()<\/code> method as shown in the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-23\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> odd  = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">3<\/span>],\n    even = &#91;<span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">4<\/span>];\n<span class=\"hljs-keyword\">let<\/span> all = odd.concat(even);\n<span class=\"hljs-built_in\">console<\/span>.log(all); <span class=\"hljs-comment\">\/\/ &#91;1, 3, 2, 4]<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-23\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the resulting array contains the single elements of both arrays. In addition, the <code>concat()<\/code> method also accepts a non-array argument as illustrated below.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-24\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> extras = all.concat(<span class=\"hljs-number\">5<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(extras); <span class=\"hljs-comment\">\/\/ &#91;1, 3, 2, 4, 5]<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-24\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The number 5 becomes the fifth element of the array.<\/p>\n\n\n\n<p>As you see in the above example, when we pass an array to the <code>concat()<\/code> method, the <code>concat()<\/code> method spreads the array into individual elements. However, it treats a single primitive argument differently. Prior to ES6, you could not change this behavior.<\/p>\n\n\n\n<p>This is why the <code>Symbol.isConcatSpreadable<\/code> symbol comes into play.<\/p>\n\n\n\n<p>The <code>Symbol.isConcatSpreadable<\/code> property is a Boolean value that determines whether an object is added individually to the result of the <code>concat()<\/code> function.<\/p>\n\n\n\n<p>Consider the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-25\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> list = {\n    <span class=\"hljs-number\">0<\/span>: <span class=\"hljs-string\">'JavaScript'<\/span>,\n    <span class=\"hljs-number\">1<\/span>: <span class=\"hljs-string\">'Symbol'<\/span>,\n    <span class=\"hljs-attr\">length<\/span>: <span class=\"hljs-number\">2<\/span>\n};\n<span class=\"hljs-keyword\">let<\/span> message = &#91;<span class=\"hljs-string\">'Learning'<\/span>].concat(list);\n<span class=\"hljs-built_in\">console<\/span>.log(message); <span class=\"hljs-comment\">\/\/ &#91;\"Learning\", Object]<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-25\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The list object is concatenated to the <code>['Learning']<\/code> array. However, its individual elements are not spreaded.<\/p>\n\n\n\n<p>To enable&nbsp;the elements of the <code>list<\/code> object added to the array individually when passing to the <code>concat()<\/code> method, you need to add the <code>Symbol.isConcatSpreadable<\/code> property to the <code>list<\/code> object as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-26\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> list = {\n    <span class=\"hljs-number\">0<\/span>: <span class=\"hljs-string\">'JavaScript'<\/span>,\n    <span class=\"hljs-number\">1<\/span>: <span class=\"hljs-string\">'Symbol'<\/span>,\n    <span class=\"hljs-attr\">length<\/span>: <span class=\"hljs-number\">2<\/span>,\n    &#91;<span class=\"hljs-built_in\">Symbol<\/span>.isConcatSpreadable]: <span class=\"hljs-literal\">true<\/span>\n};\n<span class=\"hljs-keyword\">let<\/span> message = &#91;<span class=\"hljs-string\">'Learning'<\/span>].concat(list);\n<span class=\"hljs-built_in\">console<\/span>.log(message); <span class=\"hljs-comment\">\/\/ &#91;\"Learning\", \"JavaScript\", \"Symbol\"]<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-26\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that if you set the value of the <code>Symbol.isConcatSpreadable<\/code> to <code>false<\/code> and pass the <code>list<\/code> object to the <code>concat()<\/code> method, it will be concatenated to the array as the whole object.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Symbol.toPrimitive<\/h3>\n\n\n\n<p>The <code>Symbol.toPrimitive<\/code> method determines what should happen when an object is converted into a primitive value.<\/p>\n\n\n\n<p>The JavaScript engine defines the <code>Symbol.toPrimitive<\/code> method&nbsp;on the prototype of each standard type.<\/p>\n\n\n\n<p>The <code>Symbol.toPrimitive<\/code> method takes a <code>hint<\/code> argument which has one of three values: &#8220;number&#8221;, &#8220;string&#8221;, and &#8220;default&#8221;. The <code>hint<\/code> argument specifies the type of the return value.&nbsp;The <code>hint<\/code> parameter is filled by the JavaScript engine based on the context in which the object is used.<\/p>\n\n\n\n<p>Here is an example of using the <code>Symbol.toPrimitive<\/code> method.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-27\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Money<\/span>(<span class=\"hljs-params\">amount, currency<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">this<\/span>.amount = amount;\n    <span class=\"hljs-keyword\">this<\/span>.currency = currency;\n}\nMoney.prototype&#91;<span class=\"hljs-built_in\">Symbol<\/span>.toPrimitive] = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>(<span class=\"hljs-params\">hint<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">var<\/span> result;\n    <span class=\"hljs-keyword\">switch<\/span> (hint) {\n        <span class=\"hljs-keyword\">case<\/span> <span class=\"hljs-string\">'string'<\/span>:\n            result = <span class=\"hljs-keyword\">this<\/span>.amount + <span class=\"hljs-keyword\">this<\/span>.currency;\n            <span class=\"hljs-keyword\">break<\/span>;\n        <span class=\"hljs-keyword\">case<\/span> <span class=\"hljs-string\">'number'<\/span>:\n            result = <span class=\"hljs-keyword\">this<\/span>.amount;\n            <span class=\"hljs-keyword\">break<\/span>;\n        <span class=\"hljs-keyword\">case<\/span> <span class=\"hljs-string\">'default'<\/span>:\n            result = <span class=\"hljs-keyword\">this<\/span>.amount + <span class=\"hljs-keyword\">this<\/span>.currency;\n            <span class=\"hljs-keyword\">break<\/span>;\n    }\n    <span class=\"hljs-keyword\">return<\/span> result;\n}\n\n<span class=\"hljs-keyword\">var<\/span> price = <span class=\"hljs-keyword\">new<\/span> Money(<span class=\"hljs-number\">799<\/span>, <span class=\"hljs-string\">'USD'<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Price is '<\/span> + price); <span class=\"hljs-comment\">\/\/ Price is 799USD<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(+price + <span class=\"hljs-number\">1<\/span>); <span class=\"hljs-comment\">\/\/ 800<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">String<\/span>(price)); <span class=\"hljs-comment\">\/\/ 799USD<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-27\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this tutorial, you have learned about JavaScript symbols and how to use symbols for unique values and object properties. Also, you learned how to use well-known symbols to modify object behaviors.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"594\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/\"\n\t\t\t\tdata-post-title=\"The Ultimate Guide to JavaScript Symbol\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"594\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/\"\n\t\t\t\tdata-post-title=\"The Ultimate Guide to JavaScript Symbol\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about the JavaScript symbol primitive type and\u00a0how to use the symbol effectively.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":106,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>The Ultimate Guide to JavaScript Symbol<\/title>\n<meta name=\"description\" content=\"This tutorial introduces you to the JavaScript Symbol and shows you some of its practical usages via examples\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"The Ultimate Guide to JavaScript Symbol\" \/>\n<meta property=\"og:description\" content=\"This tutorial introduces you to the JavaScript Symbol and shows you some of its practical usages via examples\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-08-17T06:54:23+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"7 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/\",\"name\":\"The Ultimate Guide to JavaScript Symbol\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2016-09-06T09:56:34+00:00\",\"dateModified\":\"2022-08-17T06:54:23+00:00\",\"description\":\"This tutorial introduces you to the JavaScript Symbol and shows you some of its practical usages via examples\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"The Ultimate Guide to JavaScript Symbol\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"The Ultimate Guide to JavaScript Symbol","description":"This tutorial introduces you to the JavaScript Symbol and shows you some of its practical usages via examples","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/","og_locale":"en_US","og_type":"article","og_title":"The Ultimate Guide to JavaScript Symbol","og_description":"This tutorial introduces you to the JavaScript Symbol and shows you some of its practical usages via examples","og_url":"https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-08-17T06:54:23+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"7 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/","url":"https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/","name":"The Ultimate Guide to JavaScript Symbol","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2016-09-06T09:56:34+00:00","dateModified":"2022-08-17T06:54:23+00:00","description":"This tutorial introduces you to the JavaScript Symbol and shows you some of its practical usages via examples","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"The Ultimate Guide to JavaScript Symbol"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/594"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=594"}],"version-history":[{"count":4,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/594\/revisions"}],"predecessor-version":[{"id":90253,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/594\/revisions\/90253"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=594"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}