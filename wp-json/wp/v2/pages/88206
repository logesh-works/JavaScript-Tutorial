{"id":88206,"date":"2021-01-21T01:49:45","date_gmt":"2021-01-21T09:49:45","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=88206"},"modified":"2022-01-22T20:42:04","modified_gmt":"2022-01-23T04:42:04","slug":"javascript-constructor-prototype","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-prototype\/","title":{"rendered":"JavaScript Constructor\/Prototype Pattern"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use the JavaScript constructor\/Prototype pattern to define a custom type in ES5.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the JavaScript Constructor \/ Prototype pattern<\/h2>\n\n\n\n<p>The combination of the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-function\/\">constructor <\/a>and <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-prototype\/\">prototype<\/a> patterns is the most common way to define custom types in ES5. In this pattern:<\/p>\n\n\n\n<ul><li>The constructor pattern defines the object properties.<\/li><li>The prototype pattern defines the object methods.<\/li><\/ul>\n\n\n\n<p>By using this pattern,\u00a0all objects of the custom type share the methods defined in the prototype. Also, each object has its own properties.<\/p>\n\n\n\n<p>This constructor\/prototype pattern takes the best parts of both constructor and prototype patterns.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">JavaScript Constructor \/ Prototype example<\/h2>\n\n\n\n<p>Suppose that you want to define a custom type called <code>Person<\/code> that has:<\/p>\n\n\n\n<ul><li>Two properties <code>firstName<\/code> and <code>lastName<\/code><\/li><li>One method <code>getFullName()<\/code><\/li><\/ul>\n\n\n\n<p>First, use the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-function\/\">constructor function<\/a> to initialize the properties:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Person<\/span>(<span class=\"hljs-params\">firstName, lastName<\/span>) <\/span>{\n\t<span class=\"hljs-keyword\">this<\/span>.firstName = firstName;\n\t<span class=\"hljs-keyword\">this<\/span>.lastName = lastName;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Behind the scene, the JavaScript engine defines a <code>Person<\/code> function denoted by the circle and an anonymous object denoted by the square.<\/p>\n\n\n\n<p>The <code>Person<\/code> function has the <code>prototype<\/code> property that references an anonymous object. The anonymous object has a <code>constructor<\/code> property that references the <code>Person<\/code> function:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><a href=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JS-prototype-Person-prototype.svg\"><img decoding=\"async\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JS-prototype-Person-prototype.svg\" alt=\"JS prototype- Person prototype\" class=\"wp-image-89280\"\/><\/a><\/figure><\/div>\n\n\n\n<p>Second, define the <code>getFullName()<\/code> method in the <code>prototype<\/code> object of the <code>Person<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">Person.prototype.getFullName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n  <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.firstName + <span class=\"hljs-string\">' '<\/span> + <span class=\"hljs-keyword\">this<\/span>.lastName;\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>JavaScript defines the <code>getFullName()<\/code> method on the <code>Person.prototype<\/code> object like this:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><a href=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JS-prototype-constructor-pattern.svg\"><img decoding=\"async\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JS-prototype-constructor-pattern.svg\" alt=\"\" class=\"wp-image-89296\"\/><\/a><\/figure><\/div>\n\n\n\n<p>Third, create multiple instances of the <code>Person<\/code> type:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> p1 = <span class=\"hljs-keyword\">new<\/span> Person(<span class=\"hljs-string\">\"John\"<\/span>, <span class=\"hljs-string\">\"Doe\"<\/span>);\n<span class=\"hljs-keyword\">let<\/span> p2 = <span class=\"hljs-keyword\">new<\/span> Person(<span class=\"hljs-string\">\"Jane\"<\/span>, <span class=\"hljs-string\">\"Doe\"<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(p1.getFullName());\n<span class=\"hljs-built_in\">console<\/span>.log(p2.getFullName());<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-string\">'John Doe'<\/span>\n<span class=\"hljs-string\">'Jane Doe'<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Javascript creates two objects <code>p1<\/code> and <code>p2<\/code>. These objects link to the <code>Person.prototype<\/code> object via the <code>[[Prototype]]<\/code> linkage:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><a href=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-constructor-prototype-pattern-example.svg\"><img decoding=\"async\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-constructor-prototype-pattern-example.svg\" alt=\"\" class=\"wp-image-89298\"\/><\/a><\/figure><\/div>\n\n\n\n<p>Each object has its own properties <code>firstName<\/code> and <code>lastName<\/code>. However, they share the same <code>getFullName()<\/code> method.<\/p>\n\n\n\n<p>When you call the <code>getFullName()<\/code> method on the <code>p1<\/code> or <code>p2<\/code> object, the JavaScript engine searches for the method on these objects. Because the JavaScript engine doesn&#8217;t find the method there, it follows the prototype linkage and searches for the method in the <code>Person.prototype<\/code> object.<\/p>\n\n\n\n<p>Because the <code>Person.prototype<\/code> object has the <code>getFullName()<\/code> method, JavaScript stops searching and executes the method.<\/p>\n\n\n\n<p>Put it all together:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Person<\/span>(<span class=\"hljs-params\">firstName, lastName<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">this<\/span>.firstName = firstName;\n  <span class=\"hljs-keyword\">this<\/span>.lastName = lastName;\n}\n\nPerson.prototype.getFullName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n  <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.firstName + <span class=\"hljs-string\">' '<\/span> + <span class=\"hljs-keyword\">this<\/span>.lastName;\n};\n\n<span class=\"hljs-keyword\">let<\/span> p1 = <span class=\"hljs-keyword\">new<\/span> Person(<span class=\"hljs-string\">'John'<\/span>, <span class=\"hljs-string\">'Doe'<\/span>);\n<span class=\"hljs-keyword\">let<\/span> p2 = <span class=\"hljs-keyword\">new<\/span> Person(<span class=\"hljs-string\">'Jane'<\/span>, <span class=\"hljs-string\">'Doe'<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(p1.getFullName());\n<span class=\"hljs-built_in\">console<\/span>.log(p2.getFullName());<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Classes in ES6<\/h2>\n\n\n\n<p>ES6 introduces the <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-class\/\">class<\/a> keyword that makes the constructor\/prototype pattern easier to use. For example, the following uses the <code>class<\/code> keyword to define exactly the same <code>Person<\/code> type:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Person<\/span> <\/span>{\n\t<span class=\"hljs-keyword\">constructor<\/span>(firstName, lastName) {\n\t\t<span class=\"hljs-keyword\">this<\/span>.firstName = firstName;\n\t\t<span class=\"hljs-keyword\">this<\/span>.lastName = lastName;\n\t}\n\tgetFullName() {\n\t\t<span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.firstName + <span class=\"hljs-string\">\" \"<\/span> + <span class=\"hljs-keyword\">this<\/span>.lastName;\n\t}\n}\n\n<span class=\"hljs-keyword\">let<\/span> p1 = <span class=\"hljs-keyword\">new<\/span> Person(<span class=\"hljs-string\">'John'<\/span>, <span class=\"hljs-string\">'Doe'<\/span>);\n<span class=\"hljs-keyword\">let<\/span> p2 = <span class=\"hljs-keyword\">new<\/span> Person(<span class=\"hljs-string\">'Jane'<\/span>, <span class=\"hljs-string\">'Doe'<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(p1.getFullName());\n<span class=\"hljs-built_in\">console<\/span>.log(p2.getFullName());<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this syntax, the <code>class<\/code> moves the property initialization to the <code>constructor<\/code> method. It also packs the <code>getFullName()<\/code> method in the same place as the <code>constructor<\/code> function.<\/p>\n\n\n\n<p>The class syntax looks cleaner and less verbose. However, it&#8217;s syntactic sugar over the constructor\/prototype pattern with some enhancements.<\/p>\n\n\n\n<p>For more information on the classes, check out the <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-class\/\">JavaScript class tutorial<\/a>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>Use JavaScript constructor\/prototype to define a custom type in ES5.<\/li><li>Initialize the object properties in the constructor function and define methods and properties that can be shared by all instances in the prototype object.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"88206\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-prototype\/\"\n\t\t\t\tdata-post-title=\"JavaScript Constructor\/Prototype Pattern\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"88206\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-prototype\/\"\n\t\t\t\tdata-post-title=\"JavaScript Constructor\/Prototype Pattern\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you&#8217;ll learn how to use the JavaScript constructor\/Prototype pattern to define a custom type in ES5. Introduction to the JavaScript Constructor \/ Prototype pattern The combination of the constructor and prototype patterns is the most common way to define custom types in ES5. In this pattern: The constructor pattern defines the [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":46,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>An Visual Guide to JavaScript Constructor \/ Prototype Pattern<\/title>\n<meta name=\"description\" content=\"In this tutorial, you&#039;ll learn how to use the JavaScript constructor\/Prototype pattern to define a custom type.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-prototype\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"An Visual Guide to JavaScript Constructor \/ Prototype Pattern\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you&#039;ll learn how to use the JavaScript constructor\/Prototype pattern to define a custom type.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-prototype\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-23T04:42:04+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JS-prototype-Person-prototype.svg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-prototype\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-prototype\/\",\"name\":\"An Visual Guide to JavaScript Constructor \/ Prototype Pattern\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2021-01-21T09:49:45+00:00\",\"dateModified\":\"2022-01-23T04:42:04+00:00\",\"description\":\"In this tutorial, you'll learn how to use the JavaScript constructor\/Prototype pattern to define a custom type.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-prototype\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-prototype\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-prototype\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Constructor\/Prototype Pattern\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"An Visual Guide to JavaScript Constructor \/ Prototype Pattern","description":"In this tutorial, you'll learn how to use the JavaScript constructor\/Prototype pattern to define a custom type.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-prototype\/","og_locale":"en_US","og_type":"article","og_title":"An Visual Guide to JavaScript Constructor \/ Prototype Pattern","og_description":"In this tutorial, you'll learn how to use the JavaScript constructor\/Prototype pattern to define a custom type.","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-prototype\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-23T04:42:04+00:00","og_image":[{"url":"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JS-prototype-Person-prototype.svg"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-prototype\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-prototype\/","name":"An Visual Guide to JavaScript Constructor \/ Prototype Pattern","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2021-01-21T09:49:45+00:00","dateModified":"2022-01-23T04:42:04+00:00","description":"In this tutorial, you'll learn how to use the JavaScript constructor\/Prototype pattern to define a custom type.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-prototype\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-prototype\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-prototype\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript Constructor\/Prototype Pattern"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/88206"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=88206"}],"version-history":[{"count":4,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/88206\/revisions"}],"predecessor-version":[{"id":89300,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/88206\/revisions\/89300"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=88206"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}