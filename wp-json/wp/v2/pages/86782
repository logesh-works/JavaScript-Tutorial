{"id":86782,"date":"2020-04-26T19:14:59","date_gmt":"2020-04-27T02:14:59","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=86782"},"modified":"2022-01-22T18:28:30","modified_gmt":"2022-01-23T02:28:30","slug":"javascript-bigint","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-bigint\/","title":{"rendered":"JavaScript BigInt"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the <code>BigInt<\/code> type which is the built-in object that can represent whole numbers larger than 2<sup>53<\/sup>\u00a0&#8211; 1.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the JavaScript BigInt<\/h2>\n\n\n\n<p>ES2020 introduced a new built-in object called <code>BigInt<\/code> that allows you to represent whole numbers larger <code>2<sup>53<\/sup>&nbsp;- 1<\/code>.<\/p>\n\n\n\n<p>The <code>bigint<\/code> is the primitive type like <code>number<\/code>, <code>string<\/code>, <code>symbol<\/code>, <code>boolean<\/code> <code>undefined<\/code>, and <code>null<\/code>.<\/p>\n\n\n\n<p>To make a <code>BigInt<\/code>, you append <code>n<\/code> to the end of the number literal, for example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> bigInt = <span class=\"hljs-number\">9007199254740991n<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Alternatively, you can call the function <code>BigInt()<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> bigInt = BigInt(<span class=\"hljs-number\">9007199254740991<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>See the following calculation with a <code>Number<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> x = <span class=\"hljs-built_in\">Number<\/span>.MAX_SAFE_INTEGER;\nx = x + <span class=\"hljs-number\">1<\/span>; <span class=\"hljs-comment\">\/\/ 9007199254740992<\/span>\nx = x + <span class=\"hljs-number\">1<\/span>; <span class=\"hljs-comment\">\/\/ 9007199254740992 (same as above)<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>and with a <code>BigInt<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> x = BigInt(<span class=\"hljs-built_in\">Number<\/span>.MAX_SAFE_INTEGER);\nx = x + <span class=\"hljs-number\">1<\/span>; <span class=\"hljs-comment\">\/\/ 9007199254740992n<\/span>\nx = x + <span class=\"hljs-number\">1<\/span>; <span class=\"hljs-comment\">\/\/ 9007199254740993n (correct now)<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Type<\/h3>\n\n\n\n<p>The type of a <code>BigInt<\/code> is <code>bigint<\/code>. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span> bigInt); <span class=\"hljs-comment\">\/\/ bigint<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span> BigInt(<span class=\"hljs-number\">100<\/span>) === <span class=\"hljs-string\">'bigint'<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Operators<\/h3>\n\n\n\n<p>The <code>BigInt<\/code> supports the following operator <code>+<\/code>, <code>*<\/code>, <code>-<\/code>, <code>**<\/code>, <code>%<\/code>, bitwise operators except <code>&gt;&gt;&gt;<\/code> (zero-fill right shift). It doesn&#8217;t support the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-unary-operators\/\">unary operator <\/a>(<code>+<\/code>).<\/p>\n\n\n\n<p>The <code>\/<\/code>  operator will also work with the whole numbers. However, the result will not return any fractional digits. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> result = <span class=\"hljs-number\">3n<\/span> \/ <span class=\"hljs-number\">2n<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(result); <span class=\"hljs-comment\">\/\/ 1n, not 1.5n<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Comparisons<\/h3>\n\n\n\n<p>A <code>BigInt<\/code> is not strictly equal (<code>===<\/code>) to a <code>Number<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-number\">1n<\/span> === <span class=\"hljs-number\">1<\/span>); <span class=\"hljs-comment\">\/\/ false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, a <code>BigInt<\/code> is loosely equal to a number when you use the <code>==<\/code> operator:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-number\">1n<\/span> == <span class=\"hljs-number\">1<\/span>); <span class=\"hljs-comment\">\/\/ true    <\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>You can use the <code>&lt;<\/code>, <code>&lt;=<\/code>, <code>&gt;<\/code>, <code>&gt;=<\/code> to compare a <code>BigInt<\/code> with a <code>Number<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-number\">1n<\/span> &lt; <span class=\"hljs-number\">2<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-number\">2n<\/span> &gt; <span class=\"hljs-number\">1<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-number\">2n<\/span> &gt;= <span class=\"hljs-number\">2<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Conditionals<\/h3>\n\n\n\n<p>A <code>BigInt<\/code> is converted to a <code>Boolean<\/code> via the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/\">Boolean()<\/a><\/code> function in conditionals such as <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-if-else\/\">if<\/a><\/code> statement or <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-logical-operators\/\">logical operators<\/a> <code>||<\/code>, <code>&amp;&amp;,<\/code> <code>!<\/code>. In other words, it works like a <code>Number<\/code> in these cases. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> count = <span class=\"hljs-number\">0n<\/span>;\n\n<span class=\"hljs-keyword\">if<\/span>(count) {\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-literal\">true<\/span>);\n} <span class=\"hljs-keyword\">else<\/span> {\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-literal\">false<\/span>);\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>The <code>BigInt<\/code> is a new primitive type that can represent whole numbers bigger than <code>2<sup>53<\/sup>&nbsp;- 1<\/code>, which is the largest number Javascript can reliably represent with the <code>number<\/code> type.<\/li><li>Append <code>n<\/code> to a literal integer or use <code>BigInt()<\/code> function to create a <code>bigint<\/code>.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"86782\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-bigint\/\"\n\t\t\t\tdata-post-title=\"JavaScript BigInt\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"86782\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-bigint\/\"\n\t\t\t\tdata-post-title=\"JavaScript BigInt\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about the BigInt type which is the built-in object that can represent whole numbers larger than 2^53 &#8211; 1<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":128,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript BigInt<\/title>\n<meta name=\"description\" content=\"In this tutorial, you&#039;ll learn about the BigInt type which is the built-in object that can represent whole numbers larger than 2^53 - 1\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-bigint\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript BigInt\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you&#039;ll learn about the BigInt type which is the built-in object that can represent whole numbers larger than 2^53 - 1\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-bigint\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-23T02:28:30+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"2 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-bigint\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-bigint\/\",\"name\":\"JavaScript BigInt\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2020-04-27T02:14:59+00:00\",\"dateModified\":\"2022-01-23T02:28:30+00:00\",\"description\":\"In this tutorial, you'll learn about the BigInt type which is the built-in object that can represent whole numbers larger than 2^53 - 1\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-bigint\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-bigint\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-bigint\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript BigInt\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript BigInt","description":"In this tutorial, you'll learn about the BigInt type which is the built-in object that can represent whole numbers larger than 2^53 - 1","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-bigint\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript BigInt","og_description":"In this tutorial, you'll learn about the BigInt type which is the built-in object that can represent whole numbers larger than 2^53 - 1","og_url":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-bigint\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-23T02:28:30+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"2 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-bigint\/","url":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-bigint\/","name":"JavaScript BigInt","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2020-04-27T02:14:59+00:00","dateModified":"2022-01-23T02:28:30+00:00","description":"In this tutorial, you'll learn about the BigInt type which is the built-in object that can represent whole numbers larger than 2^53 - 1","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-bigint\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-bigint\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-bigint\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript BigInt"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86782"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=86782"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86782\/revisions"}],"predecessor-version":[{"id":89246,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86782\/revisions\/89246"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=86782"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}