{"id":586,"date":"2016-09-03T03:14:59","date_gmt":"2016-09-03T10:14:59","guid":{"rendered":"http:\/\/www.javascripttutorial.net\/?page_id=586"},"modified":"2022-01-22T00:04:59","modified_gmt":"2022-01-22T08:04:59","slug":"object-literal-extensions","status":"publish","type":"page","link":"https:\/\/www.javascripttutorial.net\/es6\/object-literal-extensions\/","title":{"rendered":"Object Literal Syntax Extensions in ES6"},"content":{"rendered":"\r\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about&nbsp;the syntax extensions of the object literal in ES6 that make your code cleaner and more flexible.<\/p>\r\n\r\n\r\n\r\n<p>The <a href=\"https:\/\/www.javascripttutorial.net\/javascript-objects\/\">object<\/a> literal is one of the most popular <a href=\"https:\/\/www.javascripttutorial.net\/create-objects-in-javascript\/\">patterns for creating objects in JavaScript<\/a> because of its simplicity. ES6 makes the object literal more succinct and powerful by extending the syntax in some ways.<\/p>\r\n\r\n\r\n\r\n<h2 class=\"wp-block-heading\">Object property initializer shorthand<\/h2>\r\n\r\n\r\n\r\n<p>Prior to ES6, an object literal is a collection of name-value pairs. For example:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">createMachine<\/span>(<span class=\"hljs-params\">name, status<\/span>) <\/span>{\r\n    <span class=\"hljs-keyword\">return<\/span> {\r\n        <span class=\"hljs-attr\">name<\/span>: name,\r\n        <span class=\"hljs-attr\">status<\/span>: status\r\n    };\r\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>The <code>createMachine()<\/code> <a href=\"https:\/\/www.javascripttutorial.net\/javascript-function\/\">function<\/a> takes two arguments <code>name<\/code> and <code>status<\/code>&nbsp;and returns a new object literal with two properties: <code>name<\/code> and <code>status<\/code>. <\/p>\r\n\r\n\r\n\r\n<p>The <code>name<\/code> and <code>status<\/code> properties take the values of the <code>name<\/code> and <code>status<\/code> parameters. This syntax looks redundant because <code>name<\/code> and <code>status<\/code> mentioned twice in both the name and value of properties.<\/p>\r\n\r\n\r\n\r\n<p>ES6 allows you to eliminate the duplication when a property of an object is the same as the local variable name by including the name without a colon and value.<\/p>\r\n\r\n\r\n\r\n<p>For example, you can rewrite the <code>createMachine()<\/code> function in ES6 as follows:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">createMachine<\/span>(<span class=\"hljs-params\">name, status<\/span>) <\/span>{\r\n    <span class=\"hljs-keyword\">return<\/span> {\r\n        name,\r\n        status\r\n    };\r\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>Internally, when a property of an object literal only has a name, the JavaScript engine searches for a variable with the same name in the surrounding scope. If the JavaScript engine can find one, it assigns the property the value of the variable. <\/p>\r\n\r\n\r\n\r\n<p>In this example, the JavaScript engine assigns the <code>name<\/code> and <code>status<\/code> property values of the <code>name<\/code> and <code>status<\/code> arguments.<\/p>\r\n\r\n\r\n\r\n<p>Similarly, you can construct an object literal from local variables as shown in the following example:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> name = <span class=\"hljs-string\">'Computer'<\/span>,\r\n    status = <span class=\"hljs-string\">'On'<\/span>;\r\n\r\n<span class=\"hljs-keyword\">let<\/span> machine = {\r\n   name,\r\n   status\r\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<h2 class=\"wp-block-heading\">Computed property name<\/h2>\r\n\r\n\r\n\r\n<p>Prior to ES6, you could use the square brackets( <code>[]<\/code>) &nbsp;to enable the <strong>computed property names<\/strong> for the properties on objects. <\/p>\r\n\r\n\r\n\r\n<p>The square brackets allow you to use the string literals and variables as the property names.<\/p>\r\n\r\n\r\n\r\n<p>See the following example:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> name = <span class=\"hljs-string\">'machine name'<\/span>;\r\n<span class=\"hljs-keyword\">let<\/span> machine = {\r\n    &#91;name]: <span class=\"hljs-string\">'server'<\/span>,\r\n    <span class=\"hljs-string\">'machine hours'<\/span>: <span class=\"hljs-number\">10000<\/span>\r\n};\r\n\r\n<span class=\"hljs-built_in\">console<\/span>.log(machine&#91;name]); <span class=\"hljs-comment\">\/\/ server<\/span>\r\n<span class=\"hljs-built_in\">console<\/span>.log(machine&#91;<span class=\"hljs-string\">'machine hours'<\/span>]); <span class=\"hljs-comment\">\/\/ 10000<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>The <code>name<\/code> variable was initialized&nbsp;to a value of <code>'machine name'<\/code>. Since both properties of the <code>machine<\/code> object contains a space, you can only reference them using the square brackets.<\/p>\r\n\r\n\r\n\r\n<p>In ES6, the computed property name is a part of the object literal syntax, and it uses the square bracket notation.<\/p>\r\n\r\n\r\n\r\n<p>When a property name is placed inside the square brackets, the JavaScript engine evaluates it as a string. It means that you can use an expression as a property name. For example:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> prefix = <span class=\"hljs-string\">'machine'<\/span>;\r\n<span class=\"hljs-keyword\">let<\/span> machine = {\r\n    &#91;prefix + <span class=\"hljs-string\">' name'<\/span>]: <span class=\"hljs-string\">'server'<\/span>,\r\n    &#91;prefix + <span class=\"hljs-string\">' hours'<\/span>]: <span class=\"hljs-number\">10000<\/span>\r\n};\r\n\r\n<span class=\"hljs-built_in\">console<\/span>.log(machine&#91;<span class=\"hljs-string\">'machine name'<\/span>]); <span class=\"hljs-comment\">\/\/ server<\/span>\r\n<span class=\"hljs-built_in\">console<\/span>.log(machine&#91;<span class=\"hljs-string\">'machine hours'<\/span>]); <span class=\"hljs-comment\">\/\/ 10000<\/span>\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>The <code>machine<\/code> object&#8217;s properties evaluate to <code>'machine name'<\/code> and <code>'machine hours'<\/code>, therefore you can reference them as the properties of the <code>machine<\/code> object.<\/p>\r\n\r\n\r\n\r\n<h2 class=\"wp-block-heading\">Concise&nbsp;method syntax<\/h2>\r\n\r\n\r\n\r\n<p>Prior to ES6, when defining a method for an object literal, you need to specify the name and full function definition as shown in the following example:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> server = {\r\n\t<span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\"Server\"<\/span>,\r\n\t<span class=\"hljs-attr\">restart<\/span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\r\n\t\t<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">\"The\"<\/span> + <span class=\"hljs-keyword\">this<\/span>.name + <span class=\"hljs-string\">\" is restarting...\"<\/span>);\r\n\t}\r\n};\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>ES6 makes the syntax for making a method of the object literal more succinct by removing the colon (:) and the <code>function<\/code> keyword.<\/p>\r\n\r\n\r\n\r\n<p>The following example rewrites the <code>server<\/code> object above using the ES6 syntax.<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> server = {\r\n    <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'Server'<\/span>,\r\n    restart() {\r\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">\"The\"<\/span> + <span class=\"hljs-keyword\">this<\/span>.name + <span class=\"hljs-string\">\" is restarting...\"<\/span>);\r\n    }\r\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>This shorthand syntax is also known as the <strong>concise method syntax<\/strong>. It&#8217;s valid to have spaces in the property name. For example:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> server = {\r\n    <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'Server'<\/span>,\r\n    restart() {\r\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">\"The \"<\/span> + <span class=\"hljs-keyword\">this<\/span>.name + <span class=\"hljs-string\">\" is restarting...\"<\/span>);\r\n    },\r\n    <span class=\"hljs-string\">'starting up'<\/span>() {\r\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">\"The \"<\/span> +  <span class=\"hljs-keyword\">this<\/span>.name + <span class=\"hljs-string\">\" is starting up!\"<\/span>);\r\n    }\r\n};\r\n\r\nserver&#91;<span class=\"hljs-string\">'starting up'<\/span>]();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>In this example, the method <code>'starting up'<\/code> has spaces in its name. To call the method, you use the following syntax:<\/p>\r\n\r\n\r\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">object_name<\/span><span class=\"hljs-selector-attr\">&#91;<span class=\"hljs-string\">'property name'<\/span>]<\/span>();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\r\n\r\n\r\n<p>In this tutorial, you have learned how to use some new object literal syntax extensions in ES6 including property initializer shorthand, computed properties, and concise method syntax.<\/p>\r\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"586\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/es6\/object-literal-extensions\/\"\n\t\t\t\tdata-post-title=\"Object Literal Syntax Extensions in ES6\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"586\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/es6\/object-literal-extensions\/\"\n\t\t\t\tdata-post-title=\"Object Literal Syntax Extensions in ES6\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about\u00a0the syntax extensions of the object literal in ES6 that make your code cleaner and more flexible.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":61,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Object Literal Syntax Extension in ES6 By Examples<\/title>\n<meta name=\"description\" content=\"This tutorial shows you how to use new object literal syntax extensions including property initializer shorthand, computed properties, and concise method.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.javascripttutorial.net\/es6\/object-literal-extensions\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Object Literal Syntax Extension in ES6 By Examples\" \/>\n<meta property=\"og:description\" content=\"This tutorial shows you how to use new object literal syntax extensions including property initializer shorthand, computed properties, and concise method.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.javascripttutorial.net\/es6\/object-literal-extensions\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-22T08:04:59+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/object-literal-extensions\/\",\"url\":\"https:\/\/www.javascripttutorial.net\/es6\/object-literal-extensions\/\",\"name\":\"JavaScript Object Literal Syntax Extension in ES6 By Examples\",\"isPartOf\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\"},\"datePublished\":\"2016-09-03T10:14:59+00:00\",\"dateModified\":\"2022-01-22T08:04:59+00:00\",\"description\":\"This tutorial shows you how to use new object literal syntax extensions including property initializer shorthand, computed properties, and concise method.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/object-literal-extensions\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.javascripttutorial.net\/es6\/object-literal-extensions\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/object-literal-extensions\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Object Literal Syntax Extensions in ES6\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\",\"url\":\"https:\/\/www.javascripttutorial.net\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.javascripttutorial.net\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Object Literal Syntax Extension in ES6 By Examples","description":"This tutorial shows you how to use new object literal syntax extensions including property initializer shorthand, computed properties, and concise method.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.javascripttutorial.net\/es6\/object-literal-extensions\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Object Literal Syntax Extension in ES6 By Examples","og_description":"This tutorial shows you how to use new object literal syntax extensions including property initializer shorthand, computed properties, and concise method.","og_url":"https:\/\/www.javascripttutorial.net\/es6\/object-literal-extensions\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-22T08:04:59+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/www.javascripttutorial.net\/es6\/object-literal-extensions\/","url":"https:\/\/www.javascripttutorial.net\/es6\/object-literal-extensions\/","name":"JavaScript Object Literal Syntax Extension in ES6 By Examples","isPartOf":{"@id":"https:\/\/www.javascripttutorial.net\/#website"},"datePublished":"2016-09-03T10:14:59+00:00","dateModified":"2022-01-22T08:04:59+00:00","description":"This tutorial shows you how to use new object literal syntax extensions including property initializer shorthand, computed properties, and concise method.","breadcrumb":{"@id":"https:\/\/www.javascripttutorial.net\/es6\/object-literal-extensions\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.javascripttutorial.net\/es6\/object-literal-extensions\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.javascripttutorial.net\/es6\/object-literal-extensions\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":3,"name":"Object Literal Syntax Extensions in ES6"}]},{"@type":"WebSite","@id":"https:\/\/www.javascripttutorial.net\/#website","url":"https:\/\/www.javascripttutorial.net\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.javascripttutorial.net\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/586"}],"collection":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/comments?post=586"}],"version-history":[{"count":4,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/586\/revisions"}],"predecessor-version":[{"id":88382,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/586\/revisions\/88382"}],"up":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/media?parent=586"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}