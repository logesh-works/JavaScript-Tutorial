{"id":86796,"date":"2020-04-27T01:58:53","date_gmt":"2020-04-27T08:58:53","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=86796"},"modified":"2022-08-16T23:53:23","modified_gmt":"2022-08-17T06:53:23","slug":"javascript-import","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-import\/","title":{"rendered":"JavaScript import"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to dynamically import modules by using the function-like <code>import()<\/code> in ES2020.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the JavaScript import()<\/h2>\n\n\n\n<p>ES6 introduced the module concept that allows you to develop modular JavaScript code. Suppose you have the following simple HTML document that has one button:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">&lt;!DOCTYPE html&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html<\/span>&gt;<\/span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title<\/span>&gt;<\/span>Module Dynamic Import<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">title<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">head<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button<\/span> <span class=\"hljs-attr\">id<\/span>=<span class=\"hljs-string\">\"show\"<\/span>&gt;<\/span>Show Dialog<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">button<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"module\"<\/span> <span class=\"hljs-attr\">src<\/span>=<span class=\"hljs-string\">\"js\/app.js\"<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">script<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">body<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">html<\/span>&gt;<\/span><\/span>\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When users click the button, you want to show a dialog. To make the code more organized, you develop a module called <code>dialog.js<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">show<\/span>(<span class=\"hljs-params\">message<\/span>) <\/span>{\n    alert(message);\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And use the <code>show()<\/code> function in the <code>app.js<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> {show} <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/dialog.js'<\/span>;\n\n<span class=\"hljs-keyword\">let<\/span> btn = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'#show'<\/span>);\n\nbtn.addEventListener(<span class=\"hljs-string\">'click'<\/span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n    show(<span class=\"hljs-string\">'Hi'<\/span>);\n});\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Prior to ES2020, it was not possible to dynamically load the <code>dialog.js<\/code> module when needed. The following will cause an error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> btn = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'#show'<\/span>);\n\nbtn.addEventListener(<span class=\"hljs-string\">'click'<\/span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">import<\/span> {show} <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/dialog.js'<\/span>;\n    show(<span class=\"hljs-string\">'Hi'<\/span>);\n});\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The above code attempts to load the <code>dialog.js<\/code> module only when the button is clicked.<\/p>\n\n\n\n<p>ES2020 introduced the dynamic import of the module via the function-like <code>import()<\/code> with the following syntax:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span>(moduleSpecifier);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>import()<\/code> allows you to dynamically import a module when needed. Here is how the <code>import()<\/code> works:<\/p>\n\n\n\n<ul><li>The <code>import()<\/code> accepts a module specifier (<code>moduleSpecifier<\/code>) that has the same format as the module specifier used for the <code>import<\/code> statement. In addition, the <code>moduleSpecifier<\/code> can be an expression that evaluates to a string.<\/li><li>The <code>import()<\/code> returns a <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-promises\/\">Promise<\/a><\/code> that will be fulfilled once the module is loaded completely.<\/li><\/ul>\n\n\n\n<p>To load the <code>dialog.js<\/code> dynamically, you can use the <code>import()<\/code> as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> btn = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'#show'<\/span>);\n\nbtn.addEventListener(<span class=\"hljs-string\">'click'<\/span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">import<\/span>(<span class=\"hljs-string\">'.\/dialog.js'<\/span>)\n        .then(<span class=\"hljs-function\">(<span class=\"hljs-params\"> dialog <\/span>) =&gt;<\/span> {\n            dialog.show();\n        })\n        .catch( <span class=\"hljs-function\"><span class=\"hljs-params\">error<\/span> =&gt;<\/span> {\n            <span class=\"hljs-comment\">\/\/ handle error here<\/span>\n        });\n});<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Since the <code>import()<\/code> returns a <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-promises\/\">Promise<\/a>, you can use the <a href=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/\">async\/await<\/a> in the <code>app.js<\/code> module like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> btn = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'#show'<\/span>);\n\nbtn.addEventListener(<span class=\"hljs-string\">'click'<\/span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n    (<span class=\"hljs-keyword\">async<\/span> () =&gt; {\n        <span class=\"hljs-keyword\">try<\/span> {\n            <span class=\"hljs-keyword\">let<\/span> dialog = <span class=\"hljs-keyword\">await<\/span> <span class=\"hljs-keyword\">import<\/span>(<span class=\"hljs-string\">'.\/dialog.js'<\/span>);\n            dialog.show(<span class=\"hljs-string\">'Hi'<\/span>)\n        } <span class=\"hljs-keyword\">catch<\/span> (error) {\n            <span class=\"hljs-built_in\">console<\/span>.log(error);\n        }\n    })();\n\n});\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Some practical use cases of JavaScript import()<\/h2>\n\n\n\n<p>The <code>import()<\/code> has the following practical use cases:<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">1) Loading module on demand<\/h3>\n\n\n\n<p>Some functionality may not need to be available when applications start. To decrease the loading time, you can place such functionality in modules and use the <code>import()<\/code> to load them on demand like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">eventHandler<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">import<\/span>(<span class=\"hljs-string\">'.\/module1.js'<\/span>)\n        .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">ns<\/span>) =&gt;<\/span> {\n            <span class=\"hljs-comment\">\/\/ use the module <\/span>\n            ns.func();\n        })\n        .catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">error<\/span>) =&gt;<\/span> {\n            <span class=\"hljs-comment\">\/\/ handle error<\/span>\n        });\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">2) Loading modules based on conditions<\/h3>\n\n\n\n<p>When placing the <code>import()<\/code> inside the conditional statement such as <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-if-else\/\">if-else<\/a>, you can load modules based on a specific condition. The following example loads a module that targets a specific platform:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if<\/span>( isSpecificPlatform() ) {\n    <span class=\"hljs-keyword\">import<\/span>(<span class=\"hljs-string\">'.\/platform.js'<\/span>)\n    .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">ns<\/span>) =&gt;<\/span> {\n        ns=&gt;f();\n    });\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">3) Computed module specifiers<\/h3>\n\n\n\n<p>The module specifier is an expression that allows you to decide which module to load at runtime.<\/p>\n\n\n\n<p>For example, you can load a module based on the user&#8217;s locale to show the message in the user&#8217;s specific language:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> lang = <span class=\"hljs-string\">`message_<span class=\"hljs-subst\">${getUserLocale()}<\/span>.js`<\/span>;\n\n<span class=\"hljs-keyword\">import<\/span>(lang)\n    .then(...);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">More on the JavaScript import()<\/h2>\n\n\n\n<h3 class=\"wp-block-heading\">Using object destructuring<\/h3>\n\n\n\n<p>If a module has multiple exports, you can use the <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-object-destructuring\/\">object destructuring<\/a> to receive the exporting objects. Suppose the <code>dialog.js<\/code> has two functions:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">show<\/span>(<span class=\"hljs-params\">message<\/span>) <\/span>{\n    alert(message);\n\n}\n\n<span class=\"hljs-keyword\">export<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">hide<\/span>(<span class=\"hljs-params\">message<\/span>) <\/span>{\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Hide it...'<\/span>);\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In the <code>app.js<\/code>, you can use the object destructuring as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> btn = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'#show'<\/span>);\n\nbtn.addEventListener(<span class=\"hljs-string\">'click'<\/span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n    (<span class=\"hljs-keyword\">async<\/span> () =&gt; {\n        <span class=\"hljs-keyword\">try<\/span> {\n            <span class=\"hljs-comment\">\/\/ use object destructuring<\/span>\n            <span class=\"hljs-keyword\">let<\/span> {\n                show,\n                hide\n            } = <span class=\"hljs-keyword\">await<\/span> <span class=\"hljs-keyword\">import<\/span>(<span class=\"hljs-string\">'.\/dialog.js'<\/span>);\n\n            <span class=\"hljs-comment\">\/\/ use the functions<\/span>\n            show(<span class=\"hljs-string\">'Hi'<\/span>);\n            hide();\n        } <span class=\"hljs-keyword\">catch<\/span> (err) {\n            <span class=\"hljs-built_in\">console<\/span>.log(err);\n        }\n    })();\n\n});<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Dynamically loading multiple modules<\/h3>\n\n\n\n<p>To load multiple modules dynamically, you can use the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-promise-all\/\">Promise.all()<\/a><\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">Promise<\/span>.all(&#91;\n    <span class=\"hljs-keyword\">import<\/span>(module1), \n    <span class=\"hljs-keyword\">import<\/span>(module2),\n     ...])\n    .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">&#91;module1,module2,module3]<\/span>) =&gt;<\/span> {\n        <span class=\"hljs-comment\">\/\/ use the modules<\/span>\n    });\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Accessing the default export<\/h3>\n\n\n\n<p>If a module has a default export, you can access it using the <code>default<\/code> keyword. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span>(moduleSpecifier)\n    .then(<span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-built_in\">module<\/span><\/span>) =&gt;<\/span> {\n        <span class=\"hljs-comment\">\/\/ access the default export<\/span>\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">module<\/span>.default);\n    });\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>Use JavaScript <code>import()<\/code> to dynamically load a module. The <code>import()<\/code> returns a <code>Promise<\/code> that will be fulfilled once the module is loaded completely.<\/li><li>Use the <code>async<\/code> \/ <code>await<\/code> to handle the result of the <code>import()<\/code>.<\/li><li>Use the <code>Promise.all()<\/code> method to load multiple modules at once.<\/li><li>Use the object destructuring to assign variables to the exporting objects of a module.<\/li><li>Use the <code>default<\/code> keyword to access the default export.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"86796\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-import\/\"\n\t\t\t\tdata-post-title=\"JavaScript import\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"86796\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-import\/\"\n\t\t\t\tdata-post-title=\"JavaScript import\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn how to dynamically import modules by using the function-like JavaScript import() in ES2020.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":104,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript import<\/title>\n<meta name=\"description\" content=\"In this tutorial, you&#039;ll learn how to dynamically import modules by using the function-like import() in ES2020.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-import\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript import\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you&#039;ll learn how to dynamically import modules by using the function-like import() in ES2020.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-import\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-08-17T06:53:23+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-import\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-import\/\",\"name\":\"JavaScript import\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2020-04-27T08:58:53+00:00\",\"dateModified\":\"2022-08-17T06:53:23+00:00\",\"description\":\"In this tutorial, you'll learn how to dynamically import modules by using the function-like import() in ES2020.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-import\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-import\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-import\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript import\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript import","description":"In this tutorial, you'll learn how to dynamically import modules by using the function-like import() in ES2020.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-import\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript import","og_description":"In this tutorial, you'll learn how to dynamically import modules by using the function-like import() in ES2020.","og_url":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-import\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-08-17T06:53:23+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-import\/","url":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-import\/","name":"JavaScript import","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2020-04-27T08:58:53+00:00","dateModified":"2022-08-17T06:53:23+00:00","description":"In this tutorial, you'll learn how to dynamically import modules by using the function-like import() in ES2020.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-import\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-import\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-import\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript import"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86796"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=86796"}],"version-history":[{"count":3,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86796\/revisions"}],"predecessor-version":[{"id":90252,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86796\/revisions\/90252"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=86796"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}