{"id":90098,"date":"2022-02-18T20:44:57","date_gmt":"2022-02-19T04:44:57","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=90098"},"modified":"2022-02-18T20:47:33","modified_gmt":"2022-02-19T04:47:33","slug":"javascript-regex-replace","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/replace\/","title":{"rendered":"JavaScript Regex Replace"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use the string replace() method to return a new string with some or all matches of a regular expression replaced by a replacement string.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"introduction-to-the-javascript-replace-method\">Introduction to the JavaScript replace() method<\/h2>\n\n\n\n<p>The <code>String.prototype.replace()<\/code> method works with both <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-string-type\/\">strings<\/a> and <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/\">regular expressions<\/a>. This tutorial focuses solely on regular expressions. <\/p>\n\n\n\n<p>The following shows the syntax of the <code>replace()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">replace(regexp, newSubstr)<\/code><\/span><\/pre>\n\n\n<p>In this syntax:<\/p>\n\n\n\n<ul><li>The <code>regexp<\/code> is a regular expression to match.<\/li><li>The <code>newSubstr<\/code> is a string to replace the matches. If the <code>newSubstr<\/code> is empty, the <code>replace()<\/code> method removes the matches.<\/li><\/ul>\n\n\n\n<p>The <code>replace()<\/code> returns a new string with the matches replaced by the <code>newSubstr<\/code>. Note that the <code>replace()<\/code> method doesn&#8217;t change the original string but returns a new string.<\/p>\n\n\n\n<p>By default, the <code>replace()<\/code> method replaces the first match if the <code>regexp<\/code> doesn&#8217;t use the global flag (<code>g<\/code>). To replace all matches, you use the global flag (<code>g<\/code>) in the <code>regexp<\/code>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"javascript-regex-replace-method-examples\">JavaScript regex replace() method examples<\/h2>\n\n\n\n<p>Let&#8217;s take some examples of using the <code>replace()<\/code> method.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"1-a-simple-the-javascript-regex-replace-method-example\">1) A simple the JavaScript regex replace() method example<\/h3>\n\n\n\n<p>The following example uses the <code>replace()<\/code> method to replace the first match of the <code>JS<\/code> string with the <code>JavaScript<\/code> string:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> s = <span class=\"hljs-string\">'JS and js'<\/span>;\r\n<span class=\"hljs-keyword\">const<\/span> re = <span class=\"hljs-regexp\">\/js\/i<\/span>;\r\n\r\n<span class=\"hljs-keyword\">const<\/span> newS = s.replace(re, <span class=\"hljs-string\">'JavaScript'<\/span>);\r\n<span class=\"hljs-built_in\">console<\/span>.log(newS);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">JavaScript and js<\/code><\/span><\/pre>\n\n\n<p>The <code>\/js\/i<\/code> matches both <code>JS<\/code> and <code>js<\/code> in the <code>'JS and js'<\/code> string. However, the <code>replace()<\/code> method replaces only the first match (<code>JS<\/code>). <\/p>\n\n\n\n<p>To replace all matches, you use the global flag (<code>g<\/code>) in the regular expression.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"2-using-the-javascript-regex-replace-method-with-the-global-flag\">2) Using the JavaScript regex replace() method with the global flag<\/h3>\n\n\n\n<p>The following example uses the <code>replace()<\/code> method with a regular expression containing a global flag (<code>g<\/code>) to replace all matches:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> s = <span class=\"hljs-string\">'JS and js'<\/span>;\r\n<span class=\"hljs-keyword\">const<\/span> re = <span class=\"hljs-regexp\">\/js\/gi<\/span>;\r\n\r\n<span class=\"hljs-keyword\">const<\/span> newS = s.replace(re, <span class=\"hljs-string\">'JavaScript'<\/span>);\r\n<span class=\"hljs-built_in\">console<\/span>.log(newS);\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">JavaScript and JavaScript<\/code><\/span><\/pre>\n\n\n<h3 class=\"wp-block-heading\" id=\"3-using-the-javascript-regex-replace-method-with-capturing-groups\">3) Using the JavaScript regex replace() method with capturing groups<\/h3>\n\n\n\n<p>When a regular expression contains the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/capturing-groups\/\">capturing groups<\/a>, you can reference these groups in the <code>newSubstr<\/code> using the <code>$N<\/code> syntax where <code>N<\/code> is the grouping number. For example, $1 and $2 reference first and second capturing groups.<\/p>\n\n\n\n<p>The following example illustrates how to use the <code>replace()<\/code> method with capturing groups to swap the first and last names in a person name:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> re = <span class=\"hljs-regexp\">\/(\\w+)\\s(\\w+)\/<\/span>;\r\n<span class=\"hljs-keyword\">let<\/span> name = <span class=\"hljs-string\">'Jane Doe'<\/span>;\r\n<span class=\"hljs-keyword\">let<\/span> lastFirst = name.replace(re, <span class=\"hljs-string\">'$2, $1'<\/span>);\n\r\n<span class=\"hljs-built_in\">console<\/span>.log(lastFirst);\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">Doe, Jane<\/code><\/span><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>The regular expression <code>\/(\\w+)\\s(\\w+)\/<\/code> matches one or more word characters, a space, and then one or more word characters. In other words, it matches any string that has a word, space, and another word. <\/p>\n\n\n\n<p>The regular expression contains two capturing groups. The first capturing group captures the first word and the second one captures the second word after the space.<\/p>\n\n\n\n<p>In the <code>newSubstr<\/code>, we use <code>$1<\/code> to reference the first capturing group and <code>$2<\/code> to reference the second one. To swap the first name and last name, we place the second match (<code>$2<\/code>) first and then the first match (<code>$1<\/code>).<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"javascript-regex-replace-method-with-replacer-function\">JavaScript regex replace() method with replacer function<\/h2>\n\n\n\n<p>The second argument of the <code>replace()<\/code> method can be a function like this:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">replace(regexp, replacerFunction)<\/code><\/span><\/pre>\n\n\n<p>The <code>replace()<\/code> method calls the <code>replacerFunction<\/code> after it finds the first match. The <code>replacerFunction<\/code> is used to create a substring to replace the match. <\/p>\n\n\n\n<p>If the <code>regexp<\/code> uses the global flag (<code>g<\/code>), the <code>replace()<\/code> method will call the <code>replacerFunction<\/code> after every match.<\/p>\n\n\n\n<p>The <code>replacerFunction<\/code> has the following arguments:<\/p>\n\n\n\n<ul><li><code>match<\/code> specifies the matched substring.<\/li><li><code>p1<\/code>, <code>p2<\/code>, &#8230; the values of the capturing groups in the regexp.<\/li><li><code>offset<\/code> is an integer that specifies the offset of the matched substring within the input string.<\/li><li><code>string<\/code> is the input string.<\/li><li><code>groups<\/code> is an object whose are are the named capturing group and values are matched values.<\/li><\/ul>\n\n\n\n<p>Let&#8217;s take an example of using the <code>replace()<\/code> method with a replacer function.<\/p>\n\n\n\n<p>Suppose you have a string like this:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">backgroundColor<\/code><\/span><\/pre>\n\n\n<p>And you want to transform it into something like:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">background-color<\/code><\/span><\/pre>\n\n\n<p>To do that you can use the <code>replace()<\/code> method with a replacer function.<\/p>\n\n\n\n<p>First, construct a regular expression that matches a capital letter:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">\/&#91;A-Z]\/g<\/code><\/span><\/pre>\n\n\n<p>Second, define a replacer function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">replacer<\/span>(<span class=\"hljs-params\">match, offset<\/span>) <\/span>{\r\n  <span class=\"hljs-keyword\">return<\/span> (offset &gt; <span class=\"hljs-number\">0<\/span> ? <span class=\"hljs-string\">'-'<\/span> : <span class=\"hljs-string\">''<\/span>) + match.toLowerCase();\r\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>replacer()<\/code> function adds a hyphen if the matched letter is not at the beginning of the string and concatenates the hyphen with the matched letter converted to lowercase.<\/p>\n\n\n\n<p>Third, use the <code>replace()<\/code> method to replace the match with the substring returned from the <code>replacer()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">addHyphen<\/span>(<span class=\"hljs-params\">prop<\/span>) <\/span>{\r\n  <span class=\"hljs-keyword\">return<\/span> prop.replace(<span class=\"hljs-regexp\">\/&#91;A-Z]\/g<\/span>, replacer);\r\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following shows the complete code:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">replacer<\/span>(<span class=\"hljs-params\">match, offset<\/span>) <\/span>{\r\n  <span class=\"hljs-keyword\">return<\/span> (offset &gt; <span class=\"hljs-number\">0<\/span> ? <span class=\"hljs-string\">'-'<\/span> : <span class=\"hljs-string\">''<\/span>) + match.toLowerCase();\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">addHyphen<\/span>(<span class=\"hljs-params\">prop<\/span>) <\/span>{\r\n  <span class=\"hljs-keyword\">return<\/span> prop.replace(<span class=\"hljs-regexp\">\/&#91;A-Z]\/g<\/span>, replacer);\r\n}\r\n\r\n<span class=\"hljs-keyword\">const<\/span> prop = <span class=\"hljs-string\">'backgroundColor'<\/span>;\r\n<span class=\"hljs-built_in\">console<\/span>.log(addHyphen(prop));\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">background-color<\/code><\/span><\/pre>\n\n\n<p>To make the code more concise, you can use <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/\">arrow functions<\/a> with the replacer function as a <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-callback\/\">callback function<\/a> like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> addHyphen = <span class=\"hljs-function\">(<span class=\"hljs-params\">prop<\/span>) =&gt;<\/span>\r\n  prop.replace(\r\n    <span class=\"hljs-regexp\">\/&#91;A-Z]\/g<\/span>,\r\n    (match, offset) =&gt; (offset &gt; <span class=\"hljs-number\">0<\/span> ? <span class=\"hljs-string\">'-'<\/span> : <span class=\"hljs-string\">''<\/span>) + match.toLowerCase()\r\n  );\r\n\r\n<span class=\"hljs-keyword\">const<\/span> prop = <span class=\"hljs-string\">'backgroundColor'<\/span>;\r\n<span class=\"hljs-built_in\">console<\/span>.log(addHyphen(prop));\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"summary\">Summary<\/h2>\n\n\n\n<ul><li>Use the <code>replace()<\/code> method to find matches against a regular expression and replace the matches with a new substring.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"90098\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/replace\/\"\n\t\t\t\tdata-post-title=\"JavaScript Regex Replace\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"90098\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/replace\/\"\n\t\t\t\tdata-post-title=\"JavaScript Regex Replace\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you&#8217;ll learn how to use the string replace() method to return a new string with some or all matches of a regular expression replaced by a replacement string. Introduction to the JavaScript replace() method The String.prototype.replace() method works with both strings and regular expressions. This tutorial focuses solely on regular expressions. [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":90024,"menu_order":14,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Regex replace()<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/replace\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Regex replace()\" \/>\n<meta property=\"og:description\" content=\"Summary: in this tutorial, you&#8217;ll learn how to use the string replace() method to return a new string with some or all matches of a regular expression replaced by a replacement string. Introduction to the JavaScript replace() method The String.prototype.replace() method works with both strings and regular expressions. This tutorial focuses solely on regular expressions. [&hellip;]\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/replace\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-19T04:47:33+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/replace\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/replace\/\",\"name\":\"JavaScript Regex replace()\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2022-02-19T04:44:57+00:00\",\"dateModified\":\"2022-02-19T04:47:33+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/replace\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/replace\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/replace\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Javascript Regex\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Regex Replace\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Regex replace()","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/replace\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Regex replace()","og_description":"Summary: in this tutorial, you&#8217;ll learn how to use the string replace() method to return a new string with some or all matches of a regular expression replaced by a replacement string. Introduction to the JavaScript replace() method The String.prototype.replace() method works with both strings and regular expressions. This tutorial focuses solely on regular expressions. [&hellip;]","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/replace\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-02-19T04:47:33+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/replace\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/replace\/","name":"JavaScript Regex replace()","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2022-02-19T04:44:57+00:00","dateModified":"2022-02-19T04:47:33+00:00","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/replace\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/replace\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/replace\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"Javascript Regex","item":"https:\/\/https://jsprifix.netlify.app/\/javascript-regex\/"},{"@type":"ListItem","position":3,"name":"JavaScript Regex Replace"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/90098"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=90098"}],"version-history":[{"count":3,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/90098\/revisions"}],"predecessor-version":[{"id":90101,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/90098\/revisions\/90101"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/90024"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=90098"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}