{"id":498,"date":"2016-08-26T10:09:26","date_gmt":"2016-08-26T17:09:26","guid":{"rendered":"http:\/\/www.javascripttutorial.net\/?page_id=498"},"modified":"2022-08-16T21:47:53","modified_gmt":"2022-08-17T04:47:53","slug":"javascript-let","status":"publish","type":"page","link":"https:\/\/www.javascripttutorial.net\/es6\/javascript-let\/","title":{"rendered":"JavaScript let: Declaring Block-Scoped Variables"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to use the JavaScript <code>let<\/code> keyword to declare block-scoped variables.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the JavaScript let keyword<\/h2>\n\n\n\n<p>In ES5, when you <a href=\"https:\/\/www.javascripttutorial.net\/javascript-variables\/\">declare a variable<\/a> using the <code>var<\/code> keyword, the scope of the variable is either global or local. If you declare a variable outside of a function, the scope of the variable is global. When you declare a variable inside a function, the scope of the variable is local.<\/p>\n\n\n\n<p>ES6 provides a new way of declaring a variable by using the <code>let<\/code> keyword. The <code>let<\/code> keyword is similar to the <code>var<\/code> keyword, except that these variables are blocked-scope. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> variable_name;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In JavaScript, blocks are denoted by curly braces <code>{}<\/code> , for example, the <code><a href=\"https:\/\/www.javascripttutorial.net\/javascript-if-else\/\">if else<\/a><\/code>,&nbsp;<code><a href=\"https:\/\/www.javascripttutorial.net\/javascript-for-loop\/\">for<\/a><\/code>, <code><a href=\"https:\/\/www.javascripttutorial.net\/javascript-do-while\/\">do while<\/a><\/code>, <code><a href=\"https:\/\/www.javascripttutorial.net\/javascript-while-loop\/\">while<\/a><\/code>, <code><a href=\"https:\/\/www.javascripttutorial.net\/javascript-try-catch\/\">try catch<\/a><\/code> and so on:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if<\/span>(condition) {\n   <span class=\"hljs-comment\">\/\/ inside a block<\/span>\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> x = <span class=\"hljs-number\">10<\/span>;\n<span class=\"hljs-keyword\">if<\/span> (x == <span class=\"hljs-number\">10<\/span>) {\n    <span class=\"hljs-keyword\">let<\/span> x = <span class=\"hljs-number\">20<\/span>;\n    <span class=\"hljs-built_in\">console<\/span>.log(x); <span class=\"hljs-comment\">\/\/ 20:  reference x inside the block<\/span>\n}\n<span class=\"hljs-built_in\">console<\/span>.log(x); <span class=\"hljs-comment\">\/\/ 10: reference at the begining of the script<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How the script works:<\/p>\n\n\n\n<ul><li>First, declare a variable <code>x<\/code> and initialize its value to 10.<\/li><li>Second, declare&nbsp;a new variable with the same name <code>x<\/code> inside the <code>if<\/code> block but with an initial value of 20.<\/li><li>Third, output the value of the variable <code>x<\/code> inside and after the &nbsp;<a href=\"https:\/\/www.javascripttutorial.net\/javascript-if-else\/\"><code>if<\/code><\/a> block.<\/li><\/ul>\n\n\n\n<p>Because the <code>let<\/code> keyword declares a&nbsp;block-scoped variable, the <code>x<\/code> variable inside the <code>if<\/code> block is a <strong>new variable <\/strong>and it shadows the <code>x<\/code> variable declared at the top of the script.&nbsp;Therefore,&nbsp;the value of <code>x<\/code> in the console is <code>20<\/code>.<\/p>\n\n\n\n<p>When the JavaScript engine completes executing the <code>if<\/code> block,&nbsp;the <code>x<\/code> variable inside the <code>if<\/code> block is out of scope. Therefore, the value of the&nbsp;<code>x<\/code> variable that following the <code>if <\/code>block is 10.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">JavaScript let and global object<\/h2>\n\n\n\n<p>When you declare a global variable using the <code>var<\/code> keyword, you add that variable to the property list of the <a href=\"https:\/\/www.javascripttutorial.net\/es-next\/javascript-globalthis\/\">global object<\/a>. In the case of the web browser, the global object is the <code>window<\/code>. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> a = <span class=\"hljs-number\">10<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">window<\/span>.a); <span class=\"hljs-comment\">\/\/ 10<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, when you use the <code>let<\/code> keyword to declare a variable, that variable is <strong>not<\/strong> attached to the global object as a property. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> b = <span class=\"hljs-number\">20<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">window<\/span>.b); <span class=\"hljs-comment\">\/\/ undefined<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">JavaScript let and callback function in a for loop<\/h2>\n\n\n\n<p>See the following example.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">var<\/span> i = <span class=\"hljs-number\">0<\/span>; i &lt; <span class=\"hljs-number\">5<\/span>; i++) {\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n        <span class=\"hljs-built_in\">console<\/span>.log(i);\n    }, <span class=\"hljs-number\">1000<\/span>);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The intention of the code is to output numbers from 0 to 4&nbsp;to the console every second. However, it outputs the number <code>5<\/code> five times:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">5\n5\n5\n5\n5<\/code><\/span><\/pre>\n\n\n<p>In this example, the variable <code>i<\/code> is a global variable. After the loop, its value is 5.  When the callback functions are passed to the <code><a href=\"https:\/\/www.javascripttutorial.net\/javascript-bom\/javascript-settimeout\/\">setTimeout()<\/a><\/code> function executes, they reference the same variable <code>i<\/code> with the value 5.<\/p>\n\n\n\n<p>In ES5, you can fix this issue by creating another scope so that each callback function references a new variable. And to create a new scope, you need to create a function. Typically, you use the <a href=\"https:\/\/www.javascripttutorial.net\/javascript-immediately-invoked-function-expression-iife\/\">IIFE<\/a> pattern as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">var<\/span> i = <span class=\"hljs-number\">0<\/span>; i &lt; <span class=\"hljs-number\">5<\/span>; i++) {\n    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">j<\/span>) <\/span>{\n        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n            <span class=\"hljs-built_in\">console<\/span>.log(j);\n        }, <span class=\"hljs-number\">1000<\/span>);\n    })(i);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">0\n1\n2\n3\n4<\/code><\/span><\/pre>\n\n\n<p>In ES6, the <code>let<\/code> keyword declares&nbsp;a new variable in each loop iteration. Therefore, you just need to replace the <code>var<\/code> keyword with the <code>let<\/code> keyword to fix the issue:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">let<\/span> i = <span class=\"hljs-number\">0<\/span>; i &lt; <span class=\"hljs-number\">5<\/span>; i++) {\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n        <span class=\"hljs-built_in\">console<\/span>.log(i);\n    }, <span class=\"hljs-number\">1000<\/span>);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To make the code completely ES6 style, you can use an <a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-arrow-function\/\">arrow function<\/a> as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">let<\/span> i = <span class=\"hljs-number\">0<\/span>; i &lt; <span class=\"hljs-number\">5<\/span>; i++) {\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> <span class=\"hljs-built_in\">console<\/span>.log(i), <span class=\"hljs-number\">1000<\/span>);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that you&#8217;ll learn more about the <a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-arrow-function\/\">arrow functions in the later tutorial<\/a>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Redeclaration<\/h2>\n\n\n\n<p>The <code>var<\/code> keyword allows you to redeclare a variable without any issue:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> counter = <span class=\"hljs-number\">0<\/span>;\n<span class=\"hljs-keyword\">var<\/span> counter;\n<span class=\"hljs-built_in\">console<\/span>.log(counter); <span class=\"hljs-comment\">\/\/ 0<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, redeclaring a variable using the <code>let<\/code> keyword will result in an error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> counter = <span class=\"hljs-number\">0<\/span>;\n<span class=\"hljs-keyword\">let<\/span> counter;\n<span class=\"hljs-built_in\">console<\/span>.log(counter);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Here&#8217;s the error message:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">Uncaught <span class=\"hljs-built_in\">SyntaxError<\/span>: Identifier <span class=\"hljs-string\">'counter'<\/span> has already been declared<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">JavaScript let variables and hoisting<\/h2>\n\n\n\n<p>Let&#8217;s examine the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">{\n    <span class=\"hljs-built_in\">console<\/span>.log(counter); <span class=\"hljs-comment\">\/\/ <\/span>\n    <span class=\"hljs-keyword\">let<\/span> counter = <span class=\"hljs-number\">10<\/span>;    \n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This code causes an error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">Uncaught <span class=\"hljs-built_in\">ReferenceError<\/span>: Cannot access <span class=\"hljs-string\">'counter'<\/span> before initialization<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, accessing the <code>counter<\/code> variable before declaring it causes a <code>ReferenceError<\/code>. You may think that a variable declaration using the <code>let<\/code> keyword does not <strong>hoist, <\/strong>but it does<strong>.<\/strong><\/p>\n\n\n\n<p>In fact, the JavaScript engine will hoist a variable declared by the <code>let<\/code> keyword to the top of the block. However, the JavaScript engine does not initialize the variable. Therefore, when you reference an uninitialized variable, you&#8217;ll get a <code>ReferenceError<\/code>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"tdz\">Temporal death zone (TDZ)<\/h2>\n\n\n\n<p>A variable declared by the <code>let<\/code> keyword has a so-called temporal dead zone (TDZ). The TDZ is the time from the start of the block until the variable declaration is processed.<\/p>\n\n\n\n<p>The following example illustrates&nbsp;that the temporal dead zone is&nbsp;time-based, not location-based<em>.<\/em><\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">{ <span class=\"hljs-comment\">\/\/ enter new scope, TDZ starts<\/span>\n    <span class=\"hljs-keyword\">let<\/span> log = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n        <span class=\"hljs-built_in\">console<\/span>.log(message); <span class=\"hljs-comment\">\/\/ messagedeclared later<\/span>\n    };\n\n    <span class=\"hljs-comment\">\/\/ This is the TDZ and accessing log<\/span>\n    <span class=\"hljs-comment\">\/\/ would cause a ReferenceError<\/span>\n\n    <span class=\"hljs-keyword\">let<\/span> message= <span class=\"hljs-string\">'Hello'<\/span>; <span class=\"hljs-comment\">\/\/ TDZ ends<\/span>\n    log(); <span class=\"hljs-comment\">\/\/ called outside TDZ<\/span>\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example:<\/p>\n\n\n\n<p>First, the curly brace starts a new block scope, therefore, the TDZ starts.<\/p>\n\n\n\n<p>Second, the <code>log()<\/code> function expression accesses the <code>message<\/code> variable. However, the <code>log()<\/code> function has not been executed yet.<\/p>\n\n\n\n<p>Third, declare the <code>message<\/code> variable and initialize its value to <code>'Hello'<\/code>. The time from the start of the block scope to the time that the <code>message<\/code> variable is accessed is called a <em>temporal death zone<\/em>. When the JavaScript engine processes the declaration, the TDZ ends.<\/p>\n\n\n\n<p>Finally, call the <code>log()<\/code> function that accesses the <code>message<\/code> variable outside of the TDZ.<\/p>\n\n\n\n<p>Note that if you access a variable declared by the <code>let<\/code> keyword in the TDZ, you&#8217;ll get a <code>ReferenceError<\/code> as illustrated in the following example.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">{ <span class=\"hljs-comment\">\/\/ TDZ starts<\/span>\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span> myVar); <span class=\"hljs-comment\">\/\/ undefined<\/span>\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span> message); <span class=\"hljs-comment\">\/\/ ReferenceError<\/span>\n    <span class=\"hljs-keyword\">let<\/span> message; <span class=\"hljs-comment\">\/\/ TDZ ends<\/span>\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Notice that <code>myVar<\/code> variable is a non-existing variable, therefore, its type is <a href=\"https:\/\/www.javascripttutorial.net\/javascript-data-types\/#undefined\">undefined<\/a>.<\/p>\n\n\n\n<p>The temporal death zone prevents you from accidentally referencing a variable before its declaration.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Summary<\/h3>\n\n\n\n<ul><li>Variables are declared using the <code>let<\/code> keyword are block-scoped, are not initialized to any value, and are not attached to the global object. <\/li><li>Redeclaring a variable using the <code>let<\/code> keyword will cause an error.<\/li><li>A temporal dead zone of a variable declared using the <code>let<\/code> keyword starts from the block until the initialization is evaluated.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"498\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-let\/\"\n\t\t\t\tdata-post-title=\"JavaScript let: Declaring Block-Scoped Variables\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"498\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-let\/\"\n\t\t\t\tdata-post-title=\"JavaScript let: Declaring Block-Scoped Variables\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how to use the JavaScript let keyword to declare block-scoped variables.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":113,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript let Keyword: Declaring Block-Scoped Variables in ES6<\/title>\n<meta name=\"description\" content=\"This tutorial introduces you to a new way to declare block-scoped variables using JavaScript let and explains the temporal death zone (TDZ) concept clearly.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-let\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript let Keyword: Declaring Block-Scoped Variables in ES6\" \/>\n<meta property=\"og:description\" content=\"This tutorial introduces you to a new way to declare block-scoped variables using JavaScript let and explains the temporal death zone (TDZ) concept clearly.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-let\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-08-17T04:47:53+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-let\/\",\"url\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-let\/\",\"name\":\"JavaScript let Keyword: Declaring Block-Scoped Variables in ES6\",\"isPartOf\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\"},\"datePublished\":\"2016-08-26T17:09:26+00:00\",\"dateModified\":\"2022-08-17T04:47:53+00:00\",\"description\":\"This tutorial introduces you to a new way to declare block-scoped variables using JavaScript let and explains the temporal death zone (TDZ) concept clearly.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-let\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.javascripttutorial.net\/es6\/javascript-let\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-let\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript let: Declaring Block-Scoped Variables\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\",\"url\":\"https:\/\/www.javascripttutorial.net\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.javascripttutorial.net\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript let Keyword: Declaring Block-Scoped Variables in ES6","description":"This tutorial introduces you to a new way to declare block-scoped variables using JavaScript let and explains the temporal death zone (TDZ) concept clearly.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.javascripttutorial.net\/es6\/javascript-let\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript let Keyword: Declaring Block-Scoped Variables in ES6","og_description":"This tutorial introduces you to a new way to declare block-scoped variables using JavaScript let and explains the temporal death zone (TDZ) concept clearly.","og_url":"https:\/\/www.javascripttutorial.net\/es6\/javascript-let\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-08-17T04:47:53+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/www.javascripttutorial.net\/es6\/javascript-let\/","url":"https:\/\/www.javascripttutorial.net\/es6\/javascript-let\/","name":"JavaScript let Keyword: Declaring Block-Scoped Variables in ES6","isPartOf":{"@id":"https:\/\/www.javascripttutorial.net\/#website"},"datePublished":"2016-08-26T17:09:26+00:00","dateModified":"2022-08-17T04:47:53+00:00","description":"This tutorial introduces you to a new way to declare block-scoped variables using JavaScript let and explains the temporal death zone (TDZ) concept clearly.","breadcrumb":{"@id":"https:\/\/www.javascripttutorial.net\/es6\/javascript-let\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.javascripttutorial.net\/es6\/javascript-let\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.javascripttutorial.net\/es6\/javascript-let\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":3,"name":"JavaScript let: Declaring Block-Scoped Variables"}]},{"@type":"WebSite","@id":"https:\/\/www.javascripttutorial.net\/#website","url":"https:\/\/www.javascripttutorial.net\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.javascripttutorial.net\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/498"}],"collection":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/comments?post=498"}],"version-history":[{"count":5,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/498\/revisions"}],"predecessor-version":[{"id":90230,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/498\/revisions\/90230"}],"up":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/media?parent=498"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}