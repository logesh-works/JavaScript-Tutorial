{"id":89494,"date":"2022-01-29T07:39:40","date_gmt":"2022-01-29T15:39:40","guid":{"rendered":"https:\/\/www.javascripttutorial.net\/?page_id=89494"},"modified":"2022-01-29T18:37:39","modified_gmt":"2022-01-30T02:37:39","slug":"javascript-try-catch-finally","status":"publish","type":"page","link":"https:\/\/www.javascripttutorial.net\/javascript-try-catch-finally\/","title":{"rendered":"JavaScript try&#8230;catch&#8230;finally"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use the JavaScript <code>try...catch...finally<\/code> statement to catch exceptions and execute a block whether the exceptions occur or not <\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"introduction-to-the-javascript-try-catch-finally-statement\">Introduction to the JavaScript try&#8230;catch&#8230;finally statement<\/h2>\n\n\n\n<p>The <code><a href=\"https:\/\/www.javascripttutorial.net\/javascript-try-catch\/\">try...catch<\/a><\/code> statement allows you to catch exceptions and handle them gracefully. Sometimes, you want to execute a block whether exceptions occur or not. In this case, you can use the <code>try...catch...finally<\/code> statement with the following syntax:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">try<\/span> {\n  <span class=\"hljs-comment\">\/\/ code may cause exceptions<\/span>\n} <span class=\"hljs-keyword\">catch<\/span> (error) {\n  <span class=\"hljs-comment\">\/\/ code to handle exceptions<\/span>\n} <span class=\"hljs-keyword\">finally<\/span> {\n  <span class=\"hljs-comment\">\/\/ code to execute whether exceptions occur or not<\/span>\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this syntax, the <code>finally<\/code> block always executes after the <code>try<\/code> and <code>catch<\/code> blocks complete and whether exceptions occur or not.<\/p>\n\n\n\n<p>The following flowchart illustrates how the <code>try...catch...finally<\/code> works:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><a href=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/01\/javascript-try-catch-finally.svg\"><img decoding=\"async\" src=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/01\/javascript-try-catch-finally.svg\" alt=\"JavaScript try...catch...finally\" class=\"wp-image-89496\"\/><\/a><\/figure><\/div>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"javascript-try-catch-finally-statement-example\">JavaScript try&#8230;catch&#8230;finally statement example<\/h2>\n\n\n\n<p>The following example illustrates how to use the <code>try...catch...finally<\/code> statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> result = <span class=\"hljs-number\">0<\/span>;\n<span class=\"hljs-keyword\">try<\/span> {\n  result = add(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>);\n} <span class=\"hljs-keyword\">catch<\/span> (e) {\n  <span class=\"hljs-built_in\">console<\/span>.log(e.message);\n} <span class=\"hljs-keyword\">finally<\/span> {\n  <span class=\"hljs-built_in\">console<\/span>.log({ result });\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">add<\/span> <span class=\"hljs-selector-tag\">is<\/span> <span class=\"hljs-selector-tag\">not<\/span> <span class=\"hljs-selector-tag\">defined<\/span>\n{ <span class=\"hljs-attribute\">result<\/span>: <span class=\"hljs-number\">0<\/span> }<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, declare the <code>result<\/code> variable and initialize its value with <code>0<\/code>.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> result = <span class=\"hljs-number\">0<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, call the <code>add()<\/code> function and assign the return value to the <code>result<\/code> variable in the <code>try<\/code> block. Because the <code>add()<\/code> function does not exist, the JavaScript engine raises an exception.<\/p>\n\n\n\n<p>Because of the exception, the statement in the <code>catch<\/code> block executes to show the error message.<\/p>\n\n\n\n<p>Third, output the <code>result<\/code> to the console in the <code>try<\/code> block. <\/p>\n\n\n\n<p>In the following example, we define the <code>add()<\/code> function and call it in the <code>try<\/code> block:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> add = <span class=\"hljs-function\">(<span class=\"hljs-params\">x, y<\/span>) =&gt;<\/span> x + y;\n\n<span class=\"hljs-keyword\">let<\/span> result = <span class=\"hljs-number\">0<\/span>;\n\n<span class=\"hljs-keyword\">try<\/span> {\n  result = add(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>);\n} <span class=\"hljs-keyword\">catch<\/span> (e) {\n  <span class=\"hljs-built_in\">console<\/span>.log(e.message);\n} <span class=\"hljs-keyword\">finally<\/span> {\n  <span class=\"hljs-built_in\">console<\/span>.log({ result });\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\">{ <span class=\"hljs-attribute\">result<\/span>: <span class=\"hljs-number\">30<\/span> }<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Because the <code>add()<\/code> function exists, no exception occurs in the <code>try<\/code> block. Therefore, the <code>finally<\/code> block outputs the value of the <code>result<\/code> variable, which is the sum of <code>10<\/code> and <code>20<\/code>. <\/p>\n\n\n\n<p>In both examples, the <code>finally<\/code> block always runs.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"try-catch-finally-and-return\">try&#8230;catch&#8230;finally and return<\/h2>\n\n\n\n<p>The <code>finally<\/code> block always executes whether exceptions occur or not. Also, you can do nothing to prevent it from executing including using a <code>return<\/code> statement. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">fn<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n  <span class=\"hljs-keyword\">try<\/span> {\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-number\">1<\/span>;\n  } <span class=\"hljs-keyword\">catch<\/span> {\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-number\">2<\/span>;\n  } <span class=\"hljs-keyword\">finally<\/span> {\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-number\">3<\/span>;\n  }\n}\n\n<span class=\"hljs-built_in\">console<\/span>.log(fn());\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">3<\/code><\/span><\/pre>\n\n\n<p>In this example, the <code>return<\/code> statement in the <code>try<\/code> block returns <code>1<\/code>. Hence, the <code>fn()<\/code> function should have returned <code>1<\/code>. However, it is not the case.<\/p>\n\n\n\n<p>Because the <code>finally <\/code>block always executes, the <code>return<\/code> statement in the <code>finally<\/code> block returns <code>3<\/code>. Therefore, the <code>fn()<\/code> function returns <code>3<\/code>.<\/p>\n\n\n\n<p>In other words, the <code>return<\/code> statements in the <code>try<\/code> and <code>catch<\/code> blocks are ignored in the <code>try...catch...finally<\/code> statement.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"summary\">Summary<\/h2>\n\n\n\n<ul><li>Use the <code>finally<\/code> clause in the <code>try...catch...finally<\/code> statement to execute a block whether exceptions occur or not.<\/li><li>The <code>try...catch...finally<\/code> statement ignores the <code>return<\/code> statement in the <code>try<\/code> and <code>catch<\/code> blocks because the <code>finally<\/code> block always executes.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"89494\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/javascript-try-catch-finally\/\"\n\t\t\t\tdata-post-title=\"JavaScript try&#8230;catch&#8230;finally\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"89494\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/javascript-try-catch-finally\/\"\n\t\t\t\tdata-post-title=\"JavaScript try&#8230;catch&#8230;finally\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you&#8217;ll learn how to use the JavaScript try&#8230;catch&#8230;finally statement to catch exceptions and execute a block whether the exceptions occur or not Introduction to the JavaScript try&#8230;catch&#8230;finally statement The try&#8230;catch statement allows you to catch exceptions and handle them gracefully. Sometimes, you want to execute a block whether exceptions occur or [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":110,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript try...catch...finally<\/title>\n<meta name=\"description\" content=\"In this tutorial, you&#039;ll learn how to use the JavaScript try...catch...finally statement to catch exceptions and execute a block whether the exceptions occur or not\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.javascripttutorial.net\/javascript-try-catch-finally\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript try...catch...finally\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you&#039;ll learn how to use the JavaScript try...catch...finally statement to catch exceptions and execute a block whether the exceptions occur or not\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.javascripttutorial.net\/javascript-try-catch-finally\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-30T02:37:39+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/01\/javascript-try-catch-finally.svg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.javascripttutorial.net\/javascript-try-catch-finally\/\",\"url\":\"https:\/\/www.javascripttutorial.net\/javascript-try-catch-finally\/\",\"name\":\"JavaScript try...catch...finally\",\"isPartOf\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\"},\"datePublished\":\"2022-01-29T15:39:40+00:00\",\"dateModified\":\"2022-01-30T02:37:39+00:00\",\"description\":\"In this tutorial, you'll learn how to use the JavaScript try...catch...finally statement to catch exceptions and execute a block whether the exceptions occur or not\",\"breadcrumb\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/javascript-try-catch-finally\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.javascripttutorial.net\/javascript-try-catch-finally\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.javascripttutorial.net\/javascript-try-catch-finally\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript try&#8230;catch&#8230;finally\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\",\"url\":\"https:\/\/www.javascripttutorial.net\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.javascripttutorial.net\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript try...catch...finally","description":"In this tutorial, you'll learn how to use the JavaScript try...catch...finally statement to catch exceptions and execute a block whether the exceptions occur or not","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.javascripttutorial.net\/javascript-try-catch-finally\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript try...catch...finally","og_description":"In this tutorial, you'll learn how to use the JavaScript try...catch...finally statement to catch exceptions and execute a block whether the exceptions occur or not","og_url":"https:\/\/www.javascripttutorial.net\/javascript-try-catch-finally\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-30T02:37:39+00:00","og_image":[{"url":"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/01\/javascript-try-catch-finally.svg"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/www.javascripttutorial.net\/javascript-try-catch-finally\/","url":"https:\/\/www.javascripttutorial.net\/javascript-try-catch-finally\/","name":"JavaScript try...catch...finally","isPartOf":{"@id":"https:\/\/www.javascripttutorial.net\/#website"},"datePublished":"2022-01-29T15:39:40+00:00","dateModified":"2022-01-30T02:37:39+00:00","description":"In this tutorial, you'll learn how to use the JavaScript try...catch...finally statement to catch exceptions and execute a block whether the exceptions occur or not","breadcrumb":{"@id":"https:\/\/www.javascripttutorial.net\/javascript-try-catch-finally\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.javascripttutorial.net\/javascript-try-catch-finally\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.javascripttutorial.net\/javascript-try-catch-finally\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":3,"name":"JavaScript try&#8230;catch&#8230;finally"}]},{"@type":"WebSite","@id":"https:\/\/www.javascripttutorial.net\/#website","url":"https:\/\/www.javascripttutorial.net\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.javascripttutorial.net\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/89494"}],"collection":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/comments?post=89494"}],"version-history":[{"count":5,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/89494\/revisions"}],"predecessor-version":[{"id":89503,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/89494\/revisions\/89503"}],"up":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/media?parent=89494"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}