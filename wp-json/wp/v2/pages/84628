{"id":84628,"date":"2019-12-10T02:18:30","date_gmt":"2019-12-10T10:18:30","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=84628"},"modified":"2022-01-25T17:36:30","modified_gmt":"2022-01-26T01:36:30","slug":"javascript-event-loop","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-event-loop\/","title":{"rendered":"JavaScript Event Loop"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the event loop in JavaScript and how JavaScript achieves the concurrency model based on the event loop.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"javascript-single-threaded-model\">JavaScript single-threaded model<\/h2>\n\n\n\n<p>JavaScript is a single-threaded programming language. This means that JavaScript can do only one thing at a single point in time.<\/p>\n\n\n\n<p>The JavaScript engine executes a script from the top of the file and works its way down. It creates the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-execution-context\/\">execution contexts<\/a>, pushes, and pops functions onto and off the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-call-stack\/\">call stack<\/a> in the execution phase.<\/p>\n\n\n\n<p>If a function takes a long time to execute, you cannot interact with the web browser during the function&#8217;s execution because the page hangs.<\/p>\n\n\n\n<p>A function that takes a long time to complete is called a blocking function. Technically, a blocking function blocks all the interactions on the webpage, such as mouse click. <\/p>\n\n\n\n<p>An example of a blocking function is a function that calls an API from a remote server. <\/p>\n\n\n\n<p>The following example uses a big loop to simulate a blocking function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">task<\/span>(<span class=\"hljs-params\">message<\/span>) <\/span>{\n    <span class=\"hljs-comment\">\/\/ emulate time consuming task<\/span>\n    <span class=\"hljs-keyword\">let<\/span> n = <span class=\"hljs-number\">10000000000<\/span>;\n    <span class=\"hljs-keyword\">while<\/span> (n &gt; <span class=\"hljs-number\">0<\/span>){\n        n--;\n    }\n    <span class=\"hljs-built_in\">console<\/span>.log(message);\n}\n\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Start script...'<\/span>);\ntask(<span class=\"hljs-string\">'Call an API'<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Done!'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we have a big <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-while-loop\/\">while<\/a><\/code> loop inside the <code>task()<\/code> function that emulates a time-consuming task. The <code>task()<\/code> function is a blocking function.<\/p>\n\n\n\n<p>The script hangs for a few seconds (depending on how fast the computer is) and issues the following output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">Start script...\nDownload a file.\nDone!<\/code><\/span><\/pre>\n\n\n<p>To execute the script, the JavaScript engine places the first call  <code>console.log()<\/code> on top of the call stack and executes it. Then, it places the <code>task()<\/code> function on top of the call stack and executes the function.<\/p>\n\n\n\n<p>However, it&#8217;ll take a while to complete the <code>task()<\/code> function. Therefore, you&#8217;ll see the message <code>'Download a file.'<\/code> a little time later. After the <code>task()<\/code> function completes, the JavaScript engine pops it off the call stack.<\/p>\n\n\n\n<p>Finally, the JavaScript engine places the last call to the <code>console.log('Done!')<\/code> function and executes it, which will be very fast.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" loading=\"lazy\" width=\"696\" height=\"442\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/javascript-event-loop-callstack.png\" alt=\"javascript event loop - callstack\" class=\"wp-image-84629\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/javascript-event-loop-callstack.png 696w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/javascript-event-loop-callstack-300x191.png 300w\" sizes=\"(max-width: 696px) 100vw, 696px\" \/><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"callbacks-to-the-rescue\">Callbacks to the rescue<\/h2>\n\n\n\n<p>To prevent a blocking function from blocking other activities, you typically put it in a <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-callback\/\">callback function<\/a> for execution later. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Start script...'<\/span>);\n\nsetTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n    task(<span class=\"hljs-string\">'Download a file.'<\/span>);\n}, <span class=\"hljs-number\">1000<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Done!'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, you&#8217;ll see the message <code>'Start script...'<\/code> and <code>'Done!'<\/code> immediately. And after that, you&#8217;ll see the message <code>'Download a file'<\/code>.<\/p>\n\n\n\n<p>Here&#8217;s the output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">Start script...\nDone!\nDownload a file.<\/code><\/span><\/pre>\n\n\n<p>As mentioned earlier, the JavaScript engine can do only one thing at a time. However, it&#8217;s more precise to say that the JavaScript runtime can do one thing at a time.<\/p>\n\n\n\n<p>The web browser also has other components, not just the JavaScript engine. <\/p>\n\n\n\n<p>When you call the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-bom\/javascript-settimeout\/\">setTimeout()<\/a><\/code> function, make a <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/\">fetch request<\/a>, or click a button, the web browser can do these activities concurrently and asynchronously.<\/p>\n\n\n\n<p>The <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-bom\/javascript-settimeout\/\">setTimeout()<\/a><\/code>, fetch requests, and <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/\">DOM<\/a> events are parts of the <a href=\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/\">Web APIs<\/a> of the web browser.<\/p>\n\n\n\n<p>In our example, when calling the <code>setTimeout()<\/code> function, the JavaScript engine places it on the call stack, and the Web API creates a timer that expires in 1 second.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" loading=\"lazy\" width=\"685\" height=\"489\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/javascript-event-loop-step-1.png\" alt=\"javascript event loop - step 1\" class=\"wp-image-84631\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/javascript-event-loop-step-1.png 685w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/javascript-event-loop-step-1-300x214.png 300w\" sizes=\"(max-width: 685px) 100vw, 685px\" \/><\/figure>\n\n\n\n<p>Then JavaScript engine place the <code>task()<\/code> function is into a queue called a callback queue or a task queue:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" loading=\"lazy\" width=\"679\" height=\"491\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/javascript-event-loop-step-2.png\" alt=\"javascript event loop - step 2\" class=\"wp-image-84632\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/javascript-event-loop-step-2.png 679w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/javascript-event-loop-step-2-300x217.png 300w\" sizes=\"(max-width: 679px) 100vw, 679px\" \/><\/figure>\n\n\n\n<p>The event loop is a constantly running process that monitors both the callback queue and the call stack.<\/p>\n\n\n\n<p>If the call stack is not empty, the event loop waits until it is empty and places the next function from the callback queue to the call stack. If the callback queue is empty, nothing will happen:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" loading=\"lazy\" width=\"681\" height=\"494\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/javascript-event-loop-step-3.png\" alt=\"javascript event loop - step 3\" class=\"wp-image-84633\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/javascript-event-loop-step-3.png 681w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/javascript-event-loop-step-3-300x218.png 300w\" sizes=\"(max-width: 681px) 100vw, 681px\" \/><\/figure>\n\n\n\n<p>See another example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Hi!'<\/span>);\n\nsetTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Execute immediately.'<\/span>);\n}, <span class=\"hljs-number\">0<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Bye!'<\/span>);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the timeout is 0 second, so the message <code>'Execute immediately.'<\/code> should appear before the message <code>'Bye!'<\/code>. However, it doesn&#8217;t work like that.<\/p>\n\n\n\n<p>The JavaScript engine places the following function call on the callback queue and executes it when the call stack is empty. In other words, the JavaScript engine executes it after the <code>console.log('Bye!')<\/code>.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Execute immediately.'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Here&#8217;s the output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">Hi!\nBye!\nExecute immediately.<\/code><\/span><\/pre>\n\n\n<p>The following picture illustrates JavaScript runtime, Web API, Call stack, and Event loop:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" loading=\"lazy\" width=\"712\" height=\"397\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/javascript-event-loop.png\" alt=\"javascript event loop\" class=\"wp-image-84634\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/javascript-event-loop.png 712w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/javascript-event-loop-300x167.png 300w\" sizes=\"(max-width: 712px) 100vw, 712px\" \/><\/figure>\n\n\n\n<p>In this tutorial, you have learned about the JavaScript event loop, a constantly running process that coordinates the tasks between the call stack and callback queue to achieve concurrency.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"84628\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-event-loop\/\"\n\t\t\t\tdata-post-title=\"JavaScript Event Loop\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"84628\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-event-loop\/\"\n\t\t\t\tdata-post-title=\"JavaScript Event Loop\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about the event loop in JavaScript and how JavaScript achieves the concurrency model based on the event loop.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":120,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>A Visual Explanation of JavaScript Event Loop<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about the event loop in JavaScript and how JavaScript achieves the concurrency model based on the event loop.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-event-loop\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"A Visual Explanation of JavaScript Event Loop\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you will learn about the event loop in JavaScript and how JavaScript achieves the concurrency model based on the event loop.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-event-loop\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-26T01:36:30+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/javascript-event-loop-callstack.png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-event-loop\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-event-loop\/\",\"name\":\"A Visual Explanation of JavaScript Event Loop\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2019-12-10T10:18:30+00:00\",\"dateModified\":\"2022-01-26T01:36:30+00:00\",\"description\":\"In this tutorial, you will learn about the event loop in JavaScript and how JavaScript achieves the concurrency model based on the event loop.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-event-loop\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-event-loop\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-event-loop\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Event Loop\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"A Visual Explanation of JavaScript Event Loop","description":"In this tutorial, you will learn about the event loop in JavaScript and how JavaScript achieves the concurrency model based on the event loop.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-event-loop\/","og_locale":"en_US","og_type":"article","og_title":"A Visual Explanation of JavaScript Event Loop","og_description":"In this tutorial, you will learn about the event loop in JavaScript and how JavaScript achieves the concurrency model based on the event loop.","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-event-loop\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-26T01:36:30+00:00","og_image":[{"url":"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2019\/12\/javascript-event-loop-callstack.png"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-event-loop\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-event-loop\/","name":"A Visual Explanation of JavaScript Event Loop","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2019-12-10T10:18:30+00:00","dateModified":"2022-01-26T01:36:30+00:00","description":"In this tutorial, you will learn about the event loop in JavaScript and how JavaScript achieves the concurrency model based on the event loop.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-event-loop\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-event-loop\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-event-loop\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript Event Loop"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/84628"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=84628"}],"version-history":[{"count":4,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/84628\/revisions"}],"predecessor-version":[{"id":89419,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/84628\/revisions\/89419"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=84628"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}