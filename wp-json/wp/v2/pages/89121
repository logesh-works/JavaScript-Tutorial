{"id":89121,"date":"2022-01-19T23:35:59","date_gmt":"2022-01-20T07:35:59","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=89121"},"modified":"2022-01-19T23:53:43","modified_gmt":"2022-01-20T07:53:43","slug":"javascript-top-level-await","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-top-level-await\/","title":{"rendered":"JavaScript Top-level await"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the JavaScript top-level await and its use cases. <\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the JavaScript top-level await<\/h2>\n\n\n\n<p>ES2020 introduced the top-level await feature that allows a module to behave like an <code>async<\/code> function. A <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/es6-modules\/\">module<\/a> that imports the top-level await module will wait for it to load before evaluating its body.<\/p>\n\n\n\n<p>To better understand the top-level await feature, we&#8217;ll take an example:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-top-level-await.svg\"><img decoding=\"async\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-top-level-await.svg\" alt=\"\" class=\"wp-image-89125\"\/><\/a><\/figure>\n\n\n\n<p>In this example, we&#8217;ll have three files: <code>index.html<\/code>, <code>app.mjs<\/code>, and <code>user.mjs<\/code>:<\/p>\n\n\n\n<ul><li>The <code>index.html<\/code> uses the <code>app.mjs<\/code> file.<\/li><li>The <code>app.mjs<\/code> imports the <code>user.mjs<\/code> file.<\/li><li>The <code>user.mjs<\/code> fetches the user data in JSON format from an API with the URL endpoint <a href=\"https:\/\/jsonplaceholder.typicode.com\/users\">https:\/\/jsonplaceholder.typicode.com\/users<\/a><\/li><\/ul>\n\n\n\n<p>Here&#8217;s the index file that uses the app.mjs module:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html<\/span> <span class=\"hljs-attr\">lang<\/span>=<span class=\"hljs-string\">\"en\"<\/span>&gt;<\/span>\r\n\r<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head<\/span>&gt;<\/span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta<\/span> <span class=\"hljs-attr\">charset<\/span>=<span class=\"hljs-string\">\"UTF-8\"<\/span>&gt;<\/span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta<\/span> <span class=\"hljs-attr\">name<\/span>=<span class=\"hljs-string\">\"viewport\"<\/span> <span class=\"hljs-attr\">content<\/span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"<\/span>&gt;<\/span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title<\/span>&gt;<\/span>JavaScript Top-Level Await Demo<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">title<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">head<\/span>&gt;<\/span>\r\n\r<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body<\/span>&gt;<\/span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div<\/span> <span class=\"hljs-attr\">class<\/span>=<span class=\"hljs-string\">\"container\"<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">div<\/span>&gt;<\/span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"module\"<\/span> <span class=\"hljs-attr\">src<\/span>=<span class=\"hljs-string\">\"app.mjs\"<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">script<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">body<\/span>&gt;<\/span>\r\n\r<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">html<\/span>&gt;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following shows the <code>user.mjs<\/code> file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> users;\r\n\r\n<span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-keyword\">async<\/span> (<\/span>) =&gt;<\/span> {\r\n  <span class=\"hljs-keyword\">const<\/span> url = <span class=\"hljs-string\">'https:\/\/jsonplaceholder.typicode.com\/users'<\/span>;\r\n  <span class=\"hljs-keyword\">const<\/span> response = <span class=\"hljs-keyword\">await<\/span> fetch(url);\r\n  users = <span class=\"hljs-keyword\">await<\/span> response.json();\r\n})();\r\n\r\n<span class=\"hljs-keyword\">export<\/span> { users };<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>user.mjs<\/code> module uses the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/\">fetch API<\/a> to get the users in JSON format from an API and export it.<\/p>\n\n\n\n<p>Because we can only use the <code>await<\/code> keyword inside an <code>async<\/code> function (before ES2020), we need to wrap the API call inside an immediately invoked async function expression (IIAFE).<\/p>\n\n\n\n<p>The following shows the <code>app.mjs<\/code> module:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> { users } <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/user.mjs'<\/span>;\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">render<\/span>(<span class=\"hljs-params\">users<\/span>) <\/span>{\r\n  <span class=\"hljs-keyword\">if<\/span> (!users) {\r\n    <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-string\">'The user list is not available'<\/span>;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">const<\/span> list = users\r\n    .map(<span class=\"hljs-function\">(<span class=\"hljs-params\">user<\/span>) =&gt;<\/span> {\r\n      <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">`&lt;li&gt; <span class=\"hljs-subst\">${user.name}<\/span>(&lt;a href=\"email:<span class=\"hljs-subst\">${user.email}<\/span>\"&gt;<span class=\"hljs-subst\">${user.email}<\/span>&lt;\/a&gt;)&lt;\/li&gt;`<\/span>;\r\n    })\r\n    .join(<span class=\"hljs-string\">''<\/span>);\r\n\r\n  <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">`&lt;ol&gt;<span class=\"hljs-subst\">${list}<\/span>&lt;\/ol&gt;`<\/span>;\r\n}\r\n\r\n<span class=\"hljs-keyword\">const<\/span> container = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'.container'<\/span>);\r\n<span class=\"hljs-keyword\">try<\/span> {\r\n  container.innerHTML = render(users);\r\n} <span class=\"hljs-keyword\">catch<\/span> (e) {\r\n  container.innerHTML = e;\r\n}\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, import <code>users<\/code> from the <code>user.mjs<\/code> module:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> { users } <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/user.mjs'<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, create a <code>render()<\/code> function that renders the user list to an ordered list in HTML format:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">render<\/span>(<span class=\"hljs-params\">users<\/span>) <\/span>{\r\n  <span class=\"hljs-keyword\">if<\/span> (!users) {\r\n    <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-string\">'The user list is not available.'<\/span>;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">const<\/span> list = users\r\n    .map(<span class=\"hljs-function\">(<span class=\"hljs-params\">user<\/span>) =&gt;<\/span> {\r\n      <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">`&lt;li&gt; <span class=\"hljs-subst\">${user.name}<\/span>(&lt;a href=\"email:<span class=\"hljs-subst\">${user.email}<\/span>\"&gt;<span class=\"hljs-subst\">${user.email}<\/span>&lt;\/a&gt;)&lt;\/li&gt;`<\/span>;\r\n    })\r\n    .join(<span class=\"hljs-string\">''<\/span>);\r\n\r\n  <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">`&lt;ol&gt;<span class=\"hljs-subst\">${list}<\/span>&lt;\/ol&gt;`<\/span>;\r\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Third, add the user list to the HTML element with the class <code>.container<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> container = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'.container'<\/span>);\r\n<span class=\"hljs-keyword\">try<\/span> {\r\n  container.innerHTML = render(users);\r\n} <span class=\"hljs-keyword\">catch<\/span> (e) {\r\n  container.innerHTML = e;\r\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you open the <code>index.html<\/code>, you&#8217;ll see the following message:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">The user <span class=\"hljs-keyword\">list<\/span> is not available.<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following shows the main flow:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><a href=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-top-level-await-example.svg\"><img decoding=\"async\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-top-level-await-example.svg\" alt=\"JavaScript top-level await example\" class=\"wp-image-89131\"\/><\/a><\/figure><\/div>\n\n\n\n<p>In this flow:<\/p>\n\n\n\n<ul><li>First, the <code>app.mjs<\/code> imports the <code>user.mjs<\/code> module.<\/li><li>Second, the <code>user.mjs<\/code> module executes and make an API call.<\/li><li>Third, while the second step is still on-going, the <code>app.mjs<\/code> starts using the <code>users<\/code> data imported from the <code>user.mjs<\/code> module. <\/li><\/ul>\n\n\n\n<p>Since the step 2 has not completed, the <code>users<\/code> variable was <code>undefined<\/code>. Therefore, you saw the error message on the page.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Workaround<\/h3>\n\n\n\n<p>To fix the issue, you can export a <code>Promise<\/code> from the <code>user.mjs<\/code> module and wait for the API call to complete before using its result.<\/p>\n\n\n\n<p>The following shows the new version of the <code>user.mjs<\/code> module:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> users;\r\n\r\n<span class=\"hljs-keyword\">export<\/span> <span class=\"hljs-keyword\">default<\/span> (<span class=\"hljs-keyword\">async<\/span> () =&gt; {\r\n  <span class=\"hljs-keyword\">const<\/span> url = <span class=\"hljs-string\">'https:\/\/jsonplaceholder.typicode.com\/users'<\/span>;\r\n  <span class=\"hljs-keyword\">const<\/span> response = <span class=\"hljs-keyword\">await<\/span> fetch(url);\r\n  users = <span class=\"hljs-keyword\">await<\/span> response.json();\r\n})();\r\n\r\n<span class=\"hljs-keyword\">export<\/span> { users };<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this new version, the user.mjs model exports the <code>users<\/code>  and a <code>Promise<\/code> as a default export.<\/p>\n\n\n\n<p>In the <code>app.mjs<\/code> imports the <code>promise<\/code> and <code>users<\/code> from the <code>user.mjs<\/code> file and calls then <code>then()<\/code> method of the <code>promise<\/code> as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> promise, { users } <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/user.mjs'<\/span>;\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">render<\/span>(<span class=\"hljs-params\">users<\/span>) <\/span>{\r\n  <span class=\"hljs-keyword\">if<\/span> (!users) {\r\n    <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-string\">'The user list is not available.'<\/span>;\r\n  }\r\n  <span class=\"hljs-keyword\">let<\/span> list = users\r\n    .map(<span class=\"hljs-function\">(<span class=\"hljs-params\">user<\/span>) =&gt;<\/span> {\r\n      <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">`&lt;li&gt; <span class=\"hljs-subst\">${user.name}<\/span>(&lt;a href=\"email:<span class=\"hljs-subst\">${user.email}<\/span>\"&gt;<span class=\"hljs-subst\">${user.email}<\/span>&lt;\/a&gt;)&lt;\/li&gt;`<\/span>;\r\n    })\r\n    .join(<span class=\"hljs-string\">' '<\/span>);\r\n\r\n  <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">`&lt;ol&gt;<span class=\"hljs-subst\">${list}<\/span>&lt;\/ol&gt;`<\/span>;\r\n}\r\n\r\npromise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\r\n  <span class=\"hljs-keyword\">let<\/span> container = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'.container'<\/span>);\r\n  <span class=\"hljs-keyword\">try<\/span> {\r\n    container.innerHTML = render(users);\r\n  } <span class=\"hljs-keyword\">catch<\/span> (error) {\r\n    container.innerHTML = error;\r\n  }\r\n});\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, import <code>promise<\/code> and <code>users<\/code> from the <code>user.mjs<\/code> module:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> promise, { users } <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/user.mjs'<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, call the <code>then()<\/code> method of the promise and wait for the API call to complete to use its results:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">promise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\r\n  <span class=\"hljs-keyword\">let<\/span> container = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'.container'<\/span>);\r\n  <span class=\"hljs-keyword\">try<\/span> {\r\n    container.innerHTML = render(users);\r\n  } <span class=\"hljs-keyword\">catch<\/span> (error) {\r\n    container.innerHTML = error;\r\n  }\r\n});<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Now, if you open the <code>index.html<\/code>, you&#8217;ll see a list of users. However, you need to know the right promise to wait for it when you use the module. <\/p>\n\n\n\n<p>ES2022 introduc in this workaroundes the top-level await module to resolve this issue.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Using the top-level await<\/h3>\n\n\n\n<p>First, change the <code>user.mjs<\/code> to the following:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> url = <span class=\"hljs-string\">'https:\/\/jsonplaceholder.typicode.com\/users'<\/span>;\r\n<span class=\"hljs-keyword\">const<\/span> response = <span class=\"hljs-keyword\">await<\/span> fetch(url);\r\n<span class=\"hljs-keyword\">let<\/span> users = <span class=\"hljs-keyword\">await<\/span> response.json();\r\n\r\n<span class=\"hljs-keyword\">export<\/span> { users };<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this module, you can use the <code>await<\/code> keyword without placing a statement inside an <code>async<\/code> function.<\/p>\n\n\n\n<p>Second, import the users from the <code>user.mjs<\/code> module and use it:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> { users } <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">'.\/user.mjs'<\/span>;\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">render<\/span>(<span class=\"hljs-params\">users<\/span>) <\/span>{\r\n  <span class=\"hljs-keyword\">if<\/span> (!users) {\r\n    <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-string\">'The user list is not available.'<\/span>;\r\n  }\r\n  <span class=\"hljs-keyword\">let<\/span> list = users\r\n    .map(<span class=\"hljs-function\">(<span class=\"hljs-params\">user<\/span>) =&gt;<\/span> {\r\n      <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">`&lt;li&gt; <span class=\"hljs-subst\">${user.name}<\/span>(&lt;a href=\"email:<span class=\"hljs-subst\">${user.email}<\/span>\"&gt;<span class=\"hljs-subst\">${user.email}<\/span>&lt;\/a&gt;)&lt;\/li&gt;`<\/span>;\r\n    })\r\n    .join(<span class=\"hljs-string\">' '<\/span>);\r\n\r\n  <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">`&lt;ol&gt;<span class=\"hljs-subst\">${list}<\/span>&lt;\/ol&gt;`<\/span>;\r\n}\r\n\r\n<span class=\"hljs-keyword\">let<\/span> container = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'.container'<\/span>);\r\n\r\n<span class=\"hljs-keyword\">try<\/span> {\r\n  container.innerHTML = render(users);\r\n} <span class=\"hljs-keyword\">catch<\/span> (error) {\r\n  container.innerHTML = error;\r\n}\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this case, the <code>app.mjs<\/code> module will wait for the <code>user.mjs<\/code> module to complete before executing its body.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">JavaScript top-level await use cases<\/h2>\n\n\n\n<p>When do you use the top-level await? Here are some use cases.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Dynamic dependency pathing<\/h3>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> words = <span class=\"hljs-keyword\">await<\/span> <span class=\"hljs-keyword\">import<\/span>(<span class=\"hljs-string\">`\/i18n\/<span class=\"hljs-subst\">${navigator.language}<\/span>`<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the top-level await allows modules to use runtime values to decide the dependencies, which is useful for the following scenarios:<\/p>\n\n\n\n<ul><li>Internationalization (i18n)<\/li><li>Development \/ production environment splits.<\/li><\/ul>\n\n\n\n<h3 class=\"wp-block-heading\">Dependency fallback<\/h3>\n\n\n\n<p>In this case, you can use the top-level await to load a module from a server (cdn1). And if it fails, you can load it from a backup server (cdn2):<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> <span class=\"hljs-built_in\">module<\/span>;\r\n<span class=\"hljs-keyword\">try<\/span> {\r\n  <span class=\"hljs-built_in\">module<\/span> = <span class=\"hljs-keyword\">await<\/span> <span class=\"hljs-keyword\">import<\/span>(<span class=\"hljs-string\">'https:\/\/cdn1.com\/module'<\/span>);\r\n} <span class=\"hljs-keyword\">catch<\/span> {\r\n  <span class=\"hljs-built_in\">module<\/span> = <span class=\"hljs-keyword\">await<\/span> <span class=\"hljs-keyword\">import<\/span>(<span class=\"hljs-string\">'https:\/\/cdn2.com\/module'<\/span>);\r\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>A top-level await module acts like an <code>async<\/code> function.<\/li><li>When a module imports a top-level await module, it waits for the top-level await module to complete before evaluating its body.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"89121\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-top-level-await\/\"\n\t\t\t\tdata-post-title=\"JavaScript Top-level await\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"89121\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-top-level-await\/\"\n\t\t\t\tdata-post-title=\"JavaScript Top-level await\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you&#8217;ll learn about the JavaScript top-level await and its use cases. Introduction to the JavaScript top-level await ES2020 introduced the top-level await feature that allows a module to behave like an async function. A module that imports the top-level await module will wait for it to load before evaluating its body. [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":105,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Top-level await<\/title>\n<meta name=\"description\" content=\"In this tutorial, you&#039;ll learn about the JavaScript top-level await and its use cases.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-top-level-await\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Top-level await\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you&#039;ll learn about the JavaScript top-level await and its use cases.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-top-level-await\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-20T07:53:43+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-top-level-await.svg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-top-level-await\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-top-level-await\/\",\"name\":\"JavaScript Top-level await\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2022-01-20T07:35:59+00:00\",\"dateModified\":\"2022-01-20T07:53:43+00:00\",\"description\":\"In this tutorial, you'll learn about the JavaScript top-level await and its use cases.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-top-level-await\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-top-level-await\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-top-level-await\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Top-level await\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Top-level await","description":"In this tutorial, you'll learn about the JavaScript top-level await and its use cases.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-top-level-await\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Top-level await","og_description":"In this tutorial, you'll learn about the JavaScript top-level await and its use cases.","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-top-level-await\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-20T07:53:43+00:00","og_image":[{"url":"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-top-level-await.svg"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-top-level-await\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-top-level-await\/","name":"JavaScript Top-level await","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2022-01-20T07:35:59+00:00","dateModified":"2022-01-20T07:53:43+00:00","description":"In this tutorial, you'll learn about the JavaScript top-level await and its use cases.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-top-level-await\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-top-level-await\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-top-level-await\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript Top-level await"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/89121"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=89121"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/89121\/revisions"}],"predecessor-version":[{"id":89134,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/89121\/revisions\/89134"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=89121"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}