{"id":88913,"date":"2022-01-14T21:35:48","date_gmt":"2022-01-15T05:35:48","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=88913"},"modified":"2022-01-14T21:35:50","modified_gmt":"2022-01-15T05:35:50","slug":"javascript-number-type","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-number-type\/","title":{"rendered":"JavaScript Number Type"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the JavaScript&nbsp;<code>Number<\/code> type&nbsp;and its useful methods for&nbsp;working with numbers effectively.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to JavaScript Number type<\/h2>\n\n\n\n<p>Besides the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-data-types\/#number\">primitive number type<\/a>, JavaScript also provides the <code>Number<\/code> reference type for numeric values. <\/p>\n\n\n\n<p>To create a <code>Number<\/code> object, you use the <code>Number<\/code> constructor and pass in a number value as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> numberObject = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Number<\/span>(<span class=\"hljs-number\">100<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This example defined a <code>numberObject<\/code>&nbsp;with a numeric value of&nbsp;<code>100<\/code>.<\/p>\n\n\n\n<p>To get the &nbsp;primitive value out of a <code>Number<\/code> object, you use the <code>valueOf()<\/code> method as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(numberObject.valueOf()); <span class=\"hljs-comment\">\/\/ 100<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To get a number value as a string, you use the <code>toString()<\/code> or <code>toLocaleString()<\/code> methods. <\/p>\n\n\n\n<p>The <code>toString()<\/code> method accepts an optional argument that determines the radix in which to present the number. The radix (or base) is the number of unique digits that represent numbers in a positional numeral system. <\/p>\n\n\n\n<p>For example, the decimal system uses ten digits from 0 through 9, therefore, the radix is 10.<\/p>\n\n\n\n<p>See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> aNumber = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Number<\/span>(<span class=\"hljs-number\">10<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(aNumber.toString()); <span class=\"hljs-comment\">\/\/ \"10\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example the <code>aNumber<\/code> has a primitive value of 10, therefore, the <code>toString()<\/code> method returns 10 in the&nbsp;decimal system. <\/p>\n\n\n\n<p>However, the following example&nbsp;returns the binary form of the <code>aNumber<\/code> variable.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(aNumber.toString(<span class=\"hljs-number\">2<\/span>)); <span class=\"hljs-comment\">\/\/ \"1010\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you call&nbsp;a method on a primitive number value, JavaScript will convert it into a <code>Number<\/code> object temporarily. This feature is called <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-primitive-wrapper-types\/\">primitive wrapper types in JavaScript<\/a>. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> x = <span class=\"hljs-number\">10<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(x.toString(<span class=\"hljs-number\">16<\/span>)); <span class=\"hljs-comment\">\/\/ \"a\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Formatting&nbsp;numbers<\/h2>\n\n\n\n<p>To format a number with a specified number of decimal points, you use the&nbsp;<code>toFixed()<\/code> method. <\/p>\n\n\n\n<p>The <code>toFixed()<\/code> method accepts an argument that indicates how many decimal points should be used.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">numberObject<\/span><span class=\"hljs-selector-class\">.toFixed<\/span>(<span class=\"hljs-selector-tag\">decimalPlaces<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>toFixed()<\/code> method returns the corresponding string of the number using fixed-point notation. Here is an example.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> distance = <span class=\"hljs-number\">19.006<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(distance.toFixed(<span class=\"hljs-number\">2<\/span>)); <span class=\"hljs-comment\">\/\/ 19.01<\/span>\n\ndistance = <span class=\"hljs-number\">19.004<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(distance.toFixed(<span class=\"hljs-number\">2<\/span>)); <span class=\"hljs-comment\">\/\/ 19.00<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It&#8217;s important to note that web browsers may use rounding methods differently. Therefore, you should be careful when using the <code>toFixed()<\/code> method especially for applications that deal with monetary values.<\/p>\n\n\n\n<p>To format a number in e-notation, you use the <code>toExponential()<\/code> method as shown in the following example.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> x = <span class=\"hljs-number\">10<\/span>, y = <span class=\"hljs-number\">100<\/span>, z = <span class=\"hljs-number\">1000<\/span>;\n\n<span class=\"hljs-built_in\">console<\/span>.log(x.toExponential());\n<span class=\"hljs-built_in\">console<\/span>.log(y.toExponential());\n<span class=\"hljs-built_in\">console<\/span>.log(z.toExponential());\n\n<span class=\"hljs-comment\">\/\/ \"1e+1\"<\/span>\n<span class=\"hljs-comment\">\/\/ \"1e+2\"<\/span>\n<span class=\"hljs-comment\">\/\/ \"1e+3\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To get a string representation of a number object to the specified precision, you use the <code>toPrecision()<\/code> method.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">numberObject<\/span><span class=\"hljs-selector-class\">.toPrecision<\/span>(<span class=\"hljs-selector-tag\">precision<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>precision<\/code> argument determines the number of significant digits.<\/p>\n\n\n\n<p>The <code>toPrecision()<\/code> method returns the string representation of a&nbsp;<code>Number<\/code> object in exponential notation or fixed point rounded to precision significant digits.<\/p>\n\n\n\n<p>Notice that if you omit the precision argument, the <code>toPrecision()<\/code> method will behave like the <code>toString()<\/code> method. See the following examples:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> x = <span class=\"hljs-number\">9.12345<\/span>;\n\n<span class=\"hljs-built_in\">console<\/span>.log(x.toPrecision());    <span class=\"hljs-comment\">\/\/ '9.12345'<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(x.toPrecision(<span class=\"hljs-number\">4<\/span>));   <span class=\"hljs-comment\">\/\/ '9.123'<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(x.toPrecision(<span class=\"hljs-number\">3<\/span>));   <span class=\"hljs-comment\">\/\/ '9.12'<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(x.toPrecision(<span class=\"hljs-number\">2<\/span>));   <span class=\"hljs-comment\">\/\/ '9.1'<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(x.toPrecision(<span class=\"hljs-number\">1<\/span>));   <span class=\"hljs-comment\">\/\/ '9'<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The e-notation may be returned in some cases for example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">x = <span class=\"hljs-number\">123.5<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(x.toPrecision(<span class=\"hljs-number\">2<\/span>)); <span class=\"hljs-comment\">\/\/ \"1.2e+2\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">JavaScript Number object&nbsp;vs. primitive number<\/h2>\n\n\n\n<p>The following table illustrates the differences between a <code>Number<\/code> object and a primitive number:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>&nbsp;Operator<\/th><th>Number object<\/th><th>Number value<\/th><\/tr><\/thead><tbody><tr><td>&nbsp;<code>typeof<\/code><\/td><td>&nbsp;<code>\"object\"<\/code><\/td><td>&nbsp;<code>\"number\"<\/code><\/td><\/tr><tr><td>&nbsp;<code>instanceof<\/code> <code>Number<\/code><\/td><td>&nbsp;<code>true<\/code><\/td><td>&nbsp;<code>false<\/code><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>And here are examples:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> numberObject = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Number<\/span>(<span class=\"hljs-number\">10<\/span>);\n<span class=\"hljs-keyword\">let<\/span> number = <span class=\"hljs-number\">10<\/span>;\n\n<span class=\"hljs-comment\">\/\/ typeof<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span> numberObject);\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span> number);\n<span class=\"hljs-comment\">\/\/ instanceof<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(numberObject <span class=\"hljs-keyword\">instanceof<\/span> <span class=\"hljs-built_in\">Number<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(number <span class=\"hljs-keyword\">instanceof<\/span> <span class=\"hljs-built_in\">Number<\/span>); <span class=\"hljs-comment\">\/\/ false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this tutorial, you have learned about the <code>Number<\/code> type and some useful methods for formatting numbers.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"88913\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-number-type\/\"\n\t\t\t\tdata-post-title=\"JavaScript Number Type\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"88913\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-number-type\/\"\n\t\t\t\tdata-post-title=\"JavaScript Number Type\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you will learn about the JavaScript&nbsp;Number type&nbsp;and its useful methods for&nbsp;working with numbers effectively. Introduction to JavaScript Number type Besides the primitive number type, JavaScript also provides the Number reference type for numeric values. To create a Number object, you use the Number constructor and pass in a number value as [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":129,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Number Type<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about the JavaScript\u00a0Number type\u00a0and its useful methods for\u00a0working with numbers effectively.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-number-type\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Number Type\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you will learn about the JavaScript\u00a0Number type\u00a0and its useful methods for\u00a0working with numbers effectively.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-number-type\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-15T05:35:50+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-number-type\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-number-type\/\",\"name\":\"JavaScript Number Type\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2022-01-15T05:35:48+00:00\",\"dateModified\":\"2022-01-15T05:35:50+00:00\",\"description\":\"In this tutorial, you will learn about the JavaScript\u00a0Number type\u00a0and its useful methods for\u00a0working with numbers effectively.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-number-type\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-number-type\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-number-type\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Number Type\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Number Type","description":"In this tutorial, you will learn about the JavaScript\u00a0Number type\u00a0and its useful methods for\u00a0working with numbers effectively.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-number-type\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Number Type","og_description":"In this tutorial, you will learn about the JavaScript\u00a0Number type\u00a0and its useful methods for\u00a0working with numbers effectively.","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-number-type\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-15T05:35:50+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-number-type\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-number-type\/","name":"JavaScript Number Type","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2022-01-15T05:35:48+00:00","dateModified":"2022-01-15T05:35:50+00:00","description":"In this tutorial, you will learn about the JavaScript\u00a0Number type\u00a0and its useful methods for\u00a0working with numbers effectively.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-number-type\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-number-type\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-number-type\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript Number Type"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/88913"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=88913"}],"version-history":[{"count":2,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/88913\/revisions"}],"predecessor-version":[{"id":88915,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/88913\/revisions\/88915"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=88913"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}