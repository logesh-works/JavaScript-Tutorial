{"id":218,"date":"2016-08-08T01:04:53","date_gmt":"2016-08-08T08:04:53","guid":{"rendered":"http:\/\/https://jsprifix.netlify.app/\/?page_id=218"},"modified":"2020-03-23T09:45:31","modified_gmt":"2020-03-23T16:45:31","slug":"javascript-closure","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-closure\/","title":{"rendered":"JavaScript Closures"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about JavaScript closures and how to use closures in your code more effectively.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to JavaScript closures<\/h2>\n\n\n\n<p>In JavaScript, a closure is a <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-function\/\">function<\/a> that references variables in the outer scope from its inner scope. The closure preserves the outer scope inside its inner scope.<\/p>\n\n\n\n<p>To understand the closures, you need to know how the lexical scoping works first.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Lexical scoping<\/h3>\n\n\n\n<p>Lexical scoping defines the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-variable-scope\/\">scope of a variable<\/a> by the position of that variable declared in the source code. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> name = <span class=\"hljs-string\">'John'<\/span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">greeting<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{ \n    <span class=\"hljs-keyword\">let<\/span> message = <span class=\"hljs-string\">'Hi'<\/span>;\n    <span class=\"hljs-built_in\">console<\/span>.log(message + <span class=\"hljs-string\">' '<\/span>+ name);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example:<\/p>\n\n\n\n<ul><li>The variable <code>name<\/code> is a global variable. It is accessible from anywhere including within the <code>greeting()<\/code> function.<\/li><li>The variable <code>message<\/code> is a local variable that is accessible only within the <code>greeting()<\/code> function.<\/li><\/ul>\n\n\n\n<p>If you try to access the <code>message<\/code> variable outside the <code>greeting()<\/code> function, you will get an error.<\/p>\n\n\n\n<p>So the JavaScript engine uses the scope to manage the variable accessibility.<\/p>\n\n\n\n<p>According to lexical scoping, the scopes can be nested and the inner function can access the variables declared in its outer scope. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">greeting<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">let<\/span> message = <span class=\"hljs-string\">'Hi'<\/span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">sayHi<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n        <span class=\"hljs-built_in\">console<\/span>.log(message);\n    }\n\n    sayHi();\n}\n\ngreeting();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>greeting()<\/code>&nbsp;function creates a local variable named <code>message<\/code> and a function named <code>sayHi()<\/code>.<\/p>\n\n\n\n<p>The <code>sayHi()<\/code> is the inner function that is available only within the body of the <code>greeting()<\/code>&nbsp;function.<\/p>\n\n\n\n<p>The <code>sayHi()<\/code> function can access the variables of the outer function such as the <code>message<\/code> variable of the <code>greeting()<\/code>&nbsp;function.<\/p>\n\n\n\n<p>Inside the <code>greeting()<\/code> function, we call the <code>sayHi()<\/code> function to display the message <code>Hi<\/code>.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">JavaScript closures<\/h3>\n\n\n\n<p>Let&#8217;s modify the <code>greeting()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">greeting<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">let<\/span> message = <span class=\"hljs-string\">'Hi'<\/span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">sayHi<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n        <span class=\"hljs-built_in\">console<\/span>.log(message);\n    }\n\n    <span class=\"hljs-keyword\">return<\/span> sayHi;\n}\n<span class=\"hljs-keyword\">let<\/span> hi = greeting();\nhi(); <span class=\"hljs-comment\">\/\/ still can access the message variable<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Now, instead of executing the <code>sayHi()<\/code> function inside the <code>greeting()<\/code> function, the <code>greeting()<\/code> function returns the&nbsp;<code>sayHi()<\/code> function object.<\/p>\n\n\n\n<p>Note that functions are the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-functions-are-first-class-citizens\/\">first-class citizens in JavaScript<\/a>, therefore, you can return a function from another function.<\/p>\n\n\n\n<p>Outside of the <code>greeting()<\/code> function, we assigned the <code>hi<\/code> variable the value returned by the <code>greeting()<\/code> function, which is a reference of the <code>sayHi()<\/code> function.<\/p>\n\n\n\n<p>Then we executed the <code>sayHi()<\/code> function using the reference of that function: <code>hi()<\/code>. If you run the code, you will get the same effect as the one above.<\/p>\n\n\n\n<p>However, the interesting point here is that, normally, a local variable only exists during the execution of the function.<\/p>\n\n\n\n<p>It means that when the <code>greeting()<\/code> function has completed executing, the <code>message<\/code> variable is no longer accessible.<\/p>\n\n\n\n<p>In this case, we execute the <code>hi()<\/code> function that references the <code>sayHi()<\/code> function, the <code>message<\/code> variable still exists.<\/p>\n\n\n\n<p>The magic of this is closure. In other words, the <code>sayHi()<\/code> function is a closure.<\/p>\n\n\n\n<p>A closure is a function that preserves the outer scope in its inner scope.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">More JavaScript Closure example<\/h3>\n\n\n\n<p>The following example illustrates a more practical example of closure.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">greeting<\/span>(<span class=\"hljs-params\">message<\/span>) <\/span>{\n   <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>(<span class=\"hljs-params\">name<\/span>)<\/span>{\n        <span class=\"hljs-keyword\">return<\/span> message + <span class=\"hljs-string\">' '<\/span> + name;\n   }\n}\n<span class=\"hljs-keyword\">let<\/span> sayHi = greeting(<span class=\"hljs-string\">'Hi'<\/span>);\n<span class=\"hljs-keyword\">let<\/span> sayHello = greeting(<span class=\"hljs-string\">'Hello'<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(sayHi(<span class=\"hljs-string\">'John'<\/span>)); <span class=\"hljs-comment\">\/\/ Hi John<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(sayHello(<span class=\"hljs-string\">'John'<\/span>)); <span class=\"hljs-comment\">\/\/ Hello John<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>greeting()<\/code> function takes one argument named <code>message<\/code> and returns a function that accepts a single argument called <code>name<\/code>.<\/p>\n\n\n\n<p>The return function returns a greeting message that is the combination of the <code>message<\/code> and <code>name<\/code> variables.<\/p>\n\n\n\n<p>The <code>greeting()<\/code> function behaves like a function factory. It creates <code>sayHi()<\/code> and <code>sayHello()<\/code> functions with&nbsp;the respective messages <code>Hi<\/code> and <code>Hello<\/code>.<\/p>\n\n\n\n<p>The <code>sayHi()<\/code> and <code>sayHello()<\/code> are closures. They share the same function body but store different scopes.<\/p>\n\n\n\n<p>In the <code>sayHi()<\/code> closure, the <code>message<\/code> is <code>Hi<\/code>, while in the <code>sayHello()<\/code> closure the <code>message<\/code> is <code>Hello<\/code>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">JavaScript closures in a loop<\/h2>\n\n\n\n<p>Consider the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">var<\/span> index = <span class=\"hljs-number\">1<\/span>; index &lt;= <span class=\"hljs-number\">3<\/span>; index++) {\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'after '<\/span> + index + <span class=\"hljs-string\">' second(s):'<\/span> + index);\n    }, index * <span class=\"hljs-number\">1000<\/span>);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">after<\/span> 4 <span class=\"hljs-selector-tag\">second<\/span>(<span class=\"hljs-selector-tag\">s<\/span>)<span class=\"hljs-selector-pseudo\">:4<\/span>\n<span class=\"hljs-selector-tag\">after<\/span> 4 <span class=\"hljs-selector-tag\">second<\/span>(<span class=\"hljs-selector-tag\">s<\/span>)<span class=\"hljs-selector-pseudo\">:4<\/span>\n<span class=\"hljs-selector-tag\">after<\/span> 4 <span class=\"hljs-selector-tag\">second<\/span>(<span class=\"hljs-selector-tag\">s<\/span>)<span class=\"hljs-selector-pseudo\">:4<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The code shows the same message.<\/p>\n\n\n\n<p>What we wanted to do in the loop is to copy the value of &nbsp;<code>i<\/code> in each iteration at the time of iteration to display a message after 1, 2, and 3 seconds.&nbsp;<\/p>\n\n\n\n<p><span style=\"line-height: 1.5;\">The reason you see the same message after 4 seconds is that the callback passed to the <code>setTimeout()<\/code> a closure. It remembers the value of <code>i<\/code> from the last iteration of the loop, which is 4.<\/span><\/p>\n\n\n\n<p><span style=\"line-height: 1.5;\">In addition, all three closures created by the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-for-loop\/\">for-loop<\/a> share the same global scope access the same value of <code>i<\/code>.<\/span><\/p>\n\n\n\n<p>To fix this issue, you need to create a new closure scope in each iteration of the loop.<\/p>\n\n\n\n<p>There are two popular solutions: IIFE &amp; <code>let<\/code> keyword.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">1) Using the IIFE solution<\/h3>\n\n\n\n<p>In this solution, you use an <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-immediately-invoked-function-expression-iife\/\">immediately invoked function expression<\/a> (a.k.a IIFE) because an IIFE creates a new scope by declaring a function and immediately execute it.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">var<\/span> index = <span class=\"hljs-number\">1<\/span>; index &lt;= <span class=\"hljs-number\">3<\/span>; index++) {\n    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">index<\/span>) <\/span>{\n        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n            <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'after '<\/span> + index + <span class=\"hljs-string\">' second(s):'<\/span> + index);\n        }, index * <span class=\"hljs-number\">1000<\/span>);\n    })(index);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">after<\/span> 1 <span class=\"hljs-selector-tag\">second<\/span>(<span class=\"hljs-selector-tag\">s<\/span>)<span class=\"hljs-selector-pseudo\">:1<\/span>\n<span class=\"hljs-selector-tag\">after<\/span> 2 <span class=\"hljs-selector-tag\">second<\/span>(<span class=\"hljs-selector-tag\">s<\/span>)<span class=\"hljs-selector-pseudo\">:2<\/span>\n<span class=\"hljs-selector-tag\">after<\/span> 3 <span class=\"hljs-selector-tag\">second<\/span>(<span class=\"hljs-selector-tag\">s<\/span>)<span class=\"hljs-selector-pseudo\">:3<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">2) Using <code>let<\/code> keyword in ES6<\/h3>\n\n\n\n<p>In ES6, you can use the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-variables\/#let\"><code>let<\/code><\/a> keyword to declare a variable that is block-scoped.<\/p>\n\n\n\n<p>If you use the <code>let<\/code> keyword in the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-for-loop\/\">for-loop<\/a>, it will create a new lexical scope in each iteration. <span style=\"font-size: inherit;\">In other words, you will have a new <\/span><code>index<\/code><span style=\"font-size: inherit;\"> variable in each iteration. <\/span><\/p>\n\n\n\n<p><span style=\"font-size: inherit;\">In addition, the new lexical scope is chained up to the previous scope so that the previous value of the <code>index<\/code> is copied from the previous scope to the new one.<\/span><\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">let<\/span> index = <span class=\"hljs-number\">1<\/span>; index &lt;= <span class=\"hljs-number\">3<\/span>; index++) {\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'after '<\/span> + index + <span class=\"hljs-string\">' second(s):'<\/span> + index);\n    }, index * <span class=\"hljs-number\">1000<\/span>);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">after<\/span> 1 <span class=\"hljs-selector-tag\">second<\/span>(<span class=\"hljs-selector-tag\">s<\/span>)<span class=\"hljs-selector-pseudo\">:1<\/span>\n<span class=\"hljs-selector-tag\">after<\/span> 2 <span class=\"hljs-selector-tag\">second<\/span>(<span class=\"hljs-selector-tag\">s<\/span>)<span class=\"hljs-selector-pseudo\">:2<\/span>\n<span class=\"hljs-selector-tag\">after<\/span> 3 <span class=\"hljs-selector-tag\">second<\/span>(<span class=\"hljs-selector-tag\">s<\/span>)<span class=\"hljs-selector-pseudo\">:3<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>Lexical scoping describes how the JavaScript engine uses the location of the variable in the code to determine where that variable is available.<\/li><li>A&nbsp;closure&nbsp;is a combination of a function and its ability to remember variables in the outer scope. <\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"218\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-closure\/\"\n\t\t\t\tdata-post-title=\"JavaScript Closures\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"218\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-closure\/\"\n\t\t\t\tdata-post-title=\"JavaScript Closures\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about JavaScript closure and how to use closures in your code more effectively.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":78,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>The Beginner&#039;s Guide to JavaScript Closure and Its Usages<\/title>\n<meta name=\"description\" content=\"This tutorial introduces you to the JavaScript closure and shows you how to apply closures in your code more effectively.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-closure\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"The Beginner&#039;s Guide to JavaScript Closure and Its Usages\" \/>\n<meta property=\"og:description\" content=\"This tutorial introduces you to the JavaScript closure and shows you how to apply closures in your code more effectively.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-closure\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2020-03-23T16:45:31+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-closure\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-closure\/\",\"name\":\"The Beginner's Guide to JavaScript Closure and Its Usages\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2016-08-08T08:04:53+00:00\",\"dateModified\":\"2020-03-23T16:45:31+00:00\",\"description\":\"This tutorial introduces you to the JavaScript closure and shows you how to apply closures in your code more effectively.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-closure\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-closure\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-closure\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Closures\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"The Beginner's Guide to JavaScript Closure and Its Usages","description":"This tutorial introduces you to the JavaScript closure and shows you how to apply closures in your code more effectively.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-closure\/","og_locale":"en_US","og_type":"article","og_title":"The Beginner's Guide to JavaScript Closure and Its Usages","og_description":"This tutorial introduces you to the JavaScript closure and shows you how to apply closures in your code more effectively.","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-closure\/","og_site_name":"PriFix Tutorial","article_modified_time":"2020-03-23T16:45:31+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-closure\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-closure\/","name":"The Beginner's Guide to JavaScript Closure and Its Usages","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2016-08-08T08:04:53+00:00","dateModified":"2020-03-23T16:45:31+00:00","description":"This tutorial introduces you to the JavaScript closure and shows you how to apply closures in your code more effectively.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-closure\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-closure\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-closure\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript Closures"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/218"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=218"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/218\/revisions"}],"predecessor-version":[{"id":86141,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/218\/revisions\/86141"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=218"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}