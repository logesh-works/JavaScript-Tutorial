{"id":1150,"date":"2019-01-12T04:12:51","date_gmt":"2019-01-12T12:12:51","guid":{"rendered":"http:\/\/https://jsprifix.netlify.app/\/?page_id=1150"},"modified":"2022-08-16T23:39:01","modified_gmt":"2022-08-17T06:39:01","slug":"javascript-async-await","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/","title":{"rendered":"JavaScript async\/await"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to write asynchronous code&nbsp; using JavaScript &nbsp;<code>async<\/code>\/&nbsp; <code>await<\/code> keywords.<\/p>\n\n\n\n<p>Note that to understand how the <code>async<\/code> \/ <code>await<\/code> works, you need to know how <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-promises\/\">promises<\/a> work.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to JavaScript async \/ await keywords<\/h2>\n\n\n\n<p>In the past, to deal with asynchronous operations, you often used the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-callback\/\">callback functions<\/a>. However, when you nest many callback functions, the code will be more difficult to maintain. And you end up with a notorious issue which is known as the callback hell.<\/p>\n\n\n\n<p>Suppose that you need to perform three asynchronous operations in the following sequence:<\/p>\n\n\n\n<ol><li>Select a user from the database.<\/li><li>Get services of the user from an API.<\/li><li>Calculate the service cost based on the services from the server.\u00a0<\/li><\/ol>\n\n\n\n<p>The following functions illustrate the three tasks. Note that we use the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-bom\/javascript-settimeout\/\">setTimeout()<\/a><\/code> function to simulate the asynchronous operation.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getUser<\/span>(<span class=\"hljs-params\">userId, callback<\/span>) <\/span>{\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Get user from the database.'<\/span>);\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n        callback({\n            <span class=\"hljs-attr\">userId<\/span>: userId,\n            <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'john'<\/span>\n        });\n    }, <span class=\"hljs-number\">1000<\/span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getServices<\/span>(<span class=\"hljs-params\">user, callback<\/span>) <\/span>{\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Get services of  <span class=\"hljs-subst\">${user.username}<\/span> from the API.`<\/span>);\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n        callback(&#91;<span class=\"hljs-string\">'Email'<\/span>, <span class=\"hljs-string\">'VPN'<\/span>, <span class=\"hljs-string\">'CDN'<\/span>]);\n    }, <span class=\"hljs-number\">2<\/span> * <span class=\"hljs-number\">1000<\/span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getServiceCost<\/span>(<span class=\"hljs-params\">services, callback<\/span>) <\/span>{\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Calculate service costs of <span class=\"hljs-subst\">${services}<\/span>.`<\/span>);\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n        callback(services.length * <span class=\"hljs-number\">100<\/span>);\n    }, <span class=\"hljs-number\">3<\/span> * <span class=\"hljs-number\">1000<\/span>);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following shows the nested callback functions:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">getUser(<span class=\"hljs-number\">100<\/span>, (user) =&gt; {\n    getServices(user, (services) =&gt; {\n        getServiceCost(services, (cost) =&gt; {\n            <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`The service cost is <span class=\"hljs-subst\">${cost}<\/span>`<\/span>);\n        });\n    });\n});<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">Get user <span class=\"hljs-keyword\">from<\/span> the database.\nGet services <span class=\"hljs-keyword\">of<\/span>  john <span class=\"hljs-keyword\">from<\/span> the API.\nCalculate service costs <span class=\"hljs-keyword\">of<\/span> Email,VPN,CDN.\nThe service cost is <span class=\"hljs-number\">300<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To avoid this callback hell issue, ES6 introduced the <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-promises\/\">promises<\/a> that allow you to write asynchronous code in more manageable ways.<\/p>\n\n\n\n<p>First, you need to return a <code>Promise<\/code> in each function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getUser<\/span>(<span class=\"hljs-params\">userId<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Promise<\/span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject<\/span>) =&gt;<\/span> {\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Get user from the database.'<\/span>);\n        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n            resolve({\n                <span class=\"hljs-attr\">userId<\/span>: userId,\n                <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'john'<\/span>\n            });\n        }, <span class=\"hljs-number\">1000<\/span>);\n    })\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getServices<\/span>(<span class=\"hljs-params\">user<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Promise<\/span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject<\/span>) =&gt;<\/span> {\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Get services of  <span class=\"hljs-subst\">${user.username}<\/span> from the API.`<\/span>);\n        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n            resolve(&#91;<span class=\"hljs-string\">'Email'<\/span>, <span class=\"hljs-string\">'VPN'<\/span>, <span class=\"hljs-string\">'CDN'<\/span>]);\n        }, <span class=\"hljs-number\">2<\/span> * <span class=\"hljs-number\">1000<\/span>);\n    });\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getServiceCost<\/span>(<span class=\"hljs-params\">services<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Promise<\/span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject<\/span>) =&gt;<\/span> {\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Calculate service costs of <span class=\"hljs-subst\">${services}<\/span>.`<\/span>);\n        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n            resolve(services.length * <span class=\"hljs-number\">100<\/span>);\n        }, <span class=\"hljs-number\">3<\/span> * <span class=\"hljs-number\">1000<\/span>);\n    });\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Then, you <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/promise-chaining\/\">chain the promises<\/a>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">getUser<\/span>(100)\n    <span class=\"hljs-selector-class\">.then<\/span>(<span class=\"hljs-selector-tag\">getServices<\/span>)\n    <span class=\"hljs-selector-class\">.then<\/span>(<span class=\"hljs-selector-tag\">getServiceCost<\/span>)\n    <span class=\"hljs-selector-class\">.then<\/span>(<span class=\"hljs-selector-tag\">console<\/span><span class=\"hljs-selector-class\">.log<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>ES2017 introduced the <code>async<\/code>\/<code>await<\/code> keywords that build on top of promises, allowing you to write asynchronous code that looks more like synchronous code and is more readable. Technically speaking, the <code>async<\/code> \/ <code>await<\/code> is syntactic sugar for promises. <\/p>\n\n\n\n<p>If a function returns a Promise, you can place the <code>await<\/code> keyword in front of the function call, like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> result = <span class=\"hljs-keyword\">await<\/span> f();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>await<\/code> will wait for the <code>Promise<\/code> returned from the <code>f()<\/code> to settle. The <code>await<\/code> keyword can be used only inside the <code>async<\/code> functions.<\/p>\n\n\n\n<p>The following defines an <code>async<\/code> function that calls the three asynchronous operations in sequence:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">showServiceCost<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">let<\/span> user = <span class=\"hljs-keyword\">await<\/span> getUser(<span class=\"hljs-number\">100<\/span>);\n    <span class=\"hljs-keyword\">let<\/span> services = <span class=\"hljs-keyword\">await<\/span> getServices(user);\n    <span class=\"hljs-keyword\">let<\/span> cost = <span class=\"hljs-keyword\">await<\/span> getServiceCost(services);\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`The service cost is <span class=\"hljs-subst\">${cost}<\/span>`<\/span>);\n}\n\nshowServiceCost();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>As you can see, the asynchronous code now looks like the synchronous code. <\/p>\n\n\n\n<p>Let&#8217;s dive in the async \/ await keywords.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The <code>async<\/code> keyword<\/h2>\n\n\n\n<p>The <code>async<\/code> keyword allows you to define a function that handles asynchronous operations.<\/p>\n\n\n\n<p>To define an <code>async<\/code> function, you place the <code>async<\/code> keyword in front of the function keyword as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">sayHi<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">'Hi'<\/span>;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Asynchronous functions execute asynchronously via the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-event-loop\/\">event loop<\/a>. It always returns a <code>Promise<\/code>.&nbsp;<\/p>\n\n\n\n<p>In this example, because the <code>sayHi()<\/code> function returns a <code>Promise<\/code>, you can consume it, like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">sayHi<\/span>()<span class=\"hljs-selector-class\">.then<\/span>(<span class=\"hljs-selector-tag\">console<\/span><span class=\"hljs-selector-class\">.log<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>You can also explicitly return a <code>Promise<\/code> from the <code>sayHi()<\/code> function as shown in the following code:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">sayHi<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-built_in\">Promise<\/span>.resolve(<span class=\"hljs-string\">'Hi'<\/span>);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p> The effect is the same. <\/p>\n\n\n\n<p>Besides the regular functions, you can use the <code>async<\/code> keyword in the function expressions: <\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> sayHi = <span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">'Hi'<\/span>;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p><a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-arrow-function\/\">arrow functions<\/a>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> sayHi = <span class=\"hljs-keyword\">async<\/span> () =&gt; <span class=\"hljs-string\">'Hi'<\/span>; <\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>and methods of classes:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Greeter<\/span> <\/span>{\n    <span class=\"hljs-keyword\">async<\/span> sayHi() {\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">'Hi'<\/span>;\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">The <code>await<\/code> keyword<\/h2>\n\n\n\n<p>You use the <code>await<\/code> keyword to wait for a <code>Promise<\/code> to settle either in resolved or rejected state. And you can use the <code>await<\/code> keyword only inside an <code>async<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">display<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">let<\/span> result = <span class=\"hljs-keyword\">await<\/span> sayHi();\n    <span class=\"hljs-built_in\">console<\/span>.log(result);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>await<\/code> keyword instructs the JavaScript engine to wait for the <code>sayHi()<\/code> function to complete before displaying the message.<\/p>\n\n\n\n<p>Note that if you use the <code>await<\/code> operator outside of an <code>async<\/code> function, you will get an error.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Error handling<\/h2>\n\n\n\n<p>If a promise resolves, the <code>await promise<\/code> returns the result. However, when the promise rejects, the <code>await promise<\/code> will throw an error as if there were a <code>throw<\/code> statement.<\/p>\n\n\n\n<p>The following code:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getUser<\/span>(<span class=\"hljs-params\">userId<\/span>) <\/span>{\n     <span class=\"hljs-keyword\">await<\/span> <span class=\"hljs-built_in\">Promise<\/span>.reject(<span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Error<\/span>(<span class=\"hljs-string\">'Invalid User Id'<\/span>));\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>&#8230; is the same as this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getUser<\/span>(<span class=\"hljs-params\">userId<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Error<\/span>(<span class=\"hljs-string\">'Invalid User Id'<\/span>);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In the real scenario, it will take a while for the promise to throw an error.<\/p>\n\n\n\n<p>You can catch the error by using the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/\">try...catch<\/a><\/code> statement, the same way as a regular <code>throw<\/code> statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getUser<\/span>(<span class=\"hljs-params\">userId<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">try<\/span> {\n       <span class=\"hljs-keyword\">const<\/span> user = <span class=\"hljs-keyword\">await<\/span> <span class=\"hljs-built_in\">Promise<\/span>.reject(<span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Error<\/span>(<span class=\"hljs-string\">'Invalid User Id'<\/span>));\n    } <span class=\"hljs-keyword\">catch<\/span>(error) {\n       <span class=\"hljs-built_in\">console<\/span>.log(error);\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It&#8217;s possible to catch errors caused by one or more <code>await promise<\/code>&#8216;s:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">showServiceCost<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">try<\/span> {\n       <span class=\"hljs-keyword\">let<\/span> user = <span class=\"hljs-keyword\">await<\/span> getUser(<span class=\"hljs-number\">100<\/span>);\n       <span class=\"hljs-keyword\">let<\/span> services = <span class=\"hljs-keyword\">await<\/span> getServices(user);\n       <span class=\"hljs-keyword\">let<\/span> cost = <span class=\"hljs-keyword\">await<\/span> getServiceCost(services);\n       <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`The service cost is <span class=\"hljs-subst\">${cost}<\/span>`<\/span>);\n    } <span class=\"hljs-keyword\">catch<\/span>(error) {\n       <span class=\"hljs-built_in\">console<\/span>.log(error);\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this tutorial, you have learned how to use the JavaScript <code>async<\/code> \/ <code>await<\/code> keyword to write asynchronous code look like synchronous code.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1150\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/\"\n\t\t\t\tdata-post-title=\"JavaScript async\/await\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1150\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/\"\n\t\t\t\tdata-post-title=\"JavaScript async\/await\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn a new syntax to write asynchronous code by using\u00a0JavaScript async\/\u00a0 await keywords.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":93,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Async \/ Await: Asynchronous JavaScript<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn a new syntax to write asynchronous code by using\u00a0JavaScript \u00a0async\/\u00a0 await keywords.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Async \/ Await: Asynchronous JavaScript\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you will learn a new syntax to write asynchronous code by using\u00a0JavaScript \u00a0async\/\u00a0 await keywords.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-08-17T06:39:01+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/\",\"name\":\"JavaScript Async \/ Await: Asynchronous JavaScript\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2019-01-12T12:12:51+00:00\",\"dateModified\":\"2022-08-17T06:39:01+00:00\",\"description\":\"In this tutorial, you will learn a new syntax to write asynchronous code by using\u00a0JavaScript \u00a0async\/\u00a0 await keywords.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript async\/await\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Async \/ Await: Asynchronous JavaScript","description":"In this tutorial, you will learn a new syntax to write asynchronous code by using\u00a0JavaScript \u00a0async\/\u00a0 await keywords.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Async \/ Await: Asynchronous JavaScript","og_description":"In this tutorial, you will learn a new syntax to write asynchronous code by using\u00a0JavaScript \u00a0async\/\u00a0 await keywords.","og_url":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-08-17T06:39:01+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/","url":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/","name":"JavaScript Async \/ Await: Asynchronous JavaScript","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2019-01-12T12:12:51+00:00","dateModified":"2022-08-17T06:39:01+00:00","description":"In this tutorial, you will learn a new syntax to write asynchronous code by using\u00a0JavaScript \u00a0async\/\u00a0 await keywords.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript async\/await"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/1150"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=1150"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/1150\/revisions"}],"predecessor-version":[{"id":90246,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/1150\/revisions\/90246"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=1150"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}