{"id":84707,"date":"2019-12-18T01:01:53","date_gmt":"2019-12-18T09:01:53","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=84707"},"modified":"2022-08-17T00:01:36","modified_gmt":"2022-08-17T07:01:36","slug":"difference-between-var-and-let","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/es6\/difference-between-var-and-let\/","title":{"rendered":"Differences Between var and let"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the differences between the <code>var<\/code> and <code>let<\/code> keywords.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">#1: Variable scopes<\/h2>\n\n\n\n<p>The <code>var<\/code> variables belong to the global scope when you define them outside a function. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> counter;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>counter<\/code> is a global variable. It means that the <code>counter<\/code> variable is accessible by any functions.<\/p>\n\n\n\n<p>When you declare a variable inside a function using the <code>var<\/code> keyword, the scope of the variable is local. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">increase<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">var<\/span> counter = <span class=\"hljs-number\">10<\/span>;\n}\n<span class=\"hljs-comment\">\/\/ cannot access the counter variable here<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>counter<\/code> variable is local to the <code>increase()<\/code> function. It cannot be accessible outside of the function.<\/p>\n\n\n\n<p>The following example displays four numbers from 0 to 4 inside the loop and the number 5 outside the loop.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">var<\/span> i = <span class=\"hljs-number\">0<\/span>; i &lt; <span class=\"hljs-number\">5<\/span>; i++) {\n\t<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">\"Inside the loop:\"<\/span>, i);\n}\n\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">\"Outside the loop:\"<\/span>, i);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Shell Session\" data-shcb-language-slug=\"shell\"><span><code class=\"hljs language-shell\">Inside the loop: 0 \nInside the loop: 1 \nInside the loop: 2 \nInside the loop: 3 \nInside the loop: 4 \nOutside the loop: 5<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Shell Session<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">shell<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>i<\/code> variable is a global variable. Therefore, it can be accessed from both inside and after the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-for-loop\/\">for<\/a><\/code> loop.<\/p>\n\n\n\n<p>The following example uses the <code>let<\/code> keyword instead of the <code>var<\/code> keyword:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">let<\/span> i = <span class=\"hljs-number\">0<\/span>; i &lt; <span class=\"hljs-number\">5<\/span>; i++) {\n\t<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">\"Inside the loop:\"<\/span>, i);\n}\n\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">\"Outside the loop:\"<\/span>, i);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this case, the code shows four numbers from 0 to 4 inside a loop and a reference error:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">Inside the loop: 0\nInside the loop: 1\nInside the loop: 2\nInside the loop: 3\nInside the loop: 4<\/code><\/span><\/pre>\n\n\n<p>The error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">Uncaught <span class=\"hljs-built_in\">ReferenceError<\/span>: i is not defined<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Since this example uses the <code>let<\/code> keyword, the variable <code>i<\/code> is blocked scope. It means that the variable <code>i<\/code> only exists and can be accessible inside the <code>for<\/code> loop block.<\/p>\n\n\n\n<p>In JavaScript, a block is delimited by a pair of curly braces <code>{}<\/code> like in the <code>if...else<\/code>  and <code>for<\/code> statements:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if<\/span>(condition) {\n   <span class=\"hljs-comment\">\/\/ inside a block<\/span>\n}\n\n<span class=\"hljs-keyword\">for<\/span>(...) {\n  <span class=\"hljs-comment\">\/\/ inside a block<\/span>\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">#2: Creating global properties<\/h2>\n\n\n\n<p>The global <code>var<\/code> variables are added to the <a href=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-globalthis\/\">global object<\/a> as <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-object-properties\/\">properties<\/a>. The global object is <code>window<\/code> on the web browser and <code>global<\/code> on Node.js:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> counter = <span class=\"hljs-number\">0<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">window<\/span>.counter); <span class=\"hljs-comment\">\/\/  0<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, the <code>let<\/code> variables are not added to the global object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> counter = <span class=\"hljs-number\">0<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">window<\/span>.counter); <span class=\"hljs-comment\">\/\/ undefined<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">#3: Redeclaration<\/h2>\n\n\n\n<p>The <code>var<\/code> keyword allows you to redeclare a variable without any issue:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> counter = <span class=\"hljs-number\">10<\/span>;\n<span class=\"hljs-keyword\">var<\/span> counter;\n<span class=\"hljs-built_in\">console<\/span>.log(counter); <span class=\"hljs-comment\">\/\/ 10<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, if you redeclare a variable with the <code>let<\/code> keyword, you will get an error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> counter = <span class=\"hljs-number\">10<\/span>;\n<span class=\"hljs-keyword\">let<\/span> counter; <span class=\"hljs-comment\">\/\/ error<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">#4: The Temporal dead zone<\/h2>\n\n\n\n<p>The <code>let<\/code> variables have temporal dead zones while the <code>var<\/code> variables don&#8217;t. To understand the temporal dead zone, let&#8217;s examine the life cycles of both <code>var<\/code> and <code>let<\/code> variables, which have two steps: creation and execution.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The var variables<\/h3>\n\n\n\n<ul><li>In the creation phase, the JavaScript engine assigns storage spaces to <code>var<\/code> variables and immediately initializes them to <code>undefined<\/code>.<\/li><li>In the execution phase, the JavaScript engine assigns the <code>var<\/code> variables the values specified by the assignments if there are ones. Otherwise, the <code>var<\/code> variables remain undefined.<\/li><\/ul>\n\n\n\n<p>See the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-execution-context\/\">execution context<\/a> for more information.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The let variables<\/h3>\n\n\n\n<ul><li>In the creation phase, the JavaScript engine assigns storage spaces to the <code>let<\/code> variables but does not initialize the variables. Referencing uninitialized variables will cause a <code>ReferenceError<\/code>.<\/li><li>The <code>let<\/code> variables have the same execution phase as the <code>var<\/code> variables.<\/li><\/ul>\n\n\n\n<p>The temporal dead zone starts from the block until the <code>let<\/code> variable declaration is processed. In other words, it is the location where you cannot access the <code>let<\/code> variables before they are defined.<\/p>\n\n\n\n<p>In this tutorial, you have learned about the differences between <code>var<\/code> and <code>let<\/code> keywords.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"84707\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es6\/difference-between-var-and-let\/\"\n\t\t\t\tdata-post-title=\"Differences Between var and let\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"84707\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es6\/difference-between-var-and-let\/\"\n\t\t\t\tdata-post-title=\"Differences Between var and let\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about the differences between var and let keywords in JavaScript.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":115,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Difference Between var and let in JavaScript<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about the differences between var and let keywords.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/difference-between-var-and-let\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Difference Between var and let in JavaScript\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you will learn about the differences between var and let keywords.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/es6\/difference-between-var-and-let\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-08-17T07:01:36+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/difference-between-var-and-let\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/difference-between-var-and-let\/\",\"name\":\"Difference Between var and let in JavaScript\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2019-12-18T09:01:53+00:00\",\"dateModified\":\"2022-08-17T07:01:36+00:00\",\"description\":\"In this tutorial, you will learn about the differences between var and let keywords.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/difference-between-var-and-let\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/es6\/difference-between-var-and-let\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/difference-between-var-and-let\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Differences Between var and let\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Difference Between var and let in JavaScript","description":"In this tutorial, you will learn about the differences between var and let keywords.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/es6\/difference-between-var-and-let\/","og_locale":"en_US","og_type":"article","og_title":"Difference Between var and let in JavaScript","og_description":"In this tutorial, you will learn about the differences between var and let keywords.","og_url":"https:\/\/https://jsprifix.netlify.app/\/es6\/difference-between-var-and-let\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-08-17T07:01:36+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/difference-between-var-and-let\/","url":"https:\/\/https://jsprifix.netlify.app/\/es6\/difference-between-var-and-let\/","name":"Difference Between var and let in JavaScript","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2019-12-18T09:01:53+00:00","dateModified":"2022-08-17T07:01:36+00:00","description":"In this tutorial, you will learn about the differences between var and let keywords.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/difference-between-var-and-let\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/es6\/difference-between-var-and-let\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/difference-between-var-and-let\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"Differences Between var and let"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/84707"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=84707"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/84707\/revisions"}],"predecessor-version":[{"id":88368,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/84707\/revisions\/88368"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=84707"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}