{"id":733,"date":"2016-09-18T21:52:56","date_gmt":"2016-09-19T04:52:56","guid":{"rendered":"http:\/\/https://jsprifix.netlify.app/\/?page_id=733"},"modified":"2022-08-16T23:37:03","modified_gmt":"2022-08-17T06:37:03","slug":"javascript-iterator","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/","title":{"rendered":"The Essential Guide to JavaScript Iterators"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about JavaScript iterator and how to use iterators to process a sequence of data more efficiently.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The <code>for<\/code> loop issues<\/h2>\n\n\n\n<p>When you have an <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-array\/\">array<\/a> of data, you typically use a <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-for-loop\/\">for<\/a><\/code>&nbsp;loop to iterate over its elements. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> ranks = &#91;<span class=\"hljs-string\">'A'<\/span>, <span class=\"hljs-string\">'B'<\/span>, <span class=\"hljs-string\">'C'<\/span>];\n\n<span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">let<\/span> i = <span class=\"hljs-number\">0<\/span>; i &lt; ranks.length; i++) {\n    <span class=\"hljs-built_in\">console<\/span>.log(ranks&#91;i]);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>for<\/code> loop uses the variable &nbsp;<code>i<\/code> to track the index of the <code>ranks<\/code> array. The value of &nbsp;<code>i<\/code> increments each time the loop executes as long as the value of <code>i<\/code> is less than the number of elements in the <code>ranks<\/code> array.<\/p>\n\n\n\n<p>This&nbsp;code is straightforward. However, its complexity grows when you nest a loop inside another loop. In addition, keeping track of multiple variables inside the loops&nbsp;is error-prone.<\/p>\n\n\n\n<p>ES6 introduced a new loop construct called <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-for-of\/\">for...of<\/a><\/code> to eliminate the standard loop&#8217;s complexity and avoid the errors caused by keeping track of loop indexes.<\/p>\n\n\n\n<p>To iterate over the elements of the <code>ranks<\/code> array, you use the following <code>for...of<\/code> construct:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for<\/span>(<span class=\"hljs-keyword\">let<\/span> rank <span class=\"hljs-keyword\">of<\/span> ranks) {\n    <span class=\"hljs-built_in\">console<\/span>.log(rank);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>for...of<\/code> is far more elegant than the <code>for<\/code> loop because it shows the true intent of the code &#8211; iterate over an array to access each element in the sequence.<\/p>\n\n\n\n<p>On top of this, the <code>for...of<\/code> loop has the ability to create a loop over any <strong>iterable<\/strong> object, not just an array.<\/p>\n\n\n\n<p>To understand the iterable object, you need to understand the iteration protocols first.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Iteration protocols<\/h2>\n\n\n\n<p>There are two iteration protocols: <strong>iterable protocol<\/strong> and <strong>iterator protocol<\/strong>.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Iterator protocol<\/h3>\n\n\n\n<p>An object is an iterator when it implements an interface (or API) that answers two questions:<\/p>\n\n\n\n<ul><li>Is there any element left?<\/li><li>If there is, what is the element?<\/li><\/ul>\n\n\n\n<p>Technically speaking, an object is qualified as an iterator when it has a <code>next()<\/code> method that returns an object with two properties:<\/p>\n\n\n\n<ul><li>\u00a0<code>done<\/code>: a boolean value indicating whether or not there are any more elements that could be iterated upon.<\/li><li>\u00a0<code>value<\/code>: the current element.<\/li><\/ul>\n\n\n\n<p>Each time you call the <code>next()<\/code>, it returns the next value in the collection:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\">{ <span class=\"hljs-attribute\">value<\/span>: <span class=\"hljs-string\">'next value'<\/span>, done: false }<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you call the <code>next()<\/code> method after the last value has been returned, the <code>next()<\/code> returns the result object as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\">{<span class=\"hljs-attribute\">done<\/span>: true: value: undefined}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The value of the <code>done<\/code> property indicates that there is no more value to return and the <code>value<\/code> of the property is set to <code>undefined<\/code>.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Iterable protocol<\/h3>\n\n\n\n<p>An object is iterable when it contains a method called <code>[Symbol.iterator]<\/code> that takes no argument and returns an object which conforms to the iterator protocol.<\/p>\n\n\n\n<p>The <code>[Symbol.iterator]<\/code> is one of the built-in well-known <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/\">symbols<\/a> in ES6.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Iterators<\/h2>\n\n\n\n<p>Since ES6 provides built-in iterators for the collection types&nbsp; <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-array\/\">Array<\/a><\/code>, <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-set\/\">Set<\/a><\/code>, and <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-map\/\">Map<\/a><\/code>, you don&#8217;t have to create iterators for these objects.<\/p>\n\n\n\n<p>If you have a custom type and want to make it iterable so that you can use the <code>for...of<\/code> loop construct, you need to implement the iteration protocols.<\/p>\n\n\n\n<p>The following code creates a <code>Sequence<\/code> object that returns a list of numbers in the range of ( <code>start<\/code>, <code>end<\/code>) with an <code>interval<\/code> between subsequent numbers.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Sequence<\/span> <\/span>{\n    <span class=\"hljs-keyword\">constructor<\/span>( start = 0, end = Infinity, interval = 1 ) {\n        <span class=\"hljs-keyword\">this<\/span>.start = start;\n        <span class=\"hljs-keyword\">this<\/span>.end = end;\n        <span class=\"hljs-keyword\">this<\/span>.interval = interval;\n    }\n    &#91;<span class=\"hljs-built_in\">Symbol<\/span>.iterator]() {\n        <span class=\"hljs-keyword\">let<\/span> counter = <span class=\"hljs-number\">0<\/span>;\n        <span class=\"hljs-keyword\">let<\/span> nextIndex = <span class=\"hljs-keyword\">this<\/span>.start;\n        <span class=\"hljs-keyword\">return<\/span>  {\n            <span class=\"hljs-attr\">next<\/span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n                <span class=\"hljs-keyword\">if<\/span> ( nextIndex &lt;= <span class=\"hljs-keyword\">this<\/span>.end ) {\n                    <span class=\"hljs-keyword\">let<\/span> result = { <span class=\"hljs-attr\">value<\/span>: nextIndex,  <span class=\"hljs-attr\">done<\/span>: <span class=\"hljs-literal\">false<\/span> }\n                    nextIndex += <span class=\"hljs-keyword\">this<\/span>.interval;\n                    counter++;\n                    <span class=\"hljs-keyword\">return<\/span> result;\n                }\n                <span class=\"hljs-keyword\">return<\/span> { <span class=\"hljs-attr\">value<\/span>: counter, <span class=\"hljs-attr\">done<\/span>: <span class=\"hljs-literal\">true<\/span> };\n            }\n        }\n    }\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following code uses the <code>Sequence<\/code> iterator in a <code>for...of<\/code> loop:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> evenNumbers = <span class=\"hljs-keyword\">new<\/span> Sequence(<span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">2<\/span>);\n\n<span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">const<\/span> num <span class=\"hljs-keyword\">of<\/span> evenNumbers) {\n    <span class=\"hljs-built_in\">console<\/span>.log(num);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">2\n4\n6\n8\n10<\/code><\/span><\/pre>\n\n\n<p>You can explicitly access the <code>[Symbol.iterator]()<\/code> method as shown in the following script:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> evenNumbers = <span class=\"hljs-keyword\">new<\/span> Sequence(<span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">2<\/span>);\n<span class=\"hljs-keyword\">let<\/span> iterator = evenNumbers&#91;<span class=\"hljs-built_in\">Symbol<\/span>.iterator]();\n\n<span class=\"hljs-keyword\">let<\/span> result = iterator.next();\n\n<span class=\"hljs-keyword\">while<\/span>( !result.done ) {\n    <span class=\"hljs-built_in\">console<\/span>.log(result.value);\n    result = iterator.next();\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Cleaning up<\/h2>\n\n\n\n<p>In addition to the <code>next()<\/code> method, the <code>[Symbol.iterator]()<\/code> may optionally return a method called <code>return()<\/code>. <\/p>\n\n\n\n<p>The <code>return()<\/code> method is invoked automatically when the iteration is stopped prematurely. It is where you can place the code to clean up the resources.<\/p>\n\n\n\n<p>The following example implements the <code>return()<\/code> method for the <code>Sequence<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Sequence<\/span> <\/span>{\n    <span class=\"hljs-keyword\">constructor<\/span>( start = 0, end = Infinity, interval = 1 ) {\n        <span class=\"hljs-keyword\">this<\/span>.start = start;\n        <span class=\"hljs-keyword\">this<\/span>.end = end;\n        <span class=\"hljs-keyword\">this<\/span>.interval = interval;\n    }\n    &#91;<span class=\"hljs-built_in\">Symbol<\/span>.iterator]() {\n        <span class=\"hljs-keyword\">let<\/span> counter = <span class=\"hljs-number\">0<\/span>;\n        <span class=\"hljs-keyword\">let<\/span> nextIndex = <span class=\"hljs-keyword\">this<\/span>.start;\n        <span class=\"hljs-keyword\">return<\/span>  {\n            <span class=\"hljs-attr\">next<\/span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n                <span class=\"hljs-keyword\">if<\/span> ( nextIndex &lt;= <span class=\"hljs-keyword\">this<\/span>.end ) {\n                    <span class=\"hljs-keyword\">let<\/span> result = { <span class=\"hljs-attr\">value<\/span>: nextIndex,  <span class=\"hljs-attr\">done<\/span>: <span class=\"hljs-literal\">false<\/span> }\n                    nextIndex += <span class=\"hljs-keyword\">this<\/span>.interval;\n                    counter++;\n                    <span class=\"hljs-keyword\">return<\/span> result;\n                }\n                <span class=\"hljs-keyword\">return<\/span> { <span class=\"hljs-attr\">value<\/span>: counter, <span class=\"hljs-attr\">done<\/span>: <span class=\"hljs-literal\">true<\/span> };\n            },\n            <span class=\"hljs-attr\">return<\/span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n                <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'cleaning up...'<\/span>);\n                <span class=\"hljs-keyword\">return<\/span> { <span class=\"hljs-attr\">value<\/span>: <span class=\"hljs-literal\">undefined<\/span>, <span class=\"hljs-attr\">done<\/span>: <span class=\"hljs-literal\">true<\/span> };\n            }\n        }\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following snippet uses the <code>Sequence<\/code> object to generate a sequence of odd numbers from 1 to 10. However, it prematurely stops the iteration. As a result, the <code>return()<\/code> method is automatically invoked.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> oddNumbers = <span class=\"hljs-keyword\">new<\/span> Sequence(<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">2<\/span>);\n\n<span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">const<\/span> num <span class=\"hljs-keyword\">of<\/span> oddNumbers) {\n    <span class=\"hljs-keyword\">if<\/span>( num &gt; <span class=\"hljs-number\">7<\/span> ) {\n        <span class=\"hljs-keyword\">break<\/span>;\n    }\n    <span class=\"hljs-built_in\">console<\/span>.log(num);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">1\n3\n5\n7\ncleaning up...<\/code><\/span><\/pre>\n\n\n<p>In this tutorial, you have learned about the JavaScript iterator and how to use the iteration protocols to implement customized iteration logic.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"733\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/\"\n\t\t\t\tdata-post-title=\"The Essential Guide to JavaScript Iterators\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"733\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/\"\n\t\t\t\tdata-post-title=\"The Essential Guide to JavaScript Iterators\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about JavaScript iterator and how to use iterators to process data more efficiently.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":94,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>The Essential Guide to JavaScript Iterator<\/title>\n<meta name=\"description\" content=\"In this tutorial, we introduce the JavaScript iterator and show you how to use iterators to process data more efficiently\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"The Essential Guide to JavaScript Iterator\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, we introduce the JavaScript iterator and show you how to use iterators to process data more efficiently\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-08-17T06:37:03+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/\",\"name\":\"The Essential Guide to JavaScript Iterator\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2016-09-19T04:52:56+00:00\",\"dateModified\":\"2022-08-17T06:37:03+00:00\",\"description\":\"In this tutorial, we introduce the JavaScript iterator and show you how to use iterators to process data more efficiently\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"The Essential Guide to JavaScript Iterators\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"The Essential Guide to JavaScript Iterator","description":"In this tutorial, we introduce the JavaScript iterator and show you how to use iterators to process data more efficiently","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/","og_locale":"en_US","og_type":"article","og_title":"The Essential Guide to JavaScript Iterator","og_description":"In this tutorial, we introduce the JavaScript iterator and show you how to use iterators to process data more efficiently","og_url":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-08-17T06:37:03+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/","url":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/","name":"The Essential Guide to JavaScript Iterator","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2016-09-19T04:52:56+00:00","dateModified":"2022-08-17T06:37:03+00:00","description":"In this tutorial, we introduce the JavaScript iterator and show you how to use iterators to process data more efficiently","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-iterator\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"The Essential Guide to JavaScript Iterators"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/733"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=733"}],"version-history":[{"count":2,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/733\/revisions"}],"predecessor-version":[{"id":90245,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/733\/revisions\/90245"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=733"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}