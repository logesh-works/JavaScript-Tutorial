{"id":263,"date":"2016-08-10T00:10:22","date_gmt":"2016-08-10T07:10:22","guid":{"rendered":"http:\/\/https://jsprifix.netlify.app/\/?page_id=263"},"modified":"2022-01-15T19:44:10","modified_gmt":"2022-01-16T03:44:10","slug":"javascript-primitive-vs-reference-values","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-primitive-vs-reference-values\/","title":{"rendered":"JavaScript Primitive vs. Reference Values"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about two different types of values in JavaScript including primitive and reference values.<\/p>\n\n\n\n<p>JavaScript has two different types of values:<\/p>\n\n\n\n<ul><li>Primitive values<\/li><li>Reference values<\/li><\/ul>\n\n\n\n<p>Primitive values are atomic pieces of data while reference values are objects that might consist of multiple values.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Stack and heap memory<\/h2>\n\n\n\n<p>When you declare <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-variables\/\">variables<\/a>, the JavaScript engine allocates the memory for them on two memory locations: stack and heap.<\/p>\n\n\n\n<p>Static data is the data whose size is fixed at compile time. Static data includes:<\/p>\n\n\n\n<ul><li>Primitive values (<a href=\"https:\/\/https://jsprifix.netlify.app/\/object\/javascript-null\/\">null<\/a>, <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-undefined\/\">undefined<\/a>, <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean-type\/\">boolean<\/a>, <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-number\/\">number<\/a>, <a href=\"https:\/\/https://jsprifix.netlify.app/\/string\/\">string<\/a>, <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/symbol\/\">symbol<\/a>, and <a href=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-bigint\/\">BigInt<\/a>)<\/li><li>Reference values that refer to objects. <\/li><\/ul>\n\n\n\n<p>Because static data has a size that does not change, the JavaScript engine allocates a fixed amount of memory space to the static data and store it on the stack.<\/p>\n\n\n\n<p>For example, the following declares two variables and initializes their values to a literal string and a number:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> name = <span class=\"hljs-string\">'John'<\/span>;\n<span class=\"hljs-keyword\">let<\/span> age = <span class=\"hljs-number\">25<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Because <code>name<\/code> and <code>age<\/code> are primitive values, the JavaScript engine stores these variables on the stack as shown in the following picture:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><a href=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-stack-memory.svg\"><img decoding=\"async\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-stack-memory.svg\" alt=\"\" class=\"wp-image-88960\"\/><\/a><\/figure><\/div>\n\n\n\n<p class=\"note\">Note that strings are objects in many programming languages, including Java and C#. However, strings are primitive values in JavaScript.<\/p>\n\n\n\n<p>Unlike the stack, JavaScript stores objects (and functions) on the heap. The JavaScript engine doesn&#8217;t allocate a fixed amount of memory for these objects. Instead, it&#8217;ll allocate more space as needed.<\/p>\n\n\n\n<p>The following example defines the <code>name<\/code>, <code>age<\/code>, and <code>person<\/code> variables:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> name = <span class=\"hljs-string\">'John'<\/span>;\n<span class=\"hljs-keyword\">let<\/span> age = <span class=\"hljs-number\">25<\/span>;\n\n<span class=\"hljs-keyword\">let<\/span> person = {\n  <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'John'<\/span>,\n  <span class=\"hljs-attr\">age<\/span>: <span class=\"hljs-number\">25<\/span>,\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Internally, the JavaScript engine allocates the memory as shown in the following picture:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><a href=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-heap-memory.svg\"><img decoding=\"async\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-heap-memory.svg\" alt=\"\" class=\"wp-image-88962\"\/><\/a><\/figure><\/div>\n\n\n\n<p>In this picture, JavaScript allocates memory on the stack for the three variables <code>name<\/code>, <code>age<\/code>, and <code>person<\/code>. <\/p>\n\n\n\n<p>The JavaScript engine creates a new object on the heap memory. Also, it links the <code>person<\/code> variable on the stack memory to the object on the heap memory. <\/p>\n\n\n\n<p>Because of this, we say that the <code>person<\/code> variable is a reference that refers to an object.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Dynamic properties<\/h2>\n\n\n\n<p>A reference value allows you to add, change, or delete properties at any time. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> person = {\n  <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'John'<\/span>,\n  <span class=\"hljs-attr\">age<\/span>: <span class=\"hljs-number\">25<\/span>,\n};\n\n<span class=\"hljs-comment\">\/\/ add the ssn property<\/span>\nperson.ssn = <span class=\"hljs-string\">'123-45-6789'<\/span>;\n\n<span class=\"hljs-comment\">\/\/ change the name<\/span>\nperson.name = <span class=\"hljs-string\">'John Doe'<\/span>;\n\n<span class=\"hljs-comment\">\/\/ delete the age property<\/span>\n<span class=\"hljs-keyword\">delete<\/span> person.age;\n\n\n<span class=\"hljs-built_in\">console<\/span>.log(person);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\">{ <span class=\"hljs-attribute\">name<\/span>: <span class=\"hljs-string\">'John Doe'<\/span>, ssn: <span class=\"hljs-string\">'123-45-6789'<\/span> }<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Unlike a reference value, a primitive value cannot have properties. This means that you cannot add a property to a primitive value.<\/p>\n\n\n\n<p>JavaScript allows you to add a property to a primitive value. However, it won&#8217;t take any effect. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> name = <span class=\"hljs-string\">'John'<\/span>;\nname.alias = <span class=\"hljs-string\">'Knight'<\/span>;\n\n<span class=\"hljs-built_in\">console<\/span>.log(name.alias); <span class=\"hljs-comment\">\/\/ undefined<\/span>\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-literal\">undefined<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we add the <code>alias<\/code> property to the <code>name<\/code> primitive value. But when we access the <code>alias<\/code> property via the <code>name<\/code> primitive value, it returns <code>undefined<\/code>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Copying values<\/h2>\n\n\n\n<p>When you assign a primitive value from one variable to another, the JavaScript engine creates a copy of that value and assigns it to the variable. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> age = <span class=\"hljs-number\">25<\/span>;\n<span class=\"hljs-keyword\">let<\/span> newAge = age;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example:<\/p>\n\n\n\n<ul><li>First, declare a new variable <code>age<\/code> and initialize its value with <code>25<\/code>.<\/li><li>Second, declare another variable <code>newAge<\/code> and assign the <code>age<\/code> to the <code>newAge<\/code> variable.<\/li><\/ul>\n\n\n\n<p>Behind the scene, the JavaScript engine creates a copy of the primitive value <code>25<\/code> and assign it to the <code>newAge<\/code> variable.<\/p>\n\n\n\n<p>The following picture illustrates the stack memory after the assignment:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-copy-a-primitive-value.svg\"><img decoding=\"async\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-copy-a-primitive-value.svg\" alt=\"\" class=\"wp-image-88964\"\/><\/a><\/figure>\n\n\n\n<p>On the stack memory, the <code>newAge<\/code> and <code>age<\/code> are separate variables. If you change the value of one variable, it won&#8217;t affect the other. <\/p>\n\n\n\n<p>For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> age = <span class=\"hljs-number\">25<\/span>;\n<span class=\"hljs-keyword\">let<\/span> newAge = age;\n\nnewAge = newAge + <span class=\"hljs-number\">1<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(age, newAge);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-change-a-primitive-value.svg\"><img decoding=\"async\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-change-a-primitive-value.svg\" alt=\"\" class=\"wp-image-88965\"\/><\/a><\/figure>\n\n\n\n<p>When you assign a reference value from one variable to another, the JavaScript engine creates a reference so that both variables refer to the same object on the heap memory. This means that if you change one variable, it&#8217;ll affect the other. <\/p>\n\n\n\n<p>For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> person = {\n  <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'John'<\/span>,\n  <span class=\"hljs-attr\">age<\/span>: <span class=\"hljs-number\">25<\/span>,\n};\n\n<span class=\"hljs-keyword\">let<\/span> member = person;\n\nmember.age = <span class=\"hljs-number\">26<\/span>;\n\n<span class=\"hljs-built_in\">console<\/span>.log(person);\n<span class=\"hljs-built_in\">console<\/span>.log(member);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, declare a <code>person<\/code> variable and initialize its value with an object with two properties <code>name<\/code> and <code>age<\/code>.<\/p>\n\n\n\n<p>Second, assign the <code>person<\/code> variable to the <code>member<\/code> variable. In the memory, both variables reference the same object, as shown in the following picture:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><a href=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-copy-a-reference-value.svg\"><img decoding=\"async\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-copy-a-reference-value.svg\" alt=\"\" class=\"wp-image-88966\"\/><\/a><\/figure><\/div>\n\n\n\n<p>Third, change the <code>age<\/code> property of the object via the <code>member<\/code> variable:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><a href=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-change-a-reference-value.svg\"><img decoding=\"async\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-change-a-reference-value.svg\" alt=\"\" class=\"wp-image-88967\"\/><\/a><\/figure><\/div>\n\n\n\n<p>Since both <code>person<\/code> and <code>member<\/code> variables reference the same object, changing the object via the <code>member<\/code> variable is also reflected in the <code>person<\/code> variable.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>Javascript has two types of values: primitive values and reference values.<\/li><li>You can add, change, or delete properties to a reference value, whereas you cannot do it with a primitive value.<\/li><li>Copying a primitive value from one variable to another creates a separate value copy. It means that changing the value in one variable does not affect the other.<\/li><li>Copying a reference from one variable to another creates a reference so that two variables refer to the same object. This means that changing the object via one variable reflects in another variable.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"263\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-primitive-vs-reference-values\/\"\n\t\t\t\tdata-post-title=\"JavaScript Primitive vs. Reference Values\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"263\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-primitive-vs-reference-values\/\"\n\t\t\t\tdata-post-title=\"JavaScript Primitive vs. Reference Values\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you&#8217;ll learn about two different types of values in JavaScript including primitive and reference values. JavaScript has two different types of values: Primitive values Reference values Primitive values are atomic pieces of data while reference values are objects that might consist of multiple values. Stack and heap memory When you declare [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":13,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Primitive vs. Reference Values<\/title>\n<meta name=\"description\" content=\"This tutorial shows you the differences between a primitive value and a reference in JavaScript by an easy-to-understand illustration.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-primitive-vs-reference-values\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Primitive vs. Reference Values\" \/>\n<meta property=\"og:description\" content=\"This tutorial shows you the differences between a primitive value and a reference in JavaScript by an easy-to-understand illustration.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-primitive-vs-reference-values\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-16T03:44:10+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-stack-memory.svg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-primitive-vs-reference-values\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-primitive-vs-reference-values\/\",\"name\":\"JavaScript Primitive vs. Reference Values\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2016-08-10T07:10:22+00:00\",\"dateModified\":\"2022-01-16T03:44:10+00:00\",\"description\":\"This tutorial shows you the differences between a primitive value and a reference in JavaScript by an easy-to-understand illustration.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-primitive-vs-reference-values\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-primitive-vs-reference-values\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-primitive-vs-reference-values\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Primitive vs. Reference Values\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Primitive vs. Reference Values","description":"This tutorial shows you the differences between a primitive value and a reference in JavaScript by an easy-to-understand illustration.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-primitive-vs-reference-values\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Primitive vs. Reference Values","og_description":"This tutorial shows you the differences between a primitive value and a reference in JavaScript by an easy-to-understand illustration.","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-primitive-vs-reference-values\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-16T03:44:10+00:00","og_image":[{"url":"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-stack-memory.svg"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-primitive-vs-reference-values\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-primitive-vs-reference-values\/","name":"JavaScript Primitive vs. Reference Values","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2016-08-10T07:10:22+00:00","dateModified":"2022-01-16T03:44:10+00:00","description":"This tutorial shows you the differences between a primitive value and a reference in JavaScript by an easy-to-understand illustration.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-primitive-vs-reference-values\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-primitive-vs-reference-values\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-primitive-vs-reference-values\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript Primitive vs. Reference Values"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/263"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=263"}],"version-history":[{"count":3,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/263\/revisions"}],"predecessor-version":[{"id":88976,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/263\/revisions\/88976"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=263"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}