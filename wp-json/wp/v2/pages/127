{"id":127,"date":"2016-08-04T22:02:25","date_gmt":"2016-08-05T05:02:25","guid":{"rendered":"http:\/\/www.javascripttutorial.net\/?page_id=127"},"modified":"2022-08-16T21:37:41","modified_gmt":"2022-08-17T04:37:41","slug":"javascript-data-types","status":"publish","type":"page","link":"https:\/\/www.javascripttutorial.net\/javascript-data-types\/","title":{"rendered":"JavaScript Data Types"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the JavaScript data types and their unique characteristics.<\/p>\n\n\n\n<p>JavaScript has the primitive data types:<\/p>\n\n\n\n<ol><li><a href=\"#null\"><code>null<\/code><\/a><\/li><li><a href=\"#undefined\"><code>undefined<\/code><\/a><\/li><li><a href=\"#boolean\"><code>boolean<\/code><\/a><\/li><li><a href=\"#number\"><code>number<\/code><\/a><\/li><li><a href=\"#string\"><code>string<\/code><\/a><\/li><li><a href=\"#symbol\"><code>symbol<\/code><\/a> &#8211; available from ES2015<\/li><li><code><a href=\"https:\/\/www.javascripttutorial.net\/es-next\/javascript-bigint\/\">bigint<\/a><\/code> &#8211; available from ES2020<\/li><\/ol>\n\n\n\n<p>and a complex data type <a href=\"https:\/\/www.javascripttutorial.net\/javascript-data-types\/#object\"><code>object<\/code><\/a>.<\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><a href=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/01\/JavaScript-data-types.svg\"><img decoding=\"async\" src=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/01\/JavaScript-data-types.svg\" alt=\"JavaScript data types\" class=\"wp-image-89229\"\/><\/a><\/figure><\/div>\n\n\n<p>JavaScript is a dynamically typed language. It means that a <a href=\"https:\/\/www.javascripttutorial.net\/javascript-variables\/\">variable<\/a> doesn&#8217;t associate with a type. In other words, a variable can hold a value of different types. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> counter = <span class=\"hljs-number\">120<\/span>; <span class=\"hljs-comment\">\/\/ counter is a number<\/span>\ncounter = <span class=\"hljs-literal\">false<\/span>;   <span class=\"hljs-comment\">\/\/ counter is now a boolean<\/span>\ncounter = <span class=\"hljs-string\">\"foo\"<\/span>;   <span class=\"hljs-comment\">\/\/ counter is now a string<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To get the current type of the value that the variable stores, you use the <code><a href=\"https:\/\/www.javascripttutorial.net\/javascript-typeof\/\">typeof<\/a><\/code> operator:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> counter = <span class=\"hljs-number\">120<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span>(counter)); <span class=\"hljs-comment\">\/\/ \"number\"<\/span>\n\ncounter = <span class=\"hljs-literal\">false<\/span>; \n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span>(counter)); <span class=\"hljs-comment\">\/\/ \"boolean\"<\/span>\n\ncounter = <span class=\"hljs-string\">\"Hi\"<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span>(counter)); <span class=\"hljs-comment\">\/\/ \"string\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JSON \/ JSON with Comments\" data-shcb-language-slug=\"json\"><span><code class=\"hljs language-json\"><span class=\"hljs-string\">\"number\"<\/span>\n<span class=\"hljs-string\">\"boolean\"<\/span>\n<span class=\"hljs-string\">\"string\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JSON \/ JSON with Comments<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">json<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"undefined\">The undefined type<\/h2>\n\n\n\n<p>The <code>undefined<\/code> type is a primitive type that has only one value <code>undefined<\/code>. By default, when a variable is declared but not initialized, it is assigned the value of <code>undefined<\/code>.<\/p>\n\n\n\n<p>Consider the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> counter;\n<span class=\"hljs-built_in\">console<\/span>.log(counter);        <span class=\"hljs-comment\">\/\/ undefined<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span> counter); <span class=\"hljs-comment\">\/\/ undefined<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>counter<\/code> is a variable. Since <code>counter<\/code> hasn&#8217;t been initialized, it is assigned the value <code>undefined<\/code>. The type of <code>counter<\/code> is also <code>undefined<\/code>.<\/p>\n\n\n\n<p>It&#8217;s important to note that the <code>typeof<\/code> operator also returns <code>undefined<\/code> when you call it on a variable that hasn&#8217;t been declared:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span> undeclaredVar); <span class=\"hljs-comment\">\/\/ undefined<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"null\">The null type<\/h2>\n\n\n\n<p>The <code>null<\/code> type is the second primitive data type that also has only one value <code>null<\/code>. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> obj = <span class=\"hljs-literal\">null<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span> obj); <span class=\"hljs-comment\">\/\/ object<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p class=\"note\">The typeof null returns object is a known bug in JavaScript. A proposal to fix this was proposed but rejected. The reason was the that fix would break a lot of existing sites.<\/p>\n\n\n\n<p>JavaScript defines that <code>null<\/code> is equal to <code>undefined<\/code> as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-literal\">null<\/span> == <span class=\"hljs-literal\">undefined<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"number\">The number type<\/h2>\n\n\n\n<p>JavaScript uses the <code>number<\/code> type to represent both integer and floating-point numbers.<\/p>\n\n\n\n<p>The following statement declares a variable and initializes its value with an integer:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> num = <span class=\"hljs-number\">100<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To represent a floating-point number, you include a decimal point followed by at least one number. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> price= <span class=\"hljs-number\">12.5<\/span>; \n<span class=\"hljs-keyword\">let<\/span> discount = <span class=\"hljs-number\">0.05<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that JavaScript automatically converts a floating-point number into an integer number if the number appears to be&nbsp;a whole number. <\/p>\n\n\n\n<p>The reason is that Javascript always wants to use less&nbsp;memory since&nbsp;a floating-point value uses twice as much memory as an integer value. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> price = <span class=\"hljs-number\">200.00<\/span>; <span class=\"hljs-comment\">\/\/ interpreted as an integer 200<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To get the range of the number type, you use <code>Number.MIN_VALUE<\/code> and <code>Number.MAX_VALUE<\/code>. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">Number<\/span>.MAX_VALUE); <span class=\"hljs-comment\">\/\/ 1.7976931348623157e+308<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">Number<\/span>.MIN_VALUE); <span class=\"hljs-comment\">\/\/ 5e-324<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Also, you can use <code>Infinity<\/code> and <code>-Infinity<\/code> to represent the infinite number. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">Number<\/span>.MAX_VALUE + <span class=\"hljs-built_in\">Number<\/span>.MAX_VALUE); <span class=\"hljs-comment\">\/\/ Infinity<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(-<span class=\"hljs-built_in\">Number<\/span>.MAX_VALUE - <span class=\"hljs-built_in\">Number<\/span>.MAX_VALUE); <span class=\"hljs-comment\">\/\/ -Infinity<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">NaN<\/h3>\n\n\n\n<p><code>NaN<\/code> stands for Not a Number. It is a special numeric value that indicates an invalid number. For example, the&nbsp;division of a string by a number returns <code>NaN<\/code>:.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'a'<\/span>\/<span class=\"hljs-number\">2<\/span>); <span class=\"hljs-comment\">\/\/ NaN;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>NaN<\/code> has two special characteristics:<\/p>\n\n\n\n<ul><li>Any operation with <code>NaN<\/code> returns <code>NaN<\/code>.<\/li><li>The <code>NaN<\/code> does not equal any value, including itself.<\/li><\/ul>\n\n\n\n<p>Here are some examples:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-literal\">NaN<\/span>\/<span class=\"hljs-number\">2<\/span>); <span class=\"hljs-comment\">\/\/ NaN<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-literal\">NaN<\/span> == <span class=\"hljs-literal\">NaN<\/span>); <span class=\"hljs-comment\">\/\/ false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"string\">The string type<\/h2>\n\n\n\n<p>In JavaScript, a string is a sequence of zero or more characters. A string literal begins and ends with either a single quote(<code>'<\/code>) or a double quote (<code>\"<\/code>). <\/p>\n\n\n\n<p>A string that begins with a double quote must end with a double quote. Likewise, a string that begins with a single quote must also end with a single quote:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> greeting = <span class=\"hljs-string\">'Hi'<\/span>;\n<span class=\"hljs-keyword\">let<\/span> message  = <span class=\"hljs-string\">\"Bye\"<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you want to single quote or double quotes in a literal string, you need to use the backslash to escape it. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> message = <span class=\"hljs-string\">'I\\'m also a valid string'<\/span>; <span class=\"hljs-comment\">\/\/ use \\ to escape the single quote (')<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>JavaScript strings are immutable. This means that it cannot be modified once created. However, you can create a new string from an existing string. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> str = <span class=\"hljs-string\">'JavaScript'<\/span>;\nstr = str + <span class=\"hljs-string\">' String'<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example:<\/p>\n\n\n\n<ul><li>First, declare the <code>str<\/code> variable and initialize it to a string of <code>'JavaScript'<\/code>.<\/li><li>Second, use the <code>+<\/code> operator to combine <code>'JavaScript'<\/code> with <code>' String'<\/code> to make its value as <code>'Javascript String'<\/code>.<\/li><\/ul>\n\n\n\n<p>Behind the scene, the JavaScript engine creates a new string that holds the new string <code>'JavaScript String'<\/code> and destroys the original strings <code>'JavaScript'<\/code> and <code>' String'<\/code>.<\/p>\n\n\n\n<p>The following example attempts to change the first character of the string JavaScript:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> s = <span class=\"hljs-string\">'JavaScript'<\/span>;\ns&#91;<span class=\"hljs-number\">0<\/span>] = <span class=\"hljs-string\">'j'<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(s)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The output is:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-19\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-string\">'JavaScript'<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-19\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>But not:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-20\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-string\">'javaScript'<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-20\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"boolean\">The boolean type<\/h2>\n\n\n\n<p>The <code>boolean<\/code> type has two literal values: <code>true<\/code> and <code>false<\/code> in lowercase. The following example declares two variables that hold the boolean values.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-21\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> inProgress = <span class=\"hljs-literal\">true<\/span>;\n<span class=\"hljs-keyword\">let<\/span> completed = <span class=\"hljs-literal\">false<\/span>;\n\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span> completed); <span class=\"hljs-comment\">\/\/ boolean<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-21\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>JavaScript allows values of other types to be converted into boolean values of <code>true<\/code> or <code>false<\/code>.<\/p>\n\n\n\n<p>To convert a value of another data type into a boolean value, you use the <a href=\"https:\/\/www.javascripttutorial.net\/javascript-boolean\/\"><code>Boolean()<\/code><\/a> function. The following table shows the conversion rules:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Type<\/th><th>true<\/th><th>false<\/th><\/tr><\/thead><tbody><tr><td>string<\/td><td>non-empty string<\/td><td>empty string<\/td><\/tr><tr><td>number<\/td><td>non-zero number and Infinity<\/td><td>0, NaN<\/td><\/tr><tr><td>object<\/td><td>non-null object<\/td><td>null<\/td><\/tr><tr><td>undefined<\/td><td>&nbsp;<\/td><td>undefined<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-22\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">Boolean<\/span>(<span class=\"hljs-string\">'Hi'<\/span>));<span class=\"hljs-comment\">\/\/ true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">Boolean<\/span>(<span class=\"hljs-string\">''<\/span>));  <span class=\"hljs-comment\">\/\/ false<\/span>\n\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">Boolean<\/span>(<span class=\"hljs-number\">20<\/span>));  <span class=\"hljs-comment\">\/\/ true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">Boolean<\/span>(<span class=\"hljs-literal\">Infinity<\/span>));  <span class=\"hljs-comment\">\/\/ true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">Boolean<\/span>(<span class=\"hljs-number\">0<\/span>));  <span class=\"hljs-comment\">\/\/ false<\/span>\n\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">Boolean<\/span>({<span class=\"hljs-attr\">foo<\/span>: <span class=\"hljs-number\">100<\/span>}));  <span class=\"hljs-comment\">\/\/ true on non-empty object<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">Boolean<\/span>(<span class=\"hljs-literal\">null<\/span>));<span class=\"hljs-comment\">\/\/ false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-22\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"symbol\">The symbol type<\/h2>\n\n\n\n<p>JavaScript added a primitive type in ES6: the <code><a href=\"https:\/\/www.javascripttutorial.net\/es6\/symbol\/\">symbol<\/a><\/code>. Different from other primitive types, the <code>symbol<\/code> type does not have a literal form.<\/p>\n\n\n\n<p>To create a symbol, you call the <code>Symbol<\/code> function as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-23\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> s1 = <span class=\"hljs-built_in\">Symbol<\/span>();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-23\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>Symbol<\/code> function creates a new unique value every time you call it.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-24\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-built_in\">Symbol<\/span>() == <span class=\"hljs-built_in\">Symbol<\/span>()); <span class=\"hljs-comment\">\/\/ false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-24\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that you&#8217;ll learn more about symbols in the <a href=\"https:\/\/www.javascripttutorial.net\/es6\/symbol\/\" target=\"_blank\" rel=\"noreferrer noopener\">symbol tutorial<\/a>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The bigint type<\/h2>\n\n\n\n<p>The <code>bigint<\/code>&nbsp;type represents the whole numbers that are larger than 2<sup>53<\/sup>&nbsp;\u2013 1. To form a <code>bigint<\/code> literal number, you append the letter <code>n<\/code> at the end of the number:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-25\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> pageView = <span class=\"hljs-number\">9007199254740991n<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span>(pageView)); <span class=\"hljs-comment\">\/\/ 'bigint'<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-25\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And you&#8217;ll learn more about the <a href=\"https:\/\/www.javascripttutorial.net\/es-next\/javascript-bigint\/\" target=\"_blank\" rel=\"noreferrer noopener\"><code>bigint<\/code> type here<\/a>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"object\">The object type<\/h2>\n\n\n\n<p>In JavaScript, an <a href=\"https:\/\/www.javascripttutorial.net\/home\/javascript-objects\/\">object<\/a> is a collection of&nbsp;<a href=\"https:\/\/www.javascripttutorial.net\/home\/javascript-object-properties\/\">properties<\/a>, where each property is defined as a key-value pair.<\/p>\n\n\n\n<p>The following example defines an empty object using the object literal syntax:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-26\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> emptyObject = {};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-26\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following example defines the <code>person<\/code> object with two properties: <code>firstName<\/code> and <code>lastName<\/code>.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-27\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> person = {\n    <span class=\"hljs-attr\">firstName<\/span>: <span class=\"hljs-string\">'John'<\/span>,\n    <span class=\"hljs-attr\">lastName<\/span>: <span class=\"hljs-string\">'Doe'<\/span>\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-27\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>A&nbsp;property name of an object can be any string. You can use quotes around the property name if it is not a valid identifier.<\/p>\n\n\n\n<p>For example, if the person object has a property <code>first-name<\/code>, you must place it in the quotes such as <code>\"first-name\"<\/code>.<\/p>\n\n\n\n<p>A property of an object can hold an object. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-28\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> contact = {\n    <span class=\"hljs-attr\">firstName<\/span>: <span class=\"hljs-string\">'John'<\/span>,\n    <span class=\"hljs-attr\">lastName<\/span>: <span class=\"hljs-string\">'Doe'<\/span>,\n    <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'john.doe@example.com'<\/span>,\n    <span class=\"hljs-attr\">phone<\/span>: <span class=\"hljs-string\">'(408)-555-9999'<\/span>,\n    <span class=\"hljs-attr\">address<\/span>: {\n        <span class=\"hljs-attr\">building<\/span>: <span class=\"hljs-string\">'4000'<\/span>,\n        <span class=\"hljs-attr\">street<\/span>: <span class=\"hljs-string\">'North 1st street'<\/span>,\n        <span class=\"hljs-attr\">city<\/span>: <span class=\"hljs-string\">'San Jose'<\/span>,\n        <span class=\"hljs-attr\">state<\/span>: <span class=\"hljs-string\">'CA'<\/span>,\n        <span class=\"hljs-attr\">country<\/span>: <span class=\"hljs-string\">'USA'<\/span>\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-28\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>contact<\/code> object has the&nbsp;<code>firstName<\/code>, <code>lastName<\/code>, <code>email<\/code>, <code>phone<\/code>, and <code>address<\/code> properties. <\/p>\n\n\n\n<p>The <code>address<\/code> property itself holds an object that has <code>building<\/code>, &nbsp;<code>street<\/code>, <code>city<\/code>, <code>state<\/code>, and <code>country<\/code> properties.<\/p>\n\n\n\n<p>To access a object&#8217;s property, you can use<\/p>\n\n\n\n<ul><li>The dot notation (<code>.<\/code>) <\/li><li>The array-like notation (<code>[]<\/code>).<\/li><\/ul>\n\n\n\n<p>The following example uses the dot notation (<code>.<\/code>) to access the <code>firstName<\/code>&nbsp;and&nbsp;<code>lastName<\/code> properties of the <code>contact<\/code> object.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-29\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">console<\/span><span class=\"hljs-selector-class\">.log<\/span>(<span class=\"hljs-selector-tag\">contact<\/span><span class=\"hljs-selector-class\">.firstName<\/span>);\n<span class=\"hljs-selector-tag\">console<\/span><span class=\"hljs-selector-class\">.log<\/span>(<span class=\"hljs-selector-tag\">contact<\/span><span class=\"hljs-selector-class\">.lastName<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-29\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you reference a property that does not exist, you&#8217;ll get an <code>undefined<\/code> value. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-30\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(contact.age); <span class=\"hljs-comment\">\/\/ undefined<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-30\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following example uses the array-like notation to access the <code>email<\/code>&nbsp;and <code>phone<\/code> properties of the <code>contact<\/code> object.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-31\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(contact&#91;<span class=\"hljs-string\">'phone'<\/span>]); <span class=\"hljs-comment\">\/\/ '(408)-555-9999'<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(contact&#91;<span class=\"hljs-string\">'email'<\/span>]); <span class=\"hljs-comment\">\/\/ 'john.doe@example.com'<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-31\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>JavaScript has the primitive types: <code>number<\/code>, <code>string<\/code>, <code>boolean<\/code>, <code>null<\/code>, <code>undefined<\/code>, <code>symbol<\/code> and <code>bigint<\/code> and a complex type: <code>object<\/code>.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"127\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/javascript-data-types\/\"\n\t\t\t\tdata-post-title=\"JavaScript Data Types\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"127\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/javascript-data-types\/\"\n\t\t\t\tdata-post-title=\"JavaScript Data Types\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>JavaScript data types include primitive types: undefined, null, string, boolean, number, BigInt, and symbol and the complex type object.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":6,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Data Types<\/title>\n<meta name=\"description\" content=\"JavaScript data types include primitive types: undefined, null, string, boolean, number, BigInt, and symbol, and the complex type object.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.javascripttutorial.net\/javascript-data-types\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Data Types\" \/>\n<meta property=\"og:description\" content=\"JavaScript data types include primitive types: undefined, null, string, boolean, number, BigInt, and symbol, and the complex type object.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.javascripttutorial.net\/javascript-data-types\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-08-17T04:37:41+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/01\/JavaScript-data-types.svg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.javascripttutorial.net\/javascript-data-types\/\",\"url\":\"https:\/\/www.javascripttutorial.net\/javascript-data-types\/\",\"name\":\"JavaScript Data Types\",\"isPartOf\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\"},\"datePublished\":\"2016-08-05T05:02:25+00:00\",\"dateModified\":\"2022-08-17T04:37:41+00:00\",\"description\":\"JavaScript data types include primitive types: undefined, null, string, boolean, number, BigInt, and symbol, and the complex type object.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/javascript-data-types\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.javascripttutorial.net\/javascript-data-types\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.javascripttutorial.net\/javascript-data-types\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Data Types\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\",\"url\":\"https:\/\/www.javascripttutorial.net\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.javascripttutorial.net\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Data Types","description":"JavaScript data types include primitive types: undefined, null, string, boolean, number, BigInt, and symbol, and the complex type object.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.javascripttutorial.net\/javascript-data-types\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Data Types","og_description":"JavaScript data types include primitive types: undefined, null, string, boolean, number, BigInt, and symbol, and the complex type object.","og_url":"https:\/\/www.javascripttutorial.net\/javascript-data-types\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-08-17T04:37:41+00:00","og_image":[{"url":"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/01\/JavaScript-data-types.svg"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/www.javascripttutorial.net\/javascript-data-types\/","url":"https:\/\/www.javascripttutorial.net\/javascript-data-types\/","name":"JavaScript Data Types","isPartOf":{"@id":"https:\/\/www.javascripttutorial.net\/#website"},"datePublished":"2016-08-05T05:02:25+00:00","dateModified":"2022-08-17T04:37:41+00:00","description":"JavaScript data types include primitive types: undefined, null, string, boolean, number, BigInt, and symbol, and the complex type object.","breadcrumb":{"@id":"https:\/\/www.javascripttutorial.net\/javascript-data-types\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.javascripttutorial.net\/javascript-data-types\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.javascripttutorial.net\/javascript-data-types\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":3,"name":"JavaScript Data Types"}]},{"@type":"WebSite","@id":"https:\/\/www.javascripttutorial.net\/#website","url":"https:\/\/www.javascripttutorial.net\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.javascripttutorial.net\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/127"}],"collection":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/comments?post=127"}],"version-history":[{"count":4,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/127\/revisions"}],"predecessor-version":[{"id":90228,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/127\/revisions\/90228"}],"up":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/media?parent=127"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}