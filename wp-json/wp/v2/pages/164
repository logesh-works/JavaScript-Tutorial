{"id":164,"date":"2016-08-07T03:42:34","date_gmt":"2016-08-07T10:42:34","guid":{"rendered":"http:\/\/https://jsprifix.netlify.app/\/?page_id=164"},"modified":"2022-08-16T21:40:45","modified_gmt":"2022-08-17T04:40:45","slug":"javascript-function-type","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/","title":{"rendered":"JavaScript Function Type"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the JavaScript <code>Function<\/code> type, which is the type of all functions in JavaScript.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the JavaScript Function type<\/h2>\n\n\n\n<p>In JavaScript, all <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-function\/\">functions<\/a> are <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-objects\/\">objects<\/a>. They are the instances of the <code>Function<\/code> type. Because functions are objects, they have properties and methods like other objects.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Functions properties<\/h3>\n\n\n\n<p>Each function has two important properties: <code>length<\/code> and <code>prototype<\/code>.<\/p>\n\n\n\n<ul><li>The <code>length<\/code> property determines the number of named arguments specified in the function declaration.<\/li><li>The <code>prototype<\/code> property references the actual function object.<\/li><\/ul>\n\n\n\n<p>See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span>(<span class=\"hljs-params\">x, y<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">return<\/span> x + y;\n}\n\n<span class=\"hljs-built_in\">console<\/span>.log(add.length); <span class=\"hljs-comment\">\/\/ 2<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(add.prototype); <span class=\"hljs-comment\">\/\/ Object{}<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>add()<\/code> function accepts two arguments <code>x<\/code> and <code>y<\/code>. Therefore, the <code>length<\/code> property returns two.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">new.target<\/h3>\n\n\n\n<p>Typically, you call a function normally like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> result = add(<span class=\"hljs-number\">10<\/span>,<span class=\"hljs-number\">20<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(result); <span class=\"hljs-comment\">\/\/ 30<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Also, you can call a function with <code>new<\/code> keyword as a constructor:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> obj = <span class=\"hljs-keyword\">new<\/span> add(<span class=\"hljs-number\">10<\/span>,<span class=\"hljs-number\">20<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>ES6 introduced the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-new-target\/\">new.target<\/a><\/code> pseudo-property that allows you to detect whether a function or constructor was called using the <code>new<\/code> operator.<\/p>\n\n\n\n<p>If a function is called normally, the <code>new.target<\/code> is <code>undefined<\/code>. However, if the function is called using the <code>new<\/code> keyword as a constructor, the <code>new.target<\/code> return a reference to the constructor.<\/p>\n\n\n\n<p>For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span>(<span class=\"hljs-params\">x, y<\/span>) <\/span>{\n  <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">new<\/span>.target);\n  <span class=\"hljs-keyword\">return<\/span> x + y;\n}\n\n<span class=\"hljs-keyword\">let<\/span> result = add(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>);\n<span class=\"hljs-keyword\">let<\/span> obj = <span class=\"hljs-keyword\">new<\/span> add(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-literal\">undefined<\/span>\n&#91;<span class=\"hljs-built_in\">Function<\/span>: add]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>By using the <code>new.target<\/code>, you can control how a function will be called. <\/p>\n\n\n\n<p>For example, to prevent the <code>add()<\/code> function from being called with the <code>new<\/code> keyword as a constructor, you can throw an error by checking the <code>new.target<\/code> like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span>(<span class=\"hljs-params\">x, y<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">new<\/span>.target) {\n    <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-string\">'The add function cannot be called as a constructor'<\/span>;\n  }\n  <span class=\"hljs-keyword\">return<\/span> x + y;\n}\n\n<span class=\"hljs-keyword\">let<\/span> obj = <span class=\"hljs-keyword\">new<\/span> add(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(obj);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Function methods: apply, call, and bind<\/h2>\n\n\n\n<p>A function object has three important methods: <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-apply-method\/\">apply()<\/a><\/code>, <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-call\/\">call()<\/a><\/code> and <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-bind\/\">bind()<\/a><\/code>.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The <code>apply()<\/code> and <code>call()<\/code> methods<\/h3>\n\n\n\n<p>The <code>apply()<\/code> and <code>call()<\/code> methods call a function with a given <code>this<\/code> value and arguments.<\/p>\n\n\n\n<p>The difference between the <code>apply()<\/code> and <code>call()<\/code> is that you need to pass the arguments to the <code>apply()<\/code> method as an array-like object, whereas you pass the arguments to the <code>call()<\/code> function individually. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> cat = { <span class=\"hljs-attr\">type<\/span>: <span class=\"hljs-string\">'Cat'<\/span>, <span class=\"hljs-attr\">sound<\/span>: <span class=\"hljs-string\">'Meow'<\/span> };\n<span class=\"hljs-keyword\">let<\/span> dog = { <span class=\"hljs-attr\">type<\/span>: <span class=\"hljs-string\">'Dog'<\/span>, <span class=\"hljs-attr\">sound<\/span>: <span class=\"hljs-string\">'Woof'<\/span> };\n\n<span class=\"hljs-keyword\">const<\/span> say = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">message<\/span>) <\/span>{\n  <span class=\"hljs-built_in\">console<\/span>.log(message);\n  <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">this<\/span>.type + <span class=\"hljs-string\">' says '<\/span> + <span class=\"hljs-keyword\">this<\/span>.sound);\n};\n\nsay.apply(cat, &#91;<span class=\"hljs-string\">'What does a cat say?'<\/span>]);\nsay.apply(dog, &#91;<span class=\"hljs-string\">'What does a dog say?'<\/span>]);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">What does a cat sound?\nCat says Meow\nWhat does a dog sound?\nDog says Woof<\/code><\/span><\/pre>\n\n\n<p>In this example:<\/p>\n\n\n\n<p>First, declare two objects <code>cat<\/code> and <code>dog<\/code> with two properties:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> cat = { <span class=\"hljs-attr\">type<\/span>: <span class=\"hljs-string\">'Cat'<\/span>, <span class=\"hljs-attr\">sound<\/span>: <span class=\"hljs-string\">'Meow'<\/span> };\n<span class=\"hljs-keyword\">let<\/span> dog = { <span class=\"hljs-attr\">type<\/span>: <span class=\"hljs-string\">'Dog'<\/span>, <span class=\"hljs-attr\">sound<\/span>: <span class=\"hljs-string\">'Woof'<\/span> };<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, define the <code>say()<\/code> function that accepts one argument:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> say = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">message<\/span>) <\/span>{\n  <span class=\"hljs-built_in\">console<\/span>.log(message);\n  <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">this<\/span>.type + <span class=\"hljs-string\">' says '<\/span> + <span class=\"hljs-keyword\">this<\/span>.sound);\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Third, call the <code>say()<\/code> function via the <code>apply()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">say<\/span><span class=\"hljs-selector-class\">.apply<\/span>(<span class=\"hljs-selector-tag\">cat<\/span>, <span class=\"hljs-selector-attr\">&#91;<span class=\"hljs-string\">'What does a cat say?'<\/span>]<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the first argument of the &nbsp;<code>apply()<\/code> method is the <code>cat<\/code> object. Therefore, the <code>this<\/code> object in the <code>say()<\/code> function references the <code>cat<\/code> object. <\/p>\n\n\n\n<p>Fourth, call <code>say()<\/code> function and pass the <code>dog<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">say<\/span><span class=\"hljs-selector-class\">.apply<\/span>(<span class=\"hljs-selector-tag\">dog<\/span>, <span class=\"hljs-selector-attr\">&#91;<span class=\"hljs-string\">'What does a dog say?'<\/span>]<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>this<\/code> in the <code>say()<\/code> function reference the <code>dog<\/code> object.<\/p>\n\n\n\n<p>The <code>call()<\/code> method like the <code>apply()<\/code> method except for the way you pass the arguments to the function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">say.call(cat, <span class=\"hljs-string\">'What does a cat say?'<\/span>);\nsay.call(dog, <span class=\"hljs-string\">'What does a dog say?'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">The <code>bind()<\/code> method<\/h3>\n\n\n\n<p>The <code>bind()<\/code> method creates a new function instance whose <code>this<\/code> value is bound to the object that you provide. For example:<\/p>\n\n\n\n<p>First, define an object named <code>car<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> car = {\n    <span class=\"hljs-attr\">speed<\/span>: <span class=\"hljs-number\">5<\/span>,\n    <span class=\"hljs-attr\">start<\/span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Start with '<\/span> + <span class=\"hljs-keyword\">this<\/span>.speed + <span class=\"hljs-string\">' km\/h'<\/span>);\n    }\n};\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Then, define another object named <code>aircraft<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> aircraft = {\n    <span class=\"hljs-attr\">speed<\/span>: <span class=\"hljs-number\">10<\/span>,\n    <span class=\"hljs-attr\">fly<\/span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Flying'<\/span>);\n    }\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The aircraft has no <code>start()<\/code> method. To start an aircraft, you can use the <code>bind()<\/code> method of the <code>start()<\/code> method of the <code>car<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> taxiing = car.start.bind(aircraft);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this statement, we change the <code>this<\/code> value inside the <code>start()<\/code> method of the <code>car<\/code> object to the&nbsp; <code>aircraft<\/code> object.&nbsp; The <code>bind()<\/code> method returns a new function that is assigned to the <code>taxiing<\/code> variable.<\/p>\n\n\n\n<p>Now, you can call the <code>start()<\/code> method via the <code>taxiing<\/code>&nbsp;variable:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">taxiing();<\/code><\/span><\/pre>\n\n\n<p>It will show the following message:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">Start <span class=\"hljs-keyword\">with<\/span> <span class=\"hljs-number\">10<\/span> km\/h<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following uses the <code>call()<\/code> method to call the <code>start()<\/code> method on the <code>aircraft<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">car<\/span><span class=\"hljs-selector-class\">.start<\/span><span class=\"hljs-selector-class\">.call<\/span>(<span class=\"hljs-selector-tag\">aircraft<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>As you can see, the <code>bind()<\/code> method creates a new function that you can execute later while the <code>call()<\/code> method executes the function immediately. This is the main difference between the <code>bind()<\/code> and <code>call()<\/code> methods.<\/p>\n\n\n\n<p>Technically, the aircraft object borrows the <code>start()<\/code> method of the <code>car<\/code> object via the <code>bind()<\/code>, <code>call()<\/code> or <code>apply()<\/code> method.<\/p>\n\n\n\n<p>For this reason, the <code>bind()<\/code>, <code>call()<\/code>, and <code>apply()<\/code> methods are also known as borrowing functions.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>All functions are instances of the <code>Function<\/code> type, which are the objects that have properties and methods.<\/li><li>A function has two important properties: <code>length<\/code> and <code>prototype<\/code>.<\/li><li>A function also has three important methods: <code>call()<\/code>, <code>apply()<\/code>, and <code>bind()<\/code>.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"164\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/\"\n\t\t\t\tdata-post-title=\"JavaScript Function Type\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"164\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/\"\n\t\t\t\tdata-post-title=\"JavaScript Function Type\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about the JavaScript Function type that allows you to use functions as objects.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":74,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>The Ultimate Guide to the JavaScript Function Type<\/title>\n<meta name=\"description\" content=\"This tutorial introduces you to the JavaScript Function type that allows you to use functions as objects.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"The Ultimate Guide to the JavaScript Function Type\" \/>\n<meta property=\"og:description\" content=\"This tutorial introduces you to the JavaScript Function type that allows you to use functions as objects.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-08-17T04:40:45+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/\",\"name\":\"The Ultimate Guide to the JavaScript Function Type\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2016-08-07T10:42:34+00:00\",\"dateModified\":\"2022-08-17T04:40:45+00:00\",\"description\":\"This tutorial introduces you to the JavaScript Function type that allows you to use functions as objects.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Function Type\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"The Ultimate Guide to the JavaScript Function Type","description":"This tutorial introduces you to the JavaScript Function type that allows you to use functions as objects.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/","og_locale":"en_US","og_type":"article","og_title":"The Ultimate Guide to the JavaScript Function Type","og_description":"This tutorial introduces you to the JavaScript Function type that allows you to use functions as objects.","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-08-17T04:40:45+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/","name":"The Ultimate Guide to the JavaScript Function Type","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2016-08-07T10:42:34+00:00","dateModified":"2022-08-17T04:40:45+00:00","description":"This tutorial introduces you to the JavaScript Function type that allows you to use functions as objects.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-function-type\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript Function Type"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/164"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=164"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/164\/revisions"}],"predecessor-version":[{"id":90229,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/164\/revisions\/90229"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=164"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}