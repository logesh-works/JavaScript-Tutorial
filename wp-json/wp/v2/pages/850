{"id":850,"date":"2016-10-30T02:29:18","date_gmt":"2016-10-30T09:29:18","guid":{"rendered":"http:\/\/https://jsprifix.netlify.app/\/?page_id=850"},"modified":"2022-01-27T19:15:45","modified_gmt":"2022-01-28T03:15:45","slug":"javascript-try-catch","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/","title":{"rendered":"JavaScript try&#8230;catch"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to use the JavaScript <code>try...catch<\/code> statement to handle exceptions.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"introduction-to-javascript-try-catch-statement\">Introduction to JavaScript try&#8230;catch statement<\/h2>\n\n\n\n<p>The following example attempts to call the <code>add()<\/code> function that doesn&#8217;t exist:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> result = add(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(result);\n\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Bye'<\/span>);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And the JavaScript engine issues the following error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">Uncaught <span class=\"hljs-built_in\">TypeError<\/span>: add is not a <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span><\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The error message states that the <code>add<\/code> is not a <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-function\/\">function<\/a> and the error type is <code>TypeError<\/code>. <\/p>\n\n\n\n<p>When the JavaScript engine encounters an error, it issues that error and immediately terminates the execution of the entire script. In the above example, the code execution stops at the first line.<\/p>\n\n\n\n<p>Sometimes, you want to handle the error and continue the execution. To do that, you use the <code>try...catch<\/code> statement with the following syntax:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">try<\/span> {\n  <span class=\"hljs-comment\">\/\/ code may cause error<\/span>\n} <span class=\"hljs-keyword\">catch<\/span>(error){\n  <span class=\"hljs-comment\">\/\/ code to handle error<\/span>\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this syntax:<\/p>\n\n\n\n<ul><li>First, place the code that may cause an error in the <code>try<\/code> block.<\/li><li>Second, implement the logic to handle the error in the <code>catch<\/code> block.<\/li><\/ul>\n\n\n\n<p>If an error occurs in the <code>try<\/code> block, the JavaScript engine immediately executes the code in the <code>catch<\/code> block. Also, the JavaScript engine provides you with an error object that contains detailed information about the error.<\/p>\n\n\n\n<p>Basically, the error object has at least two properties:<\/p>\n\n\n\n<ul><li><code>name<\/code> specifies the error name.<\/li><li><code>message<\/code> explains the error in detail.<\/li><\/ul>\n\n\n\n<p>If no error occurs in the <code>try<\/code> block, the JavaScript engine ignores the <code>catch<\/code> block.<\/p>\n\n\n\n<p class=\"note\">Note that web browsers may add more properties to the <code>error<\/code> object. For example, Firefox adds <code>filename<\/code>, <code>lineNumber<\/code>, and <code>stack<\/code> properties to the <code>error<\/code> object.<\/p>\n\n\n\n<p>It&#8217;s a good practice to place only the code that may cause an exception in the <code>try<\/code> block.<\/p>\n\n\n\n<p>The following flowchart illustrates how the <code>try...catch<\/code> statement works:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><a href=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-try-catch-1.svg\"><img decoding=\"async\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-try-catch-1.svg\" alt=\"\" class=\"wp-image-89487\"\/><\/a><\/figure><\/div>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"javascript-try-catch-statement-examples\">JavaScript try&#8230;catch statement examples<\/h2>\n\n\n\n<p>The following example uses the <code>try...catch<\/code> statement to handle the error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">try<\/span> {\n  <span class=\"hljs-keyword\">let<\/span> result = add(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>);\n  <span class=\"hljs-built_in\">console<\/span>.log(result);\n} <span class=\"hljs-keyword\">catch<\/span> (e) {\n  <span class=\"hljs-built_in\">console<\/span>.log({ <span class=\"hljs-attr\">name<\/span>: e.name, <span class=\"hljs-attr\">message<\/span>: e.message });\n}\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Bye'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\">{<span class=\"hljs-attribute\">name<\/span>: <span class=\"hljs-string\">'TypeError'<\/span>, message: <span class=\"hljs-string\">'add is not a function'<\/span>}\n<span class=\"hljs-selector-tag\">Bye<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we call the <code>add()<\/code> function and assign the return value to the <code>result<\/code> variable. Because the <code>add()<\/code> function doesn&#8217;t exist, the JavaScript engine skips the statement that outputs the result to the console: <\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(result);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And it immediately executes the statement in the <code>catch<\/code> block that outputs the error name and message:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">console<\/span><span class=\"hljs-selector-class\">.log<\/span>({ <span class=\"hljs-attribute\">name<\/span>: e.name, message: e.message });<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Since we already handled the error, the JavaScript engine continues to execute the last statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Bye'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\" id=\"ingoring-the-catch-block\">Ingoring the catch block<\/h3>\n\n\n\n<p>The following example defines the <code>add()<\/code> function that returns the sum of two arguments:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> add = <span class=\"hljs-function\">(<span class=\"hljs-params\">x, y<\/span>) =&gt;<\/span> x + y;\n\n<span class=\"hljs-keyword\">try<\/span> {\n  <span class=\"hljs-keyword\">let<\/span> result = add(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>);\n  <span class=\"hljs-built_in\">console<\/span>.log(result);\n} <span class=\"hljs-keyword\">catch<\/span> (e) {\n  <span class=\"hljs-built_in\">console<\/span>.log({ <span class=\"hljs-attr\">name<\/span>: e.name, <span class=\"hljs-attr\">message<\/span>: e.message });\n}\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Bye'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">30\nBye<\/code><\/span><\/pre>\n\n\n<p>In this example, no error occurs because the <code>add()<\/code> function exists. Therefore, the JavaScript engine skips the <code>catch<\/code> block.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"the-exception-identifier\">The exception identifier<\/h2>\n\n\n\n<p>When an exception occurs in the try block, the exception variable (e) in the catch block store the exception object. <\/p>\n\n\n\n<p>If you don&#8217;t want to use the exception variable, you can omit it like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">try<\/span> {\n  <span class=\"hljs-comment\">\/\/...<\/span>\n} <span class=\"hljs-keyword\">catch<\/span> {\n  <span class=\"hljs-comment\">\/\/...<\/span>\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>For example, the following uses the try&#8230;catch statement without the exception variable:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> isValidJSON = <span class=\"hljs-function\">(<span class=\"hljs-params\">str<\/span>) =&gt;<\/span> {\r\n  <span class=\"hljs-keyword\">try<\/span> {\r\n    <span class=\"hljs-built_in\">JSON<\/span>.parse(str);\r\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-literal\">true<\/span>;\r\n  } <span class=\"hljs-keyword\">catch<\/span> {\r\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-literal\">false<\/span>;\r\n  }\r\n};\r\n\r\n<span class=\"hljs-keyword\">let<\/span> valid = isValidJSON(<span class=\"hljs-string\">`{\"language\":\"JavaScript\"}`<\/span>);\r\n<span class=\"hljs-built_in\">console<\/span>.log(valid);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, define the <code>isValidJSON()<\/code> function that accepts a string and returns <code>true<\/code> if that string is a valid JSON or <code>false<\/code> otherwise.<\/p>\n\n\n\n<p>To validate JSON, the <code>isValidJSON()<\/code> function uses the <code>JSON.parse()<\/code> method and <code>try...catch<\/code> statement.<\/p>\n\n\n\n<p>The JSON.parse() method parses a JSON string and returns an object. If the input string is not valid JSON, the <code>JSON.parse()<\/code> throws an exception.<\/p>\n\n\n\n<p>If no exception occurs, the function returns <code>true<\/code> in the <code>try<\/code> block.  Otherwise, it returns <code>false<\/code> in the <code>catch<\/code> block.<\/p>\n\n\n\n<p>Second, call the <code>isValidJSON()<\/code> function and pass a JSON string into it:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> valid = isValidJSON(<span class=\"hljs-string\">`{\"language\":\"JavaScript\"}`<\/span>);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Since the input string is valid JSON format, the function returns <code>true<\/code>.<\/p>\n\n\n\n<p>Third, output the <code>result<\/code> to the console:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(valid);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"summary\">Summary<\/h2>\n\n\n\n<ul><li>Use the <code>try...catch<\/code> statement to handle exceptions in JavaScript.<\/li><li>Place only the code that may cause an exception in the <code>try<\/code> block.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"850\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/\"\n\t\t\t\tdata-post-title=\"JavaScript try&#8230;catch\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"850\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/\"\n\t\t\t\tdata-post-title=\"JavaScript try&#8230;catch\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>This tutorial shows you how to handle exceptions by using JavaScript try&#8230;catch statement.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":109,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript try...catch<\/title>\n<meta name=\"description\" content=\"This tutorial shows you how to use JavaScript try...catch statement to handle exceptions.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript try...catch\" \/>\n<meta property=\"og:description\" content=\"This tutorial shows you how to use JavaScript try...catch statement to handle exceptions.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-28T03:15:45+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-try-catch-1.svg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/\",\"name\":\"JavaScript try...catch\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2016-10-30T09:29:18+00:00\",\"dateModified\":\"2022-01-28T03:15:45+00:00\",\"description\":\"This tutorial shows you how to use JavaScript try...catch statement to handle exceptions.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript try&#8230;catch\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript try...catch","description":"This tutorial shows you how to use JavaScript try...catch statement to handle exceptions.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript try...catch","og_description":"This tutorial shows you how to use JavaScript try...catch statement to handle exceptions.","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-28T03:15:45+00:00","og_image":[{"url":"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2022\/01\/JavaScript-try-catch-1.svg"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/","name":"JavaScript try...catch","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2016-10-30T09:29:18+00:00","dateModified":"2022-01-28T03:15:45+00:00","description":"This tutorial shows you how to use JavaScript try...catch statement to handle exceptions.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript try&#8230;catch"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/850"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=850"}],"version-history":[{"count":4,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/850\/revisions"}],"predecessor-version":[{"id":89493,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/850\/revisions\/89493"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=850"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}