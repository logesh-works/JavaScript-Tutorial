{"id":88191,"date":"2021-01-20T01:46:08","date_gmt":"2021-01-20T09:46:08","guid":{"rendered":"https:\/\/www.javascripttutorial.net\/?page_id=88191"},"modified":"2022-01-16T00:33:36","modified_gmt":"2022-01-16T08:33:36","slug":"javascript-constructor-function","status":"publish","type":"page","link":"https:\/\/www.javascripttutorial.net\/javascript-constructor-function\/","title":{"rendered":"JavaScript Constructor Function"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the JavaScript constructor function and how to use the <code>new<\/code> keyword to create an object.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to JavaScript constructor functions<\/h2>\n\n\n\n<p>In the <a href=\"https:\/\/www.javascripttutorial.net\/javascript-objects\/\">JavaScript objects tutorial<\/a>, you learned how to use the object literal syntax to create a new object. <\/p>\n\n\n\n<p>For example, the following creates a new person object with two properties <code>firstName<\/code> and <code>lastName<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> person = {\n    <span class=\"hljs-attr\">firstName<\/span>: <span class=\"hljs-string\">'John'<\/span>,\n    <span class=\"hljs-attr\">lastName<\/span>: <span class=\"hljs-string\">'Doe'<\/span>\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In practice, you often need to create many similar objects like the <code>person<\/code> object.<\/p>\n\n\n\n<p>To do that, you can use a constructor function to define a custom type and the <code>new<\/code> operator to create multiple objects from this type.<\/p>\n\n\n\n<p>Technically speaking, a constructor function is a regular <a href=\"https:\/\/www.javascripttutorial.net\/javascript-function\/\">function<\/a> with the following convention:<\/p>\n\n\n\n<ul><li>The name of a constructor function starts with a capital letter like <code>Person<\/code>, <code>Document<\/code>, etc.<\/li><li>A constructor function should be called only with the <code>new<\/code> operator.<\/li><\/ul>\n\n\n\n<p class=\"note\">Note that ES6 introduces the <code><a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-class\/\">class<\/a><\/code> keyword that allows you to define a custom type. And classes are just syntactic sugar over the constructor functions with some enhancements.<\/p>\n\n\n\n<p>The following example defines a constructor function called <code>Person<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Person<\/span>(<span class=\"hljs-params\">firstName, lastName<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">this<\/span>.firstName = firstName;\n    <span class=\"hljs-keyword\">this<\/span>.lastName = lastName;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>Person<\/code> is the same as a regular function except that its name starts with the capital letter <code>P<\/code>.<\/p>\n\n\n\n<p>To create a new instance of the <code>Person<\/code>, you use the <code>new<\/code> operator:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> person = <span class=\"hljs-keyword\">new<\/span> Person(<span class=\"hljs-string\">'John'<\/span>,<span class=\"hljs-string\">'Doe'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Basically, the <code>new<\/code> operator does the following:<\/p>\n\n\n\n<ul><li>Create a new empty object and assign it to the <code>this<\/code> variable.<\/li><li>Assign the arguments <code>'John'<\/code> and <code>'Doe'<\/code> to the <code>firstName<\/code> and <code>lastName<\/code> properties of the object.<\/li><li>Return the <code>this<\/code> value.<\/li><\/ul>\n\n\n\n<p>It&#8217;s functionally equivalent to the following:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Person<\/span>(<span class=\"hljs-params\">firstName, lastName<\/span>) <\/span>{\n    <span class=\"hljs-comment\">\/\/ this = {};<\/span>\n\n    <span class=\"hljs-comment\">\/\/ add properties to this<\/span>\n    <span class=\"hljs-keyword\">this<\/span>.firstName = firstName;\n    <span class=\"hljs-keyword\">this<\/span>.lastName = lastName;\n\n    <span class=\"hljs-comment\">\/\/ return this;<\/span>\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Therefore, the following statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> person = <span class=\"hljs-keyword\">new<\/span> Person(<span class=\"hljs-string\">'John'<\/span>,<span class=\"hljs-string\">'Doe'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>&#8230; returns the same result as the following statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> person = {\n    <span class=\"hljs-attr\">firstName<\/span>: <span class=\"hljs-string\">'John'<\/span>,\n    <span class=\"hljs-attr\">lastName<\/span>: <span class=\"hljs-string\">'Doe'<\/span>\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, the constructor function <code>Person<\/code> allows you to create multiple similar objects. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> person1 = <span class=\"hljs-keyword\">new<\/span> Person(<span class=\"hljs-string\">'Jane'<\/span>,<span class=\"hljs-string\">'Doe'<\/span>)\n<span class=\"hljs-keyword\">let<\/span> person2 = <span class=\"hljs-keyword\">new<\/span> Person(<span class=\"hljs-string\">'James'<\/span>,<span class=\"hljs-string\">'Smith'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Adding methods to JavaScript constructor functions<\/h2>\n\n\n\n<p>An object may have methods that manipulate its data. To add a method to an object created via the constructor function, you can use the <code>this<\/code> keyword. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Person<\/span>(<span class=\"hljs-params\">firstName, lastName<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">this<\/span>.firstName = firstName;\n    <span class=\"hljs-keyword\">this<\/span>.lastName = lastName;\n\n    <span class=\"hljs-keyword\">this<\/span>.getFullName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.firstName + <span class=\"hljs-string\">\" \"<\/span> + <span class=\"hljs-keyword\">this<\/span>.lastName;\n    };\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Now, you can create a new <code>Person<\/code> object and invoke the <code>getFullName()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> person = <span class=\"hljs-keyword\">new<\/span> Person(<span class=\"hljs-string\">\"John\"<\/span>, <span class=\"hljs-string\">\"Doe\"<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(person.getFullName());<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">John Doe<\/code><\/span><\/pre>\n\n\n<p>The problem with the constructor function is that when you create multiple instances of the <code>Person<\/code>, the <code>this.getFullName()<\/code> is duplicated in every instance, which is not memory efficient.<\/p>\n\n\n\n<p>To resolve this, you can use the <a href=\"https:\/\/www.javascripttutorial.net\/javascript-prototype\/\">prototype<\/a> so that all instances of a custom type can share the same methods.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Returning from constructor functions<\/h2>\n\n\n\n<p>Typically, a constructor function implicitly returns <code>this<\/code> that set to the newly created object. But if it has a <code>return<\/code> statement, then here&#8217;s are the rules:<\/p>\n\n\n\n<ul><li>If <code>return<\/code> is called with an object, the constructor function returns that object instead of <code>this<\/code>.<\/li><li>If <code>return<\/code> is called with a value other than an object, it is ignored.<\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">Calling a constructor function without the <code>new<\/code> keyword<\/h2>\n\n\n\n<p>Technically, you can call a constructor function like a regular function without using the <code>new<\/code> keyword like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> person = Person(<span class=\"hljs-string\">'John'<\/span>,<span class=\"hljs-string\">'Doe'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this case, the <code>Person<\/code> just executes like a regular function. Therefore, the <code>this<\/code> inside the <code>Person<\/code> function doesn&#8217;t bind to the <code>person<\/code> variable but the <a href=\"https:\/\/www.javascripttutorial.net\/es-next\/javascript-globalthis\/\">global object<\/a>.<\/p>\n\n\n\n<p>If you attempt to access the <code>firstName<\/code> or <code>lastName<\/code> property, you&#8217;ll get an error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">console<\/span><span class=\"hljs-selector-class\">.log<\/span>(<span class=\"hljs-selector-tag\">person<\/span><span class=\"hljs-selector-class\">.firstName<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">TypeError<\/span>: Cannot read property <span class=\"hljs-string\">'firstName'<\/span> <span class=\"hljs-keyword\">of<\/span> <span class=\"hljs-literal\">undefined<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Similarly, you cannot access the <code>getFullName()<\/code> method since it&#8217;s bound to the global object.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">person<\/span><span class=\"hljs-selector-class\">.getFullName<\/span>();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">TypeError<\/span>: Cannot read property <span class=\"hljs-string\">'getFullName'<\/span> <span class=\"hljs-keyword\">of<\/span> <span class=\"hljs-literal\">undefined<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To prevent a constructor function to be invoked without the <code>new<\/code> keyword, ES6 introduced the <code><a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-new-target\/\">new.target<\/a><\/code> property.<\/p>\n\n\n\n<p>If a constructor function is called with the <code>new<\/code> keyword, the <code>new.target<\/code> returns a reference of the function. Otherwise, it returns <code>undefined<\/code>.<\/p>\n\n\n\n<p>The following adds a statement inside the <code>Person<\/code> function to show the <code>new.target<\/code> to the console:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Person<\/span>(<span class=\"hljs-params\">firstName, lastName<\/span>) <\/span>{\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">new<\/span>.target);\n\n    <span class=\"hljs-keyword\">this<\/span>.firstName = firstName;\n    <span class=\"hljs-keyword\">this<\/span>.lastName  = lastName;\n\n    <span class=\"hljs-keyword\">this<\/span>.getFullName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.firstName + <span class=\"hljs-string\">\" \"<\/span> + <span class=\"hljs-keyword\">this<\/span>.lastName;\n    };\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following returns <code>undefined<\/code> because the <code>Person<\/code> constructor function is called like a regular function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> person = Person(<span class=\"hljs-string\">\"John\"<\/span>, <span class=\"hljs-string\">\"Doe\"<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-literal\">undefined<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, the following returns a reference to the <code>Person<\/code> function because it&#8217;s called with the <code>new<\/code> keyword:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> person = <span class=\"hljs-keyword\">new<\/span> Person(<span class=\"hljs-string\">\"John\"<\/span>, <span class=\"hljs-string\">\"Doe\"<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-19\" data-shcb-language-name=\"JSON \/ JSON with Comments\" data-shcb-language-slug=\"json\"><span><code class=\"hljs language-json\">&#91;Function: Person]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-19\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JSON \/ JSON with Comments<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">json<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>By using the <code>new.target<\/code>, you can force the callers of the constructor function to use the <code>new<\/code> keyword. Otherwise, you can throw an error like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-20\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Person<\/span>(<span class=\"hljs-params\">firstName, lastName<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">if<\/span> (!<span class=\"hljs-keyword\">new<\/span>.target) {\n        <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-built_in\">Error<\/span>(<span class=\"hljs-string\">\"Cannot be called without the new keyword\"<\/span>);\n    }\n\n    <span class=\"hljs-keyword\">this<\/span>.firstName = firstName;\n    <span class=\"hljs-keyword\">this<\/span>.lastName = lastName;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-20\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Alternatively, you can make the syntax more flexible by creating a new <code>Person<\/code> object if the users of the constructor function don&#8217;t use the <code>new<\/code> keyword:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-21\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Person<\/span>(<span class=\"hljs-params\">firstName, lastName<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">if<\/span> (!<span class=\"hljs-keyword\">new<\/span>.target) {\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">new<\/span> Person(firstName, lastName);\n    }\n\n    <span class=\"hljs-keyword\">this<\/span>.firstName = firstName;\n    <span class=\"hljs-keyword\">this<\/span>.lastName = lastName;\n}\n\n<span class=\"hljs-keyword\">let<\/span> person = Person(<span class=\"hljs-string\">\"John\"<\/span>, <span class=\"hljs-string\">\"Doe\"<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(person.firstName);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-21\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This pattern is often used in JavaScript libraries and frameworks to make the syntax more flexible.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>JavaScript constructor function is a regular function used to create multiple similar objects.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"88191\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/javascript-constructor-function\/\"\n\t\t\t\tdata-post-title=\"JavaScript Constructor Function\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"88191\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/javascript-constructor-function\/\"\n\t\t\t\tdata-post-title=\"JavaScript Constructor Function\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you&#8217;ll learn about the JavaScript constructor function and how to use the new keyword to create an object. Introduction to JavaScript constructor functions In the JavaScript objects tutorial, you learned how to use the object literal syntax to create a new object. For example, the following creates a new person object [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":44,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>A Complete Guide to JavaScript Contructor Functions<\/title>\n<meta name=\"description\" content=\"In this tutorial, you&#039;ll learn about the JavaScript constructor function and how to use the new keyword to create multiple similar objects.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.javascripttutorial.net\/javascript-constructor-function\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"A Complete Guide to JavaScript Contructor Functions\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you&#039;ll learn about the JavaScript constructor function and how to use the new keyword to create multiple similar objects.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.javascripttutorial.net\/javascript-constructor-function\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-16T08:33:36+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.javascripttutorial.net\/javascript-constructor-function\/\",\"url\":\"https:\/\/www.javascripttutorial.net\/javascript-constructor-function\/\",\"name\":\"A Complete Guide to JavaScript Contructor Functions\",\"isPartOf\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\"},\"datePublished\":\"2021-01-20T09:46:08+00:00\",\"dateModified\":\"2022-01-16T08:33:36+00:00\",\"description\":\"In this tutorial, you'll learn about the JavaScript constructor function and how to use the new keyword to create multiple similar objects.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/javascript-constructor-function\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.javascripttutorial.net\/javascript-constructor-function\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.javascripttutorial.net\/javascript-constructor-function\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Constructor Function\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\",\"url\":\"https:\/\/www.javascripttutorial.net\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.javascripttutorial.net\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"A Complete Guide to JavaScript Contructor Functions","description":"In this tutorial, you'll learn about the JavaScript constructor function and how to use the new keyword to create multiple similar objects.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.javascripttutorial.net\/javascript-constructor-function\/","og_locale":"en_US","og_type":"article","og_title":"A Complete Guide to JavaScript Contructor Functions","og_description":"In this tutorial, you'll learn about the JavaScript constructor function and how to use the new keyword to create multiple similar objects.","og_url":"https:\/\/www.javascripttutorial.net\/javascript-constructor-function\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-16T08:33:36+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/www.javascripttutorial.net\/javascript-constructor-function\/","url":"https:\/\/www.javascripttutorial.net\/javascript-constructor-function\/","name":"A Complete Guide to JavaScript Contructor Functions","isPartOf":{"@id":"https:\/\/www.javascripttutorial.net\/#website"},"datePublished":"2021-01-20T09:46:08+00:00","dateModified":"2022-01-16T08:33:36+00:00","description":"In this tutorial, you'll learn about the JavaScript constructor function and how to use the new keyword to create multiple similar objects.","breadcrumb":{"@id":"https:\/\/www.javascripttutorial.net\/javascript-constructor-function\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.javascripttutorial.net\/javascript-constructor-function\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.javascripttutorial.net\/javascript-constructor-function\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":3,"name":"JavaScript Constructor Function"}]},{"@type":"WebSite","@id":"https:\/\/www.javascripttutorial.net\/#website","url":"https:\/\/www.javascripttutorial.net\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.javascripttutorial.net\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/88191"}],"collection":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/comments?post=88191"}],"version-history":[{"count":4,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/88191\/revisions"}],"predecessor-version":[{"id":89022,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/88191\/revisions\/89022"}],"up":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/media?parent=88191"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}