{"id":874,"date":"2016-11-02T06:54:46","date_gmt":"2016-11-02T13:54:46","guid":{"rendered":"http:\/\/www.javascripttutorial.net\/?page_id=874"},"modified":"2022-03-04T18:01:43","modified_gmt":"2022-03-05T02:01:43","slug":"es6javascript-promises","status":"publish","type":"page","link":"https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/","title":{"rendered":"JavaScript Promises"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about JavaScript promises and how to use them effectively.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"why-javascript-promises\">Why JavaScript promises<\/h2>\n\n\n\n<p>The following example <a href=\"https:\/\/www.javascripttutorial.net\/javascript-function\/\">defines a function<\/a> <code>getUsers()<\/code> that returns a list of user <a href=\"https:\/\/www.javascripttutorial.net\/javascript-objects\/\">objects<\/a>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getUsers<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n  <span class=\"hljs-keyword\">return<\/span> &#91;\n    { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'john'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'john@test.com'<\/span> },\n    { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'jane'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'jane@test.com'<\/span> },\n  ];\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Each user object has two properties <code>username<\/code> and <code>email<\/code>. <\/p>\n\n\n\n<p>To find a user by username from the user list returned by the <code>getUsers()<\/code> function, you can use the <code>findUser()<\/code> function as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">findUser<\/span>(<span class=\"hljs-params\">username<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">const<\/span> users = getUsers();\n  <span class=\"hljs-keyword\">const<\/span> user = users.find(<span class=\"hljs-function\">(<span class=\"hljs-params\">user<\/span>) =&gt;<\/span> user.username === username);\n  <span class=\"hljs-keyword\">return<\/span> user;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In the <code>findUser()<\/code> function:<\/p>\n\n\n\n<ul><li>First, get a user array by calling the <code>getUsers()<\/code> function <\/li><li>Second, find the user with a specific <code>username<\/code> by using the <code><a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-array-find\/\">find()<\/a><\/code> method of the <code>Array<\/code> object.<\/li><li>Third, return the matched user.<\/li><\/ul>\n\n\n\n<p>The following shows the complete code for finding a user with the username <code>'john'<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getUsers<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n  <span class=\"hljs-keyword\">return<\/span> &#91;\n    { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'john'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'john@test.com'<\/span> },\n    { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'jane'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'jane@test.com'<\/span> },\n  ];\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">findUser<\/span>(<span class=\"hljs-params\">username<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">const<\/span> users = getUsers(); \n  <span class=\"hljs-keyword\">const<\/span> user = users.find(<span class=\"hljs-function\">(<span class=\"hljs-params\">user<\/span>) =&gt;<\/span> user.username === username);\n  <span class=\"hljs-keyword\">return<\/span> user;\n}\n\n<span class=\"hljs-built_in\">console<\/span>.log(findUser(<span class=\"hljs-string\">'john'<\/span>));\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\">{ <span class=\"hljs-attribute\">username<\/span>: <span class=\"hljs-string\">'john'<\/span>, email: <span class=\"hljs-string\">'john@test.com'<\/span> }<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The code in the <code>findUser()<\/code> function is synchronous and blocking. The <code>findUser()<\/code> function executes the <code>getUsers()<\/code> function to get a user array, calls the <code>find()<\/code> method on the <code>users<\/code> array to search for a user with a specific username, and returns the matched user. <\/p>\n\n\n\n<p>In practice, the <code>getUsers()<\/code> function may access a database or call an API to get the user list. Therefore, the <code>getUsers()<\/code> function will have a delay. <\/p>\n\n\n\n<p>To simulate the delay, you can use the <code><a href=\"https:\/\/www.javascripttutorial.net\/javascript-bom\/javascript-settimeout\/\">setTimeout()<\/a><\/code> function. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getUsers<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n  <span class=\"hljs-keyword\">let<\/span> users = &#91;];\n\n  <span class=\"hljs-comment\">\/\/ delay 1 second (1000ms)<\/span>\n  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n    users = &#91;\n      { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'john'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'john@test.com'<\/span> },\n      { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'jane'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'jane@test.com'<\/span> },\n    ];\n  }, <span class=\"hljs-number\">1000<\/span>);\n\n  <span class=\"hljs-keyword\">return<\/span> users;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<ul><li>First, define an array <code>users<\/code> and initialize its value with an empty array.<\/li><li>Second, assign an array of the users to the <code>users<\/code> variable inside the callback of the <code>setTimeout()<\/code> function. <\/li><li>Third, return the <code>users<\/code> array<\/li><\/ul>\n\n\n\n<p>The <code>getUsers()<\/code> won&#8217;t work properly and always returns an empty array. Therefore, the <code>findUser()<\/code> function won&#8217;t work as expected:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getUsers<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n  <span class=\"hljs-keyword\">let<\/span> users = &#91;];\n  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n    users = &#91;\n      { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'john'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'john@test.com'<\/span> },\n      { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'jane'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'jane@test.com'<\/span> },\n    ];\n  }, <span class=\"hljs-number\">1000<\/span>);\n  <span class=\"hljs-keyword\">return<\/span> users;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">findUser<\/span>(<span class=\"hljs-params\">username<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">const<\/span> users = getUsers(); <span class=\"hljs-comment\">\/\/ A<\/span>\n  <span class=\"hljs-keyword\">const<\/span> user = users.find(<span class=\"hljs-function\">(<span class=\"hljs-params\">user<\/span>) =&gt;<\/span> user.username === username); <span class=\"hljs-comment\">\/\/ B<\/span>\n  <span class=\"hljs-keyword\">return<\/span> user;\n}\n\n<span class=\"hljs-built_in\">console<\/span>.log(findUser(<span class=\"hljs-string\">'john'<\/span>));\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-literal\">undefined<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Because the <code>getUsers()<\/code> returns an empty array, the <code>users<\/code> array is empty (line A). When calling the <code>find()<\/code> method on the <code>users<\/code> array, the method returns <code>undefined<\/code> (line B)<\/p>\n\n\n\n<p>The challenge is how to access the <code>users<\/code> returned from the <code>getUsers()<\/code> function after one second. One classical approach is to use the <a href=\"https:\/\/www.javascripttutorial.net\/javascript-callback\/\">callback<\/a>.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"using-callbacks\">Using callbacks to deal with an asynchronous operation<\/h3>\n\n\n\n<p>The following example adds a callback argument to the <code>getUsers()<\/code> and <code>findUser()<\/code> functions:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getUsers<\/span>(<span class=\"hljs-params\">callback<\/span>) <\/span>{\n  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n    callback(&#91;\n      { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'john'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'john@test.com'<\/span> },\n      { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'jane'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'jane@test.com'<\/span> },\n    ]);\n  }, <span class=\"hljs-number\">1000<\/span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">findUser<\/span>(<span class=\"hljs-params\">username, callback<\/span>) <\/span>{\n  getUsers(<span class=\"hljs-function\">(<span class=\"hljs-params\">users<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-keyword\">const<\/span> user = users.find(<span class=\"hljs-function\">(<span class=\"hljs-params\">user<\/span>) =&gt;<\/span> user.username === username);\n    callback(user);\n  });\n}\n\nfindUser(<span class=\"hljs-string\">'john'<\/span>, <span class=\"hljs-built_in\">console<\/span>.log);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\">{ <span class=\"hljs-attribute\">username<\/span>: <span class=\"hljs-string\">'john'<\/span>, email: <span class=\"hljs-string\">'john@test.com'<\/span> }<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>getUsers()<\/code> function accepts a callback function as an argument and invokes it with the <code>users<\/code> array inside the <code>setTimeout()<\/code> function. Also, the <code>findUser()<\/code> function accepts a callback function that processes the matched user.<\/p>\n\n\n\n<p>The callback approach works very well. However, it makes the code more difficult to follow. Also, it adds complexity to the functions with callback arguments. <\/p>\n\n\n\n<p>If the number of functions grows, you may end up with the callback hell problem. To resolve this, JavaScript comes up with the concept of promises.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"understanding-javascript-promises\">Understanding JavaScript Promises<\/h2>\n\n\n\n<p>By definition, a promise is an <strong>object<\/strong> that encapsulates the result of an <strong>asynchronous operation<\/strong>. <\/p>\n\n\n\n<p>A promise object has a state that can be one of the following:<\/p>\n\n\n\n<ul><li>Pending<\/li><li>Fulfilled with a <strong>value<\/strong><\/li><li>Rejected for a <strong>reason<\/strong><\/li><\/ul>\n\n\n\n<p>In the beginning, the state of a promise is pending, indicating that the asynchronous operation is in progress. Depending on the result of the asynchronous operation, the state changes to either fulfilled or rejected.<\/p>\n\n\n\n<p>The fulfilled state indicates that the asynchronous operation was completed successfully:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/02\/JavaScript-Promise-Fulfilled.svg\"><img decoding=\"async\" src=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/02\/JavaScript-Promise-Fulfilled.svg\" alt=\"JavaScript Promise Fulfilled\" class=\"wp-image-89530\"\/><\/a><\/figure>\n\n\n\n<p>The rejected state indicates that the asynchronous operation failed.<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><a href=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/02\/JavaScript-Promise-Rejected.svg\"><img decoding=\"async\" src=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/02\/JavaScript-Promise-Rejected.svg\" alt=\"\" class=\"wp-image-89521\"\/><\/a><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"creating-a-promise\">Creating a promise<\/h2>\n\n\n\n<p>To create a promise object, you use the <code>Promise()<\/code> constructor:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> promise = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Promise<\/span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject<\/span>) =&gt;<\/span> {\n  <span class=\"hljs-comment\">\/\/ contain an operation<\/span>\n  <span class=\"hljs-comment\">\/\/ ...<\/span>\n\n  <span class=\"hljs-comment\">\/\/ return the state<\/span>\n  <span class=\"hljs-keyword\">if<\/span> (success) {\n    resolve(value);\n  } <span class=\"hljs-keyword\">else<\/span> {\n    reject(error);\n  }\n});<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The promise constructor accepts a callback function that typically performs an asynchronous operation. This function is often referred to as an executor. <\/p>\n\n\n\n<p>In turn, the executor accepts two callback functions with the name <code>resolve<\/code> and <code>reject<\/code>. <\/p>\n\n\n\n<p class=\"note\">Note that the callback functions passed into the executor are <code>resolve<\/code> and <code>reject<\/code> by convention only.<\/p>\n\n\n\n<p>If the asynchronous operation completes successfully, the executor will call the <code>resolve()<\/code> function to change the state of the promise from pending to fulfilled with a value.<\/p>\n\n\n\n<p>In case of an error, the executor will call the <code>reject()<\/code> function to change the state of the promise from pending to rejected with the error reason.<\/p>\n\n\n\n<p>Once a promise reaches either fulfilled or rejected state, it stays in that state and can&#8217;t go to another state. <\/p>\n\n\n\n<p>In other words, a promise cannot go from the <code>fulfilled<\/code> state to the <code>rejected<\/code> state and vice versa. Also, it cannot go back from the <code>fulfilled<\/code> or <code>rejected<\/code> state to the <code>pending<\/code> state.<\/p>\n\n\n\n<p>Once a new <code>Promise<\/code> object is created, its state is pending. If a promise reaches <code>fulfilled<\/code> or <code>rejected<\/code> state, it is <em>resolved<\/em>. <\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><a href=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/02\/JavaScript-Promises.svg\"><img decoding=\"async\" src=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/02\/JavaScript-Promises.svg\" alt=\"\" class=\"wp-image-89531\"\/><\/a><\/figure><\/div>\n\n\n\n<p class=\"note\">Note that you will rarely create promise objects in practice. Instead, you will consume promises provided by libraries.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"consuming-a-promise-the-then-method\">Consuming a Promise: then, catch, finally<\/h2>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"consuming-a-promise-the-then-method\">1) The then() method<\/h3>\n\n\n\n<p>To get the value of a promise when it&#8217;s fulfilled, you call the <code>then()<\/code> method of the promise object. The following shows the syntax of the <code>then()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">promise<\/span><span class=\"hljs-selector-class\">.then<\/span>(<span class=\"hljs-selector-tag\">onFulfilled<\/span>,<span class=\"hljs-selector-tag\">onRejected<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>then()<\/code> method accepts two callback functions: <code>onFulfilled<\/code> and <code>onRejected<\/code>.<\/p>\n\n\n\n<p>The <code>then()<\/code> method calls the <code>onFulfilled()<\/code> with a value, if the promise is fulfilled or the <code>onRejected()<\/code> with an error if the promise is rejected.<\/p>\n\n\n\n<p class=\"note\">Note that both <code>onFulfilled<\/code> and <code>onRejected<\/code> arguments are optional.<\/p>\n\n\n\n<p>The following example shows how to use <code>then()<\/code> method of the <code>Promise<\/code> object returned by the <code>getUsers()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getUsers<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n  <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Promise<\/span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject<\/span>) =&gt;<\/span> {\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n      resolve(&#91;\n        { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'john'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'john@test.com'<\/span> },\n        { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'jane'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'jane@test.com'<\/span> },\n      ]);\n    }, <span class=\"hljs-number\">1000<\/span>);\n  });\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">onFulfilled<\/span>(<span class=\"hljs-params\">users<\/span>) <\/span>{\n  <span class=\"hljs-built_in\">console<\/span>.log(users);\n}\n\n<span class=\"hljs-keyword\">const<\/span> promise = getUsers();\npromise.then(onFulfilled);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">&#91;\n  { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'john'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'john@test.com'<\/span> },\n  { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'jane'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'jane@test.com'<\/span> }\n]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example:<\/p>\n\n\n\n<ul><li>First, define the <code>onFulfilled()<\/code> function to be called when the promise is fulfilled.<\/li><li>Second, call the <code>getUsers()<\/code> function to get a promise object.<\/li><li>Third, call the <code>then()<\/code> method of the promise object and output the user list to the console.<\/li><\/ul>\n\n\n\n<p>To make the code more concise, you can use an <a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-arrow-function\/\">arrow function<\/a> as the argument of the <code>then()<\/code> method like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getUsers<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n  <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Promise<\/span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject<\/span>) =&gt;<\/span> {\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n      resolve(&#91;\n        { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'john'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'john@test.com'<\/span> },\n        { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'jane'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'jane@test.com'<\/span> },\n      ]);\n    }, <span class=\"hljs-number\">1000<\/span>);\n  });\n}\n\n<span class=\"hljs-keyword\">const<\/span> promise = getUsers();\n\npromise.then(<span class=\"hljs-function\">(<span class=\"hljs-params\">users<\/span>) =&gt;<\/span> {\n  <span class=\"hljs-built_in\">console<\/span>.log(users);\n});\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Because the <code>getUsers()<\/code> function returns a promise object, you can chain the function call with the <code>then()<\/code> method like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">\/\/ getUsers() function<\/span>\n<span class=\"hljs-comment\">\/\/...<\/span>\n\ngetUsers().then(<span class=\"hljs-function\">(<span class=\"hljs-params\">users<\/span>) =&gt;<\/span> {\n  <span class=\"hljs-built_in\">console<\/span>.log(users);\n});\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>getUsers()<\/code> function always succeeds. To simulate the error, we can use a <code>success<\/code> flag like the following:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> success = <span class=\"hljs-literal\">true<\/span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getUsers<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n  <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Promise<\/span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject<\/span>) =&gt;<\/span> {\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n      <span class=\"hljs-keyword\">if<\/span> (success) {\n        resolve(&#91;\n          { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'john'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'john@test.com'<\/span> },\n          { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'jane'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'jane@test.com'<\/span> },\n        ]);\n      } <span class=\"hljs-keyword\">else<\/span> {\n        reject(<span class=\"hljs-string\">'Failed to the user list'<\/span>);\n      }\n    }, <span class=\"hljs-number\">1000<\/span>);\n  });\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">onFulfilled<\/span>(<span class=\"hljs-params\">users<\/span>) <\/span>{\n  <span class=\"hljs-built_in\">console<\/span>.log(users);\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">onRejected<\/span>(<span class=\"hljs-params\">error<\/span>) <\/span>{\n  <span class=\"hljs-built_in\">console<\/span>.log(error);\n}\n\n<span class=\"hljs-keyword\">const<\/span> promise = getUsers();\npromise.then(onFulfilled, onRejected);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, define the <code>success<\/code> variable and initialize its value to <code>true<\/code>.<\/p>\n\n\n\n<p>If the success is <code>true<\/code>, the promise in the <code>getUsers()<\/code> function is fulfilled with a user list. Otherwise, it is rejected with an error message.<\/p>\n\n\n\n<p>Second, define the <code>onFulfilled<\/code> and <code>onRejected<\/code> functions.<\/p>\n\n\n\n<p>Third, get the promise from the <code>getUsers()<\/code> function and call the <code>then()<\/code> method with the <code>onFulfilled<\/code> and <code>onRejected<\/code> functions.<\/p>\n\n\n\n<p>The following shows how to use the arrow functions as the arguments of the <code>then()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">\/\/ getUsers() function<\/span>\n<span class=\"hljs-comment\">\/\/ ...<\/span>\n\n<span class=\"hljs-keyword\">const<\/span> promise = getUsers();\npromise.then(\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">users<\/span>) =&gt;<\/span> <span class=\"hljs-built_in\">console<\/span>.log,\n  (error) =&gt; <span class=\"hljs-built_in\">console<\/span>.log\n);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\" id=\"2-the-catch-method\">2) The catch() method<\/h3>\n\n\n\n<p>If you want to get the error only when the state of the promise is rejected, you can use the <code>catch()<\/code> method of the <code>Promise<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">promise<\/span><span class=\"hljs-selector-class\">.catch<\/span>(<span class=\"hljs-selector-tag\">onRejected<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Internally, the <code>catch()<\/code> method invokes the <code>then(undefined, onRejected)<\/code> method. <\/p>\n\n\n\n<p>The following example changes the <code>success<\/code> flag to <code>false<\/code> to simulate the error scenario:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-19\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> success = <span class=\"hljs-literal\">false<\/span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getUsers<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n  <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Promise<\/span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject<\/span>) =&gt;<\/span> {\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n      <span class=\"hljs-keyword\">if<\/span> (success) {\n        resolve(&#91;\n          { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'john'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'john@test.com'<\/span> },\n          { <span class=\"hljs-attr\">username<\/span>: <span class=\"hljs-string\">'jane'<\/span>, <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'jane@test.com'<\/span> },\n        ]);\n      } <span class=\"hljs-keyword\">else<\/span> {\n        reject(<span class=\"hljs-string\">'Failed to the user list'<\/span>);\n      }\n    }, <span class=\"hljs-number\">1000<\/span>);\n  });\n}\n\n<span class=\"hljs-keyword\">const<\/span> promise = getUsers();\n\npromise.catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">error<\/span>) =&gt;<\/span> {\n  <span class=\"hljs-built_in\">console<\/span>.log(error);\n});<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-19\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\" id=\"3-the-finally-method\">3) The finally() method<\/h3>\n\n\n\n<p>Sometimes, you want to execute the same piece of code whether the promise is fulfilled or rejected. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-20\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">\n<span class=\"hljs-keyword\">const<\/span> render = <span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n  <span class=\"hljs-comment\">\/\/...<\/span>\n};\n\ngetUsers()\n  .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">users<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-built_in\">console<\/span>.log(users);\n    render();\n  })\n  .catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">error<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-built_in\">console<\/span>.log(error);\n    render();\n  });<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-20\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>As you can see, the <code>render()<\/code> function call is duplicated in both <code>then()<\/code> and <code>catch()<\/code> methods.<\/p>\n\n\n\n<p>To remove this duplicate and execute the <code>render()<\/code> whether the promise is fulfilled or rejected, you use the <code>finally()<\/code> method, like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-21\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">\n<span class=\"hljs-keyword\">const<\/span> render = <span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n  <span class=\"hljs-comment\">\/\/...<\/span>\n};\n\ngetUsers()\n  .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">users<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-built_in\">console<\/span>.log(users);\n  })\n  .catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">error<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-built_in\">console<\/span>.log(error);\n  })\n  .finally(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n    render();\n  });\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-21\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"a-practical-javascript-promise-example\">A practical JavaScript Promise example<\/h2>\n\n\n\n<p>The following example shows how to load a JSON file from the server and display its contents on a webpage.<\/p>\n\n\n\n<p>Suppose you have the following JSON file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-22\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">https:<span class=\"hljs-comment\">\/\/www.javascripttutorial.net\/sample\/promise\/api.json<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-22\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>with the following contents:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-23\" data-shcb-language-name=\"JSON \/ JSON with Comments\" data-shcb-language-slug=\"json\"><span><code class=\"hljs language-json\">{\n    <span class=\"hljs-attr\">\"message\"<\/span>: <span class=\"hljs-string\">\"JavaScript Promise Demo\"<\/span>\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-23\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JSON \/ JSON with Comments<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">json<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following shows the HTML page that contains a button. When you click the button, the page loads data from the JSON file and shows the message:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-24\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta<\/span> <span class=\"hljs-attr\">charset<\/span>=<span class=\"hljs-string\">\"utf-8\"<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title<\/span>&gt;<\/span>JavaScript Promise Demo<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">title<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link<\/span> <span class=\"hljs-attr\">href<\/span>=<span class=\"hljs-string\">\"css\/style.css\"<\/span> <span class=\"hljs-attr\">rel<\/span>=<span class=\"hljs-string\">\"stylesheet\"<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">head<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div<\/span> <span class=\"hljs-attr\">id<\/span>=<span class=\"hljs-string\">\"container\"<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div<\/span> <span class=\"hljs-attr\">id<\/span>=<span class=\"hljs-string\">\"message\"<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button<\/span> <span class=\"hljs-attr\">id<\/span>=<span class=\"hljs-string\">\"btnGet\"<\/span>&gt;<\/span>Get Message<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">button<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script<\/span> <span class=\"hljs-attr\">src<\/span>=<span class=\"hljs-string\">\"js\/promise-demo.js\"<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">script<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">body<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">html<\/span>&gt;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-24\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following shows the promise-demo.js file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-25\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">load<\/span>(<span class=\"hljs-params\">url<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Promise<\/span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">resolve, reject<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">const<\/span> request = <span class=\"hljs-keyword\">new<\/span> XMLHttpRequest();\n    request.onreadystatechange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n      <span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">this<\/span>.readyState === <span class=\"hljs-number\">4<\/span> &amp;&amp; <span class=\"hljs-keyword\">this<\/span>.status == <span class=\"hljs-number\">200<\/span>) {\n        resolve(<span class=\"hljs-keyword\">this<\/span>.response);\n      } <span class=\"hljs-keyword\">else<\/span> {\n        reject(<span class=\"hljs-keyword\">this<\/span>.status);\n      }\n    };\n    request.open(<span class=\"hljs-string\">'GET'<\/span>, url, <span class=\"hljs-literal\">true<\/span>);\n    request.send();\n  });\n}\n\n<span class=\"hljs-keyword\">const<\/span> url = <span class=\"hljs-string\">'https:\/\/www.javascripttutorial.net\/sample\/promise\/api.json'<\/span>;\n<span class=\"hljs-keyword\">const<\/span> btn = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'#btnGet'<\/span>);\n<span class=\"hljs-keyword\">const<\/span> msg = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'#message'<\/span>);\n\nbtn.addEventListener(<span class=\"hljs-string\">'click'<\/span>, () =&gt; {\n  load(URL)\n    .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">response<\/span>) =&gt;<\/span> {\n      <span class=\"hljs-keyword\">const<\/span> result = <span class=\"hljs-built_in\">JSON<\/span>.parse(response);\n      msg.innerHTML = result.message;\n    })\n    .catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">error<\/span>) =&gt;<\/span> {\n      msg.innerHTML = <span class=\"hljs-string\">`Error getting the message, HTTP status: <span class=\"hljs-subst\">${error}<\/span>`<\/span>;\n    });\n});\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-25\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, define the <code>load()<\/code> function that uses the <code>XMLHttpRequest<\/code> object to load the JSON file from the server:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-26\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">load<\/span>(<span class=\"hljs-params\">url<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Promise<\/span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">resolve, reject<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">const<\/span> request = <span class=\"hljs-keyword\">new<\/span> XMLHttpRequest();\n    request.onreadystatechange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n      <span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">this<\/span>.readyState === <span class=\"hljs-number\">4<\/span> &amp;&amp; <span class=\"hljs-keyword\">this<\/span>.status == <span class=\"hljs-number\">200<\/span>) {\n        resolve(<span class=\"hljs-keyword\">this<\/span>.response);\n      } <span class=\"hljs-keyword\">else<\/span> {\n        reject(<span class=\"hljs-keyword\">this<\/span>.status);\n      }\n    };\n    request.open(<span class=\"hljs-string\">'GET'<\/span>, url, <span class=\"hljs-literal\">true<\/span>);\n    request.send();\n  });\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-26\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In the executor, we call <code>resolve()<\/code> function with the Response if the HTTP status code is 200. Otherwise, we invoke the <code>reject()<\/code> function with the HTTP status code.<\/p>\n\n\n\n<p>Second, register the button click event listener and call the <code>then()<\/code> method of the promise object. If the load is successful, then we show the message returned from the server. Otherwise, we show the error message with the HTTP status code.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-27\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">\n<span class=\"hljs-keyword\">const<\/span> url = <span class=\"hljs-string\">'https:\/\/www.javascripttutorial.net\/sample\/promise\/api.json'<\/span>;\n<span class=\"hljs-keyword\">const<\/span> btn = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'#btnGet'<\/span>);\n<span class=\"hljs-keyword\">const<\/span> msg = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'#message'<\/span>);\n\nbtn.addEventListener(<span class=\"hljs-string\">'click'<\/span>, () =&gt; {\n  load(URL)\n    .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">response<\/span>) =&gt;<\/span> {\n      <span class=\"hljs-keyword\">const<\/span> result = <span class=\"hljs-built_in\">JSON<\/span>.parse(response);\n      msg.innerHTML = result.message;\n    })\n    .catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">error<\/span>) =&gt;<\/span> {\n      msg.innerHTML = <span class=\"hljs-string\">`Error getting the message, HTTP status: <span class=\"hljs-subst\">${error}<\/span>`<\/span>;\n    });\n});\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-27\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<div class=\"output-cont\"><div class=\"output\">\n<iframe src=\"\/sample\/promise\/promise-demo.html\" height=\"300\"><\/iframe>\n<\/div><\/div>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"summary\">Summary<\/h2>\n\n\n\n<ul><li>A promise is an object that encapsulates the result of an asynchronous operation.<\/li><li>A promise starts in the pending state and ends in either fulfilled state or rejected state.<\/li><li>Use <code>then()<\/code> method to schedule a callback to be executed when the promise is fulfilled, and <code>catch()<\/code> method to schedule a callback to be invoked when the promise is rejected.<\/li><li>Place the code that you want to execute in the <code>finally()<\/code> method whether the promise is fulfilled or rejected.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"874\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/\"\n\t\t\t\tdata-post-title=\"JavaScript Promises\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"874\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/\"\n\t\t\t\tdata-post-title=\"JavaScript Promises\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about JavaScript promises and how to use them effectively in asynchronous programming.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":85,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Promises<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about JavaScript promises and how to use them effectively in asynchronous programming.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Promises\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you will learn about JavaScript promises and how to use them effectively in asynchronous programming.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-03-05T02:01:43+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/02\/JavaScript-Promise-Fulfilled.svg\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"10 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/\",\"url\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/\",\"name\":\"JavaScript Promises\",\"isPartOf\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\"},\"datePublished\":\"2016-11-02T13:54:46+00:00\",\"dateModified\":\"2022-03-05T02:01:43+00:00\",\"description\":\"In this tutorial, you will learn about JavaScript promises and how to use them effectively in asynchronous programming.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Promises\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\",\"url\":\"https:\/\/www.javascripttutorial.net\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.javascripttutorial.net\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Promises","description":"In this tutorial, you will learn about JavaScript promises and how to use them effectively in asynchronous programming.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Promises","og_description":"In this tutorial, you will learn about JavaScript promises and how to use them effectively in asynchronous programming.","og_url":"https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-03-05T02:01:43+00:00","og_image":[{"url":"https:\/\/www.javascripttutorial.net\/wp-content\/uploads\/2022\/02\/JavaScript-Promise-Fulfilled.svg"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"10 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/","url":"https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/","name":"JavaScript Promises","isPartOf":{"@id":"https:\/\/www.javascripttutorial.net\/#website"},"datePublished":"2016-11-02T13:54:46+00:00","dateModified":"2022-03-05T02:01:43+00:00","description":"In this tutorial, you will learn about JavaScript promises and how to use them effectively in asynchronous programming.","breadcrumb":{"@id":"https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":3,"name":"JavaScript Promises"}]},{"@type":"WebSite","@id":"https:\/\/www.javascripttutorial.net\/#website","url":"https:\/\/www.javascripttutorial.net\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.javascripttutorial.net\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/874"}],"collection":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/comments?post=874"}],"version-history":[{"count":4,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/874\/revisions"}],"predecessor-version":[{"id":90138,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/874\/revisions\/90138"}],"up":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/media?parent=874"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}