{"id":84771,"date":"2019-12-21T02:07:54","date_gmt":"2019-12-21T10:07:54","guid":{"rendered":"https:\/\/www.javascripttutorial.net\/?page_id=84771"},"modified":"2022-08-16T23:36:30","modified_gmt":"2022-08-17T06:36:30","slug":"javascript-generators","status":"publish","type":"page","link":"https:\/\/www.javascripttutorial.net\/es6\/javascript-generators\/","title":{"rendered":"JavaScript Generators"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about JavaScript Generators and how to use them effectively.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to JavaScript Generators<\/h2>\n\n\n\n<p>In JavaScript, a regular <a href=\"https:\/\/www.javascripttutorial.net\/javascript-function\/\">function<\/a> is executed based on the run-to-completion model. It cannot pause midway and then continues from where it paused. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">foo<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'I'<\/span>);\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'cannot'<\/span>);\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'pause'<\/span>);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>foo()<\/code> function executes from top to bottom. The only way to exit the <code>foo()<\/code> is by returning from it or throwing an error. If you invoke the <code>foo()<\/code> function again, it will start the execution from the top to bottom.<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">foo();<\/code><\/span><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">I\ncannot\npause<\/code><\/span><\/pre>\n\n\n<p>ES6 introduces a new kind of function that is different from a regular function: function generator or generator.<\/p>\n\n\n\n<p>A generator can pause midway and then continues from where it paused. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>* <span class=\"hljs-title\">generate<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'invoked 1st time'<\/span>);\n    <span class=\"hljs-keyword\">yield<\/span> <span class=\"hljs-number\">1<\/span>;\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'invoked 2nd time'<\/span>);\n    <span class=\"hljs-keyword\">yield<\/span> <span class=\"hljs-number\">2<\/span>;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Let&#8217;s examine the <code>generate()<\/code> function in detail.<\/p>\n\n\n\n<ul><li>First, you see the asterisk (<code>*<\/code>) after the <code>function<\/code> keyword. The asterisk denotes that the <code>generate()<\/code> is a generator, not a normal function.<\/li><li>Second, the <code><a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-yield\/\">yield<\/a><\/code> statement returns a value and pauses the execution of the function.<\/li><\/ul>\n\n\n\n<p>The following code invokes the <code>generate()<\/code> generator:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> gen = generate();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When you invoke the <code>generate()<\/code> generator:<\/p>\n\n\n\n<ul><li>First, you see nothing in the console. If the <code>generate()<\/code> were a regular function, you would expect to see some messages.<\/li><li>Second, you get something back from <code>generate()<\/code> as a returned value.<\/li><\/ul>\n\n\n\n<p>Let&#8217;s show the returned value on the console:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(gen);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">Object<\/span> <span class=\"hljs-selector-attr\">&#91;Generator]<\/span> {}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>So, a generator returns a <code>Generator<\/code> object without executing its body when it is invoked.<\/p>\n\n\n\n<p>The <code>Generator<\/code> object returns another object with two properties: <code>done<\/code> and <code>value<\/code>. In other words, a <code>Generator<\/code> object is <a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-iterator\/\">iterable<\/a>.<\/p>\n\n\n\n<p>The following calls the <code>next()<\/code> method on the <code>Generator<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> result = gen.next();\n<span class=\"hljs-built_in\">console<\/span>.log(result);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">invoked<\/span> 1<span class=\"hljs-selector-tag\">st<\/span> <span class=\"hljs-selector-tag\">time<\/span>\n{ <span class=\"hljs-attribute\">value<\/span>: <span class=\"hljs-number\">1<\/span>, done: false }\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>As you can see, the Generator object executes its body which outputs message <code>'invoked 1st time'<\/code> at line 1 and returns the value 1 at line 2.<\/p>\n\n\n\n<p>The <code>yield<\/code> statement returns 1 and pauses the generator at line 2.<\/p>\n\n\n\n<p>Similarly, the following code invokes the <code>next()<\/code> method of the Generator second time:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">result = gen.next();\n<span class=\"hljs-built_in\">console<\/span>.log(result);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">invoked<\/span> 2<span class=\"hljs-selector-tag\">nd<\/span> <span class=\"hljs-selector-tag\">time<\/span>\n{ <span class=\"hljs-attribute\">value<\/span>: <span class=\"hljs-number\">2<\/span>, done: false }<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This time the Generator resumes its execution from line 3 that outputs the message <code>'invoked 2nd time'<\/code> and returns (or yield) 2.<\/p>\n\n\n\n<p>The following invokes the <code>next()<\/code> method of the generator object a third time:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">result = gen.next();\n<span class=\"hljs-built_in\">console<\/span>.log(result);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\">{ <span class=\"hljs-attribute\">value<\/span>: undefined, done: true }<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Since a generator is iterable, you can use the <code><a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-for-of\/\">for...of<\/a><\/code> loop:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">const<\/span> g <span class=\"hljs-keyword\">of<\/span> gen) {\n    <span class=\"hljs-built_in\">console<\/span>.log(g);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Here is the output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">invoked 1st time\n1\ninvoked 2nd time\n2\n<\/code><\/span><\/pre>\n\n\n<h2 class=\"wp-block-heading\">More JavaScript generator examples<\/h2>\n\n\n\n<p>The following example illustrates how to use a generator to generate a never-ending sequence:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>* <span class=\"hljs-title\">forever<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-keyword\">let<\/span> index = <span class=\"hljs-number\">0<\/span>;\n    <span class=\"hljs-keyword\">while<\/span> (<span class=\"hljs-literal\">true<\/span>) {\n        <span class=\"hljs-keyword\">yield<\/span> index++;\n    }\n}\n\n<span class=\"hljs-keyword\">let<\/span> f = forever();\n<span class=\"hljs-built_in\">console<\/span>.log(f.next()); <span class=\"hljs-comment\">\/\/ 0<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(f.next()); <span class=\"hljs-comment\">\/\/ 1<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(f.next()); <span class=\"hljs-comment\">\/\/ 2<\/span>\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Each time you call the <code>next()<\/code> method of the <code>forever<\/code> generator, it returns the next number in the sequence starting from 0.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Using generators to implement iterators<\/h2>\n\n\n\n<p>When you implement an iterator, you have to manually define the <code>next()<\/code> method. In the <code>next()<\/code> method, you also have to manually save the state of the current element.<\/p>\n\n\n\n<p>Since generators are iterables, they can help you simplify the code for implementing iterator.<\/p>\n\n\n\n<p>The following is a <code>Sequence<\/code> iterator created in the <a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-iterator\/\">iterator tutorial<\/a>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Sequence<\/span> <\/span>{\n    <span class=\"hljs-keyword\">constructor<\/span>( start = 0, end = Infinity, interval = 1 ) {\n        <span class=\"hljs-keyword\">this<\/span>.start = start;\n        <span class=\"hljs-keyword\">this<\/span>.end = end;\n        <span class=\"hljs-keyword\">this<\/span>.interval = interval;\n    }\n    &#91;<span class=\"hljs-built_in\">Symbol<\/span>.iterator]() {\n        <span class=\"hljs-keyword\">let<\/span> counter = <span class=\"hljs-number\">0<\/span>;\n        <span class=\"hljs-keyword\">let<\/span> nextIndex = <span class=\"hljs-keyword\">this<\/span>.start;\n        <span class=\"hljs-keyword\">return<\/span>  {\n            <span class=\"hljs-attr\">next<\/span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n                <span class=\"hljs-keyword\">if<\/span> ( nextIndex &lt; <span class=\"hljs-keyword\">this<\/span>.end ) {\n                    <span class=\"hljs-keyword\">let<\/span> result = { <span class=\"hljs-attr\">value<\/span>: nextIndex,  <span class=\"hljs-attr\">done<\/span>: <span class=\"hljs-literal\">false<\/span> }\n                    nextIndex += <span class=\"hljs-keyword\">this<\/span>.interval;\n                    counter++;\n                    <span class=\"hljs-keyword\">return<\/span> result;\n                }\n                <span class=\"hljs-keyword\">return<\/span> { <span class=\"hljs-attr\">value<\/span>: counter, <span class=\"hljs-attr\">done<\/span>: <span class=\"hljs-literal\">true<\/span> };\n            }\n        }\n    }\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And here is the new Sequence iterator that uses a generator:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Sequence<\/span> <\/span>{\n    <span class=\"hljs-keyword\">constructor<\/span>( start = 0, end = Infinity, interval = 1 ) {\n        <span class=\"hljs-keyword\">this<\/span>.start = start;\n        <span class=\"hljs-keyword\">this<\/span>.end = end;\n        <span class=\"hljs-keyword\">this<\/span>.interval = interval;\n    }\n    * &#91;<span class=\"hljs-built_in\">Symbol<\/span>.iterator]() {\n        <span class=\"hljs-keyword\">for<\/span>( <span class=\"hljs-keyword\">let<\/span> index = <span class=\"hljs-keyword\">this<\/span>.start; index &lt;= <span class=\"hljs-keyword\">this<\/span>.end; index += <span class=\"hljs-keyword\">this<\/span>.interval ) {\n            <span class=\"hljs-keyword\">yield<\/span> index;\n        }\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>As you can see, the method <a>Symbol.iterator<\/a> is much simpler by using the generator.<\/p>\n\n\n\n<p>The following script uses the Sequence iterator to generate a sequence of odd numbers from 1 to 10:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> oddNumbers = <span class=\"hljs-keyword\">new<\/span> Sequence(<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">2<\/span>);\n\n<span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">const<\/span> num <span class=\"hljs-keyword\">of<\/span> oddNumbers) {\n    <span class=\"hljs-built_in\">console<\/span>.log(num);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">1\n3\n5\n7\n9<\/code><\/span><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Using a generator to implement the Bag data structure<\/h2>\n\n\n\n<p>A Bag is a data structure that has the ability to collect elements and iterate through elements. It doesn&#8217;t support removing items.<\/p>\n\n\n\n<p>The following script implements the <code>Bag<\/code> data structure:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Bag<\/span> <\/span>{\n    <span class=\"hljs-keyword\">constructor<\/span>() {\n        <span class=\"hljs-keyword\">this<\/span>.elements = &#91;];\n    }\n    isEmpty() {\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.elements.length === <span class=\"hljs-number\">0<\/span>;\n    }\n    add(element) {\n        <span class=\"hljs-keyword\">this<\/span>.elements.push(element);\n    }\n    * &#91;<span class=\"hljs-built_in\">Symbol<\/span>.iterator]() {\n        <span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">let<\/span> element <span class=\"hljs-keyword\">of<\/span> <span class=\"hljs-keyword\">this<\/span>.elements) {\n            <span class=\"hljs-keyword\">yield<\/span> element;\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">let<\/span> bag = <span class=\"hljs-keyword\">new<\/span> Bag();\n\nbag.add(<span class=\"hljs-number\">1<\/span>);\nbag.add(<span class=\"hljs-number\">2<\/span>);\nbag.add(<span class=\"hljs-number\">3<\/span>);\n\n<span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">let<\/span> e <span class=\"hljs-keyword\">of<\/span> bag) {\n    <span class=\"hljs-built_in\">console<\/span>.log(e);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">1\n2\n3<\/code><\/span><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>Generators are created by the generator function <code>function* f(){}<\/code>.<\/li><li>Generators do not execute its body immediately when they are invoked.<\/li><li>Generators can pause midway and resumes their executions where they were paused. The <code>yield<\/code> statement pauses the execution of a generator and returns a value.<\/li><li>Generators are iterable so you can use them with the <code>for...of<\/code> loop.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"84771\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-generators\/\"\n\t\t\t\tdata-post-title=\"JavaScript Generators\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"84771\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-generators\/\"\n\t\t\t\tdata-post-title=\"JavaScript Generators\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about JavaScript Generators and how to use them effectively.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":95,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Generators<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about JavaScript Generators and how to use them effectively.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-generators\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Generators\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you will learn about JavaScript Generators and how to use them effectively.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-generators\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-08-17T06:36:30+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-generators\/\",\"url\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-generators\/\",\"name\":\"JavaScript Generators\",\"isPartOf\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\"},\"datePublished\":\"2019-12-21T10:07:54+00:00\",\"dateModified\":\"2022-08-17T06:36:30+00:00\",\"description\":\"In this tutorial, you will learn about JavaScript Generators and how to use them effectively.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-generators\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.javascripttutorial.net\/es6\/javascript-generators\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-generators\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Generators\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\",\"url\":\"https:\/\/www.javascripttutorial.net\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.javascripttutorial.net\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Generators","description":"In this tutorial, you will learn about JavaScript Generators and how to use them effectively.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.javascripttutorial.net\/es6\/javascript-generators\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Generators","og_description":"In this tutorial, you will learn about JavaScript Generators and how to use them effectively.","og_url":"https:\/\/www.javascripttutorial.net\/es6\/javascript-generators\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-08-17T06:36:30+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/www.javascripttutorial.net\/es6\/javascript-generators\/","url":"https:\/\/www.javascripttutorial.net\/es6\/javascript-generators\/","name":"JavaScript Generators","isPartOf":{"@id":"https:\/\/www.javascripttutorial.net\/#website"},"datePublished":"2019-12-21T10:07:54+00:00","dateModified":"2022-08-17T06:36:30+00:00","description":"In this tutorial, you will learn about JavaScript Generators and how to use them effectively.","breadcrumb":{"@id":"https:\/\/www.javascripttutorial.net\/es6\/javascript-generators\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.javascripttutorial.net\/es6\/javascript-generators\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.javascripttutorial.net\/es6\/javascript-generators\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":3,"name":"JavaScript Generators"}]},{"@type":"WebSite","@id":"https:\/\/www.javascripttutorial.net\/#website","url":"https:\/\/www.javascripttutorial.net\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.javascripttutorial.net\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/84771"}],"collection":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/comments?post=84771"}],"version-history":[{"count":4,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/84771\/revisions"}],"predecessor-version":[{"id":90244,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/84771\/revisions\/90244"}],"up":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/media?parent=84771"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}