{"id":688,"date":"2016-09-14T02:13:21","date_gmt":"2016-09-14T09:13:21","guid":{"rendered":"http:\/\/https://jsprifix.netlify.app/\/?page_id=688"},"modified":"2022-02-15T00:55:53","modified_gmt":"2022-02-15T08:55:53","slug":"javascript-inheritance","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-inheritance\/","title":{"rendered":"JavaScript Inheritance Using extends &#038; super"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to implement JavaScript inheritance by using <code>extends<\/code> and <code>super<\/code> in ES6.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"implementing-javascript-inheritance-using-extends-and-super\">Implementing JavaScript inheritance using <code>extends<\/code> and <code>super<\/code><\/h2>\n\n\n\n<p>Prior to ES6, implementing a proper inheritance required multiple steps. One of the most commonly used strategies is <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-prototypal-inheritance\/\">prototypal inheritance<\/a>.\u00a0<\/p>\n\n\n\n<p>The following illustrates how the <code>Bird<\/code> inherits properties from the <code>Animal<\/code>&nbsp;using the prototypal inheritance technique:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Animal<\/span>(<span class=\"hljs-params\">legs<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">this<\/span>.legs = legs;\n}\n\nAnimal.prototype.walk = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'walking on '<\/span> + <span class=\"hljs-keyword\">this<\/span>.legs + <span class=\"hljs-string\">' legs'<\/span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">Bird<\/span>(<span class=\"hljs-params\">legs<\/span>) <\/span>{\n    Animal.call(<span class=\"hljs-keyword\">this<\/span>, legs);\n}\n\nBird.prototype = <span class=\"hljs-built_in\">Object<\/span>.create(Animal.prototype);\nBird.prototype.constructor = Animal;\n\n\nBird.prototype.fly = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>(<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'flying'<\/span>);\n}\n\n<span class=\"hljs-keyword\">var<\/span> pigeon = <span class=\"hljs-keyword\">new<\/span> Bird(<span class=\"hljs-number\">2<\/span>);\npigeon.walk(); <span class=\"hljs-comment\">\/\/ walking on 2 legs<\/span>\npigeon.fly();  <span class=\"hljs-comment\">\/\/ flying<\/span>\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>ES6 simplified these steps by using the <code>extends<\/code> and <code>super<\/code> keywords. <\/p>\n\n\n\n<p>The following example defines the <code>Animal<\/code> and <code>Bird<\/code> classes and establishes the inheritance through the <code>extends<\/code> and <code>super<\/code> keywords.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Animal<\/span> <\/span>{\n    <span class=\"hljs-keyword\">constructor<\/span>(legs) {\n        <span class=\"hljs-keyword\">this<\/span>.legs = legs;\n    }\n    walk() {\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'walking on '<\/span> + <span class=\"hljs-keyword\">this<\/span>.legs + <span class=\"hljs-string\">' legs'<\/span>);\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Bird<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">Animal<\/span> <\/span>{\n    <span class=\"hljs-keyword\">constructor<\/span>(legs) {\n        <span class=\"hljs-keyword\">super<\/span>(legs);\n    }\n    fly() {\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'flying'<\/span>);\n    }\n}\n\n\n<span class=\"hljs-keyword\">let<\/span> bird = <span class=\"hljs-keyword\">new<\/span> Bird(<span class=\"hljs-number\">2<\/span>);\n\nbird.walk();\nbird.fly();\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, use the <code>extends<\/code> keyword to make the <code>Bird<\/code> class inheriting from the <code>Animal<\/code> class:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Bird<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">Animal<\/span> <\/span>{\n   <span class=\"hljs-comment\">\/\/ ...<\/span>\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>Animal<\/code> class is called a&nbsp;<strong>base class<\/strong> or <strong>parent class<\/strong> while the <code>Bird<\/code> class is known as&nbsp;a <strong>derived class<\/strong> or <strong>child class<\/strong>. By doing this, the <code>Bird<\/code> class inherits all methods and properties of the <code>Animal<\/code> class. <\/p>\n\n\n\n<p>Second, in the <code>Bird<\/code>&#8216;s constructor, call <code>super()<\/code> to invoke the <code>Animal<\/code>&#8216;s constructor with the <code>legs<\/code> argument.<\/p>\n\n\n\n<p>JavaScript&nbsp;requires the child&nbsp;class to call <code>super()<\/code> if it has a constructor. As you can see in the <code>Bird<\/code> class, the&nbsp;<code>super(legs)<\/code> is equivalent to the following statement in ES5:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">Animal.call(<span class=\"hljs-keyword\">this<\/span>, legs);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If the <code>Bird<\/code> class doesn&#8217;t have a constructor, you can don&#8217;t need to do anything else:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Bird<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">Animal<\/span> <\/span>{\n    fly() {\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'flying'<\/span>);\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It is equivalent to the following class:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Bird<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">Animal<\/span> <\/span>{\n    <span class=\"hljs-keyword\">constructor<\/span>(...args) {\n        <span class=\"hljs-keyword\">super<\/span>(...args);\n    }\n    fly() {\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'flying'<\/span>);\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, the child class has a constructor, it needs to call <code>super()<\/code>. For example, the following code results in an error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Bird<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">Animal<\/span> <\/span>{\n    <span class=\"hljs-keyword\">constructor<\/span>(legs) {\n    }\n    fly() {\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'flying'<\/span>);\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">ReferenceError<\/span>: Must call <span class=\"hljs-keyword\">super<\/span> <span class=\"hljs-keyword\">constructor<\/span> in derived class before accessing 'this' or returning from derived <span class=\"hljs-keyword\">constructor<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Because the <code>super()<\/code> initializes the <code>this<\/code> object, you need to call the <code>super()<\/code> before accessing the <code>this<\/code> object. Trying to access <code>this<\/code> before calling <code>super()<\/code>&nbsp;also results in an error.<\/p>\n\n\n\n<p>For example, if you want to initialize the <code>color<\/code> property of the <code>Bird<\/code> class, you can do it as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Bird<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">Animal<\/span> <\/span>{\n\t<span class=\"hljs-keyword\">constructor<\/span>(legs, color) {\n\t\t<span class=\"hljs-keyword\">super<\/span>(legs);\n\t\t<span class=\"hljs-keyword\">this<\/span>.color = color;\n\t}\n\tfly() {\n\t\t<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">\"flying\"<\/span>);\n\t}\n\tgetColor() {\n\t\t<span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.color;\n\t}\n}\n\n<span class=\"hljs-keyword\">let<\/span> pegion = <span class=\"hljs-keyword\">new<\/span> Bird(<span class=\"hljs-number\">2<\/span>, <span class=\"hljs-string\">\"white\"<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(pegion.getColor());<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"shadowing-methods\">Shadowing methods<\/h2>\n\n\n\n<p>ES6 allows the child class and parent class to have methods with the same name. In this case, when you call the method of an object of the child class, the method in the child class will shadow the method in the parent class.<\/p>\n\n\n\n<p>The following <code>Dog<\/code> class extends the <code>Animal<\/code> class and redefines the <code>walk()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Dog<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">Animal<\/span> <\/span>{\n    <span class=\"hljs-keyword\">constructor<\/span>() {\n        <span class=\"hljs-keyword\">super<\/span>(<span class=\"hljs-number\">4<\/span>);\n    }\n    walk() {\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`go walking`<\/span>);\n    }\n}\n\n<span class=\"hljs-keyword\">let<\/span> bingo = <span class=\"hljs-keyword\">new<\/span> Dog();\nbingo.walk(); <span class=\"hljs-comment\">\/\/ go walking<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To call the method of the parent class in the child class, you use <code>super.method(arguments)<\/code> like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Dog<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">Animal<\/span> <\/span>{\n    <span class=\"hljs-keyword\">constructor<\/span>() {\n        <span class=\"hljs-keyword\">super<\/span>(<span class=\"hljs-number\">4<\/span>);\n    }\n    walk() {\n        <span class=\"hljs-keyword\">super<\/span>.walk();\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`go walking`<\/span>);\n    }\n}\n\n<span class=\"hljs-keyword\">let<\/span> bingo = <span class=\"hljs-keyword\">new<\/span> Dog();\nbingo.walk();\n<span class=\"hljs-comment\">\/\/ walking on 4 legs<\/span>\n<span class=\"hljs-comment\">\/\/ go walking<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"inheriting-static-members\">Inheriting static members<\/h2>\n\n\n\n<p>Besides the properties and methods, the child class also inherits all static properties and methods of the parent class. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Animal<\/span> <\/span>{\n    <span class=\"hljs-keyword\">constructor<\/span>(legs) {\n        <span class=\"hljs-keyword\">this<\/span>.legs = legs;\n    }\n    walk() {\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'walking on '<\/span> + <span class=\"hljs-keyword\">this<\/span>.legs + <span class=\"hljs-string\">' legs'<\/span>);\n    }\n    <span class=\"hljs-keyword\">static<\/span> helloWorld() {\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'Hello World'<\/span>);\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Bird<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">Animal<\/span> <\/span>{\n    fly() {\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'flying'<\/span>);\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>Animal<\/code> class has the <code>helloWorld()<\/code> static method and this method is available as <code>Bird.helloWorld()<\/code> and behaves the same as the&nbsp;<code>Animal.helloWorld()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">Bird.helloWorld(); <span class=\"hljs-comment\">\/\/ Hello World<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"inheriting-from-built-in-types\">Inheriting from built-in types<\/h2>\n\n\n\n<p>JavaScript allows you to extend a built-in type such as <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-array\/\">Array<\/a>, String, <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-map\/\">Map<\/a>, and <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-set\/\">Set <\/a>through inheritance. <\/p>\n\n\n\n<p>The following <code>Queue<\/code>&nbsp;class extends the <code>Array<\/code> reference type.&nbsp;The syntax is much cleaner than the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-queue\/\"><code>Queue<\/code><\/a> implemented using the <a href=\"https:\/\/https://jsprifix.netlify.app/\/create-objects-in-javascript\/#constructor_prototype_pattern\">constructor\/prototype pattern<\/a>.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Queue<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">Array<\/span> <\/span>{\n    enqueue(e) {\n        <span class=\"hljs-keyword\">super<\/span>.push(e);\n    }\n    dequeue() {\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">super<\/span>.shift();\n    }\n    peek() {\n        <span class=\"hljs-keyword\">return<\/span> !<span class=\"hljs-keyword\">this<\/span>.empty() ? <span class=\"hljs-keyword\">this<\/span>&#91;<span class=\"hljs-number\">0<\/span>] : <span class=\"hljs-literal\">undefined<\/span>;\n    }\n    empty() {\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.length === <span class=\"hljs-number\">0<\/span>;\n    }\n}\n\n<span class=\"hljs-keyword\">var<\/span> customers = <span class=\"hljs-keyword\">new<\/span> Queue();\ncustomers.enqueue(<span class=\"hljs-string\">'A'<\/span>);\ncustomers.enqueue(<span class=\"hljs-string\">'B'<\/span>);\ncustomers.enqueue(<span class=\"hljs-string\">'C'<\/span>);\n\n<span class=\"hljs-keyword\">while<\/span> (!customers.empty()) {\n    <span class=\"hljs-built_in\">console<\/span>.log(customers.dequeue());\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"summary\">Summary<\/h2>\n\n\n\n<ul><li>Use the extends keyword to implement the inheritance in ES6. The class to be extended is called a base class or parent class. The class that extends the base class or parent class is called the derived class or child class.<\/li><li>Call the <code>super(arguments)<\/code> in the child class&#8217;s constructor to invoke the parent class&#8217;s constructor.<\/li><li>Use <code>super<\/code> keyword to call methods of the parent class in the methods of the child class.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"688\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-inheritance\/\"\n\t\t\t\tdata-post-title=\"JavaScript Inheritance Using extends &#038; super\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"688\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-inheritance\/\"\n\t\t\t\tdata-post-title=\"JavaScript Inheritance Using extends &#038; super\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how to implement JavaScript inheritance by using extends and super in ES6.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":66,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Inheritance Using extends &amp; super Keywords<\/title>\n<meta name=\"description\" content=\"Learn how to implement JavaScript inheritance using extends and super in ES6. The class inheritance is the syntactic sugar of prototypal inheritance.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-inheritance\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Inheritance Using extends &amp; super Keywords\" \/>\n<meta property=\"og:description\" content=\"Learn how to implement JavaScript inheritance using extends and super in ES6. The class inheritance is the syntactic sugar of prototypal inheritance.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-inheritance\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-15T08:55:53+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-inheritance\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-inheritance\/\",\"name\":\"JavaScript Inheritance Using extends & super Keywords\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2016-09-14T09:13:21+00:00\",\"dateModified\":\"2022-02-15T08:55:53+00:00\",\"description\":\"Learn how to implement JavaScript inheritance using extends and super in ES6. The class inheritance is the syntactic sugar of prototypal inheritance.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-inheritance\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-inheritance\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-inheritance\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Inheritance Using extends &#038; super\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Inheritance Using extends & super Keywords","description":"Learn how to implement JavaScript inheritance using extends and super in ES6. The class inheritance is the syntactic sugar of prototypal inheritance.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-inheritance\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Inheritance Using extends & super Keywords","og_description":"Learn how to implement JavaScript inheritance using extends and super in ES6. The class inheritance is the syntactic sugar of prototypal inheritance.","og_url":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-inheritance\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-02-15T08:55:53+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-inheritance\/","url":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-inheritance\/","name":"JavaScript Inheritance Using extends & super Keywords","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2016-09-14T09:13:21+00:00","dateModified":"2022-02-15T08:55:53+00:00","description":"Learn how to implement JavaScript inheritance using extends and super in ES6. The class inheritance is the syntactic sugar of prototypal inheritance.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-inheritance\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-inheritance\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-inheritance\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript Inheritance Using extends &#038; super"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/688"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=688"}],"version-history":[{"count":4,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/688\/revisions"}],"predecessor-version":[{"id":89944,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/688\/revisions\/89944"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=688"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}