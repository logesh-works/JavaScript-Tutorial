{"id":84786,"date":"2019-12-21T22:38:57","date_gmt":"2019-12-22T06:38:57","guid":{"rendered":"https:\/\/www.javascripttutorial.net\/?page_id=84786"},"modified":"2022-03-04T18:30:34","modified_gmt":"2022-03-05T02:30:34","slug":"javascript-callback","status":"publish","type":"page","link":"https:\/\/www.javascripttutorial.net\/javascript-callback\/","title":{"rendered":"JavaScript Callbacks"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about JavaScript callback functions including synchronous and asynchronous callbacks.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">What are callbacks<\/h2>\n\n\n\n<p>In JavaScript, <a href=\"https:\/\/www.javascripttutorial.net\/javascript-functions-are-first-class-citizens\/\">functions are first-class citizens<\/a>. Therefore, you can pass a <a href=\"https:\/\/www.javascripttutorial.net\/javascript-function\/\">function<\/a> to another function as an argument.<\/p>\n\n\n\n<p>By definition, a callback is a <a href=\"https:\/\/www.javascripttutorial.net\/javascript-function\/\">function<\/a> that you pass into another function as an argument for executing later. <\/p>\n\n\n\n<p>The following defines a <code>filter()<\/code> function that accepts an <a href=\"https:\/\/www.javascripttutorial.net\/array\/\">array<\/a> of numbers and returns a new array of odd numbers:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">filter<\/span>(<span class=\"hljs-params\">numbers<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">let<\/span> results = &#91;];\n  <span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">const<\/span> number <span class=\"hljs-keyword\">of<\/span> numbers) {\n    <span class=\"hljs-keyword\">if<\/span> (number % <span class=\"hljs-number\">2<\/span> != <span class=\"hljs-number\">0<\/span>) {\n      results.push(number);\n    }\n  }\n  <span class=\"hljs-keyword\">return<\/span> results;\n}\n<span class=\"hljs-keyword\">let<\/span> numbers = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">7<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">5<\/span>, <span class=\"hljs-number\">6<\/span>];\n<span class=\"hljs-built_in\">console<\/span>.log(filter(numbers));<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<ul><li>First, define the <code>filter()<\/code> function that accepts an array of numbers and returns a new array of the odd numbers.<\/li><li>Second, define the <code>numbers<\/code> array that has both odd and even numbers.<\/li><li>Third, call the <code>filter()<\/code> function to get the odd numbers out of the numbers array and output the result.<\/li><\/ul>\n\n\n\n<p>If you want to return an array that contains even numbers, you need to modify the <code>filter()<\/code> function. To make the <code>filter()<\/code> function more generic and reusable, you can:<\/p>\n\n\n\n<ul><li>First, extract the logic in the <code>if<\/code> block and wrap it in a separate function.<\/li><li>Second, pass the function to the filter() function as an argument.<\/li><\/ul>\n\n\n\n<p>Here&#8217;s the updated code:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">isOdd<\/span>(<span class=\"hljs-params\">number<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">return<\/span> number % <span class=\"hljs-number\">2<\/span> != <span class=\"hljs-number\">0<\/span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">filter<\/span>(<span class=\"hljs-params\">numbers, fn<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">let<\/span> results = &#91;];\n  <span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">const<\/span> number <span class=\"hljs-keyword\">of<\/span> numbers) {\n    <span class=\"hljs-keyword\">if<\/span> (fn(number)) {\n      results.push(number);\n    }\n  }\n  <span class=\"hljs-keyword\">return<\/span> results;\n}\n<span class=\"hljs-keyword\">let<\/span> numbers = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">7<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">5<\/span>, <span class=\"hljs-number\">6<\/span>];\n<span class=\"hljs-built_in\">console<\/span>.log(filter(numbers, isOdd));<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The result is the same. However, you can pass any function that accepts an argument and returns a boolean value to the second argument of the <code>filter()<\/code> function. <\/p>\n\n\n\n<p>For example, you can use the <code>filter()<\/code> function to return an array of even numbers like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">isOdd<\/span>(<span class=\"hljs-params\">number<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">return<\/span> number % <span class=\"hljs-number\">2<\/span> != <span class=\"hljs-number\">0<\/span>;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">isEven<\/span>(<span class=\"hljs-params\">number<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">return<\/span> number % <span class=\"hljs-number\">2<\/span> == <span class=\"hljs-number\">0<\/span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">filter<\/span>(<span class=\"hljs-params\">numbers, fn<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">let<\/span> results = &#91;];\n  <span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">const<\/span> number <span class=\"hljs-keyword\">of<\/span> numbers) {\n    <span class=\"hljs-keyword\">if<\/span> (fn(number)) {\n      results.push(number);\n    }\n  }\n  <span class=\"hljs-keyword\">return<\/span> results;\n}\n<span class=\"hljs-keyword\">let<\/span> numbers = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">7<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">5<\/span>, <span class=\"hljs-number\">6<\/span>];\n\n<span class=\"hljs-built_in\">console<\/span>.log(filter(numbers, isOdd));\n<span class=\"hljs-built_in\">console<\/span>.log(filter(numbers, isEven));<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>By definition, the <code>isOdd<\/code> and <code>isEven<\/code> are callback functions or callbacks. Because the <code>filter()<\/code> function accepts a function as an argument, it&#8217;s called a <em>high-order function<\/em>.<\/p>\n\n\n\n<p>A callback can be an anonymous function, which is a function without a name like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">filter<\/span>(<span class=\"hljs-params\">numbers, callback<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">let<\/span> results = &#91;];\n  <span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">const<\/span> number <span class=\"hljs-keyword\">of<\/span> numbers) {\n    <span class=\"hljs-keyword\">if<\/span> (callback(number)) {\n      results.push(number);\n    }\n  }\n  <span class=\"hljs-keyword\">return<\/span> results;\n}\n\n<span class=\"hljs-keyword\">let<\/span> numbers = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">7<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">5<\/span>, <span class=\"hljs-number\">6<\/span>];\n\n<span class=\"hljs-keyword\">let<\/span> oddNumbers = filter(numbers, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">number<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">return<\/span> number % <span class=\"hljs-number\">2<\/span> != <span class=\"hljs-number\">0<\/span>;\n});\n\n<span class=\"hljs-built_in\">console<\/span>.log(oddNumbers);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we pass an anonymous function to the <code>filter()<\/code> function instead of using a separate function.<\/p>\n\n\n\n<p>In ES6, you can use an <a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-arrow-function\/\">arrow function<\/a> like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">filter<\/span>(<span class=\"hljs-params\">numbers, callback<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">let<\/span> results = &#91;];\n  <span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">const<\/span> number <span class=\"hljs-keyword\">of<\/span> numbers) {\n    <span class=\"hljs-keyword\">if<\/span> (callback(number)) {\n      results.push(number);\n    }\n  }\n  <span class=\"hljs-keyword\">return<\/span> results;\n}\n\n<span class=\"hljs-keyword\">let<\/span> numbers = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">7<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">5<\/span>, <span class=\"hljs-number\">6<\/span>];\n\n<span class=\"hljs-keyword\">let<\/span> oddNumbers = filter(numbers, (number) =&gt; number % <span class=\"hljs-number\">2<\/span> != <span class=\"hljs-number\">0<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(oddNumbers);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>There are two types of callbacks: synchronous and asynchronous callbacks.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Synchronous callbacks<\/h2>\n\n\n\n<p>A synchronous callback is executed during the execution of the high-order function that uses the callback. The <code>isOdd<\/code> and <code>isEven<\/code> are examples of synchronous callbacks because they execute during the execution of the <code>filter()<\/code> function.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Asynchronous callbacks<\/h2>\n\n\n\n<p>An asynchronous callback is executed after the execution of the high-order function that uses the callback. <\/p>\n\n\n\n<p>Asynchronicity means that if JavaScript has to wait for an operation to complete, it will execute the rest of the code while waiting.<\/p>\n\n\n\n<p>Note that JavaScript is a single-threaded programming language. It carries asynchronous operations via the callback queue and<a href=\"https:\/\/www.javascripttutorial.net\/javascript-event-loop\/\"> event loop<\/a>.<\/p>\n\n\n\n<p>Suppose that you need to develop a script that downloads a picture from a remote server and process it after the download completes:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">download<\/span>(<span class=\"hljs-params\">url<\/span>) <\/span>{\n    <span class=\"hljs-comment\">\/\/ ...<\/span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">process<\/span>(<span class=\"hljs-params\">picture<\/span>) <\/span>{\n    <span class=\"hljs-comment\">\/\/ ...<\/span>\n}\n\ndownload(url);\nprocess(picture);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, downloading a picture from a remote server takes time depending on the network speed and the size of the picture.<\/p>\n\n\n\n<p>The following <code>download()<\/code> function uses the <code>setTimeout()<\/code> function to simulate the network request:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">download<\/span>(<span class=\"hljs-params\">url<\/span>) <\/span>{\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n        <span class=\"hljs-comment\">\/\/ script to download the picture here<\/span>\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Downloading <span class=\"hljs-subst\">${url}<\/span> ...`<\/span>);\n    },<span class=\"hljs-number\">1000<\/span>);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And this code emulates the <code>process()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">process<\/span>(<span class=\"hljs-params\">picture<\/span>) <\/span>{\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Processing <span class=\"hljs-subst\">${picture}<\/span>`<\/span>);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When you execute the following code:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> url = <span class=\"hljs-string\">'https:\/\/www.javascripttutorial.net\/pic.jpg'<\/span>;\n\ndownload(url);\nprocess(url);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>you will get the following output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">Processing https:<span class=\"hljs-comment\">\/\/javascripttutorial.net\/pic.jpg<\/span>\nDownloading https:<span class=\"hljs-comment\">\/\/javascripttutorial.net\/pic.jpg ...<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This is not what you expected because the <code>process()<\/code> function executes before the <code>download()<\/code> function. The correct sequence should be:<\/p>\n\n\n\n<ul><li>Download the picture and wait for the download completes.<\/li><li>Process the picture.<\/li><\/ul>\n\n\n\n<p>To resolve this issue, you can pass the <code>process()<\/code> function to the <code>download()<\/code> function and execute the <code>process()<\/code> function inside the <code>download()<\/code> function once the download completes, like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">download<\/span>(<span class=\"hljs-params\">url, callback<\/span>) <\/span>{\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n        <span class=\"hljs-comment\">\/\/ script to download the picture here<\/span>\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Downloading <span class=\"hljs-subst\">${url}<\/span> ...`<\/span>);\n        \n        <span class=\"hljs-comment\">\/\/ process the picture once it is completed<\/span>\n        callback(url);\n    }, <span class=\"hljs-number\">1000<\/span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">process<\/span>(<span class=\"hljs-params\">picture<\/span>) <\/span>{\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Processing <span class=\"hljs-subst\">${picture}<\/span>`<\/span>);\n}\n\n<span class=\"hljs-keyword\">let<\/span> url = <span class=\"hljs-string\">'https:\/\/wwww.javascripttutorial.net\/pic.jpg'<\/span>;\ndownload(url, process);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">Downloading https:<span class=\"hljs-comment\">\/\/www.javascripttutorial.net\/pic.jpg ...<\/span>\nProcessing https:<span class=\"hljs-comment\">\/\/www.javascripttutorial.net\/pic.jpg<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Now, it works as expected.<\/p>\n\n\n\n<p>In this example, the <code>process()<\/code> is a callback passed into an asynchronous function.<\/p>\n\n\n\n<p>When you use a callback to continue code execution after an asynchronous operation, the callback is called an asynchronous callback.<\/p>\n\n\n\n<p>To make the code more concise, you can define the <code>process()<\/code> function as an anonymous function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">download<\/span>(<span class=\"hljs-params\">url, callback<\/span>) <\/span>{\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n        <span class=\"hljs-comment\">\/\/ script to download the picture here<\/span>\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Downloading <span class=\"hljs-subst\">${url}<\/span> ...`<\/span>);\n        <span class=\"hljs-comment\">\/\/ process the picture once it is completed<\/span>\n        callback(url);\n\n    }, <span class=\"hljs-number\">1000<\/span>);\n}\n\n<span class=\"hljs-keyword\">let<\/span> url = <span class=\"hljs-string\">'https:\/\/www.javascripttutorial.net\/pic.jpg'<\/span>;\ndownload(url, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>(<span class=\"hljs-params\">picture<\/span>) <\/span>{\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Processing <span class=\"hljs-subst\">${picture}<\/span>`<\/span>);\n}); <\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Handling errors<\/h3>\n\n\n\n<p>The <code>download()<\/code> function assumes that everything works fine and does not consider any exceptions. The following code introduces two callbacks: <code>success<\/code> and <code>failure<\/code> to handle the success and failure cases respectively:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">download<\/span>(<span class=\"hljs-params\">url, success, failure<\/span>) <\/span>{\n  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Downloading the picture from <span class=\"hljs-subst\">${url}<\/span> ...`<\/span>);\n    !url ? failure(url) : success(url);\n  }, <span class=\"hljs-number\">1000<\/span>);\n}\n\ndownload(\n  <span class=\"hljs-string\">''<\/span>,\n  (url) =&gt; <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Processing the picture <span class=\"hljs-subst\">${url}<\/span>`<\/span>),\n  (url) =&gt; <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`The '<span class=\"hljs-subst\">${url}<\/span>' is not valid`<\/span>)\n);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Nesting callbacks and the Pyramid of Doom<\/h3>\n\n\n\n<p>How do you download three pictures and process them sequentially? A typical approach is to call the <code>download()<\/code> function inside the callback function, like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">download<\/span>(<span class=\"hljs-params\">url, callback<\/span>) <\/span>{\n  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Downloading <span class=\"hljs-subst\">${url}<\/span> ...`<\/span>);\n    callback(url);\n  }, <span class=\"hljs-number\">1000<\/span>);\n}\n\n<span class=\"hljs-keyword\">const<\/span> url1 = <span class=\"hljs-string\">'https:\/\/www.javascripttutorial.net\/pic1.jpg'<\/span>;\n<span class=\"hljs-keyword\">const<\/span> url2 = <span class=\"hljs-string\">'https:\/\/www.javascripttutorial.net\/pic2.jpg'<\/span>;\n<span class=\"hljs-keyword\">const<\/span> url3 = <span class=\"hljs-string\">'https:\/\/www.javascripttutorial.net\/pic3.jpg'<\/span>;\n\ndownload(url1, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">url<\/span>) <\/span>{\n  <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Processing <span class=\"hljs-subst\">${url}<\/span>`<\/span>);\n  download(url2, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">url<\/span>) <\/span>{\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Processing <span class=\"hljs-subst\">${url}<\/span>`<\/span>);\n    download(url3, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">url<\/span>) <\/span>{\n      <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Processing <span class=\"hljs-subst\">${url}<\/span>`<\/span>);\n    });\n  });\n});\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">Downloading https:<span class=\"hljs-comment\">\/\/www.javascripttutorial.net\/pic1.jpg ...<\/span>\nProcessing https:<span class=\"hljs-comment\">\/\/www.javascripttutorial.net\/pic1.jpg<\/span>\nDownloading https:<span class=\"hljs-comment\">\/\/www.javascripttutorial.net\/pic2.jpg ...<\/span>\nProcessing https:<span class=\"hljs-comment\">\/\/www.javascripttutorial.net\/pic2.jpg<\/span>\nDownloading https:<span class=\"hljs-comment\">\/\/www.javascripttutorial.net\/pic3.jpg ...<\/span>\nProcessing https:<span class=\"hljs-comment\">\/\/www.javascripttutorial.net\/pic3.jpg<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The script works perfectly fine.<\/p>\n\n\n\n<p>However, this callback strategy does not scale well when the complexity grows significantly.<\/p>\n\n\n\n<p>Nesting many asynchronous functions inside callbacks is known as the <strong>pyramid of doom<\/strong> or the <strong>callback hell<\/strong>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">asyncFunction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>(<span class=\"hljs-params\"><\/span>)<\/span>{\n    asyncFunction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>(<span class=\"hljs-params\"><\/span>)<\/span>{\n        asyncFunction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>(<span class=\"hljs-params\"><\/span>)<\/span>{\n            asyncFunction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>(<span class=\"hljs-params\"><\/span>)<\/span>{\n                asyncFunction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span>(<span class=\"hljs-params\"><\/span>)<\/span>{\n                    ....\n                });\n            });\n        });\n    });\n});\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To avoid the pyramid of doom, you use <a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-promises\/\">promises<\/a> or <a href=\"https:\/\/www.javascripttutorial.net\/es-next\/javascript-async-await\/\">async\/await<\/a> functions.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>A callback is a function passed into another function as an argument to be executed later.<\/li><li>A high-order function is a function that accepts another function as an argument.<\/li><li>Callback functions can be synchronous or asynchronous.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"84786\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/javascript-callback\/\"\n\t\t\t\tdata-post-title=\"JavaScript Callbacks\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"84786\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/javascript-callback\/\"\n\t\t\t\tdata-post-title=\"JavaScript Callbacks\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about JavaScript callbacks and how they are used to handle asynchronous operations.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":84,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>An Essential Guide to JavaScript Callbacks<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about JavaScript callbacks and how they are used to handle asynchronous operations.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.javascripttutorial.net\/javascript-callback\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"An Essential Guide to JavaScript Callbacks\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you will learn about JavaScript callbacks and how they are used to handle asynchronous operations.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.javascripttutorial.net\/javascript-callback\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-03-05T02:30:34+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.javascripttutorial.net\/javascript-callback\/\",\"url\":\"https:\/\/www.javascripttutorial.net\/javascript-callback\/\",\"name\":\"An Essential Guide to JavaScript Callbacks\",\"isPartOf\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\"},\"datePublished\":\"2019-12-22T06:38:57+00:00\",\"dateModified\":\"2022-03-05T02:30:34+00:00\",\"description\":\"In this tutorial, you will learn about JavaScript callbacks and how they are used to handle asynchronous operations.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/javascript-callback\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.javascripttutorial.net\/javascript-callback\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.javascripttutorial.net\/javascript-callback\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Callbacks\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\",\"url\":\"https:\/\/www.javascripttutorial.net\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.javascripttutorial.net\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"An Essential Guide to JavaScript Callbacks","description":"In this tutorial, you will learn about JavaScript callbacks and how they are used to handle asynchronous operations.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.javascripttutorial.net\/javascript-callback\/","og_locale":"en_US","og_type":"article","og_title":"An Essential Guide to JavaScript Callbacks","og_description":"In this tutorial, you will learn about JavaScript callbacks and how they are used to handle asynchronous operations.","og_url":"https:\/\/www.javascripttutorial.net\/javascript-callback\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-03-05T02:30:34+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/www.javascripttutorial.net\/javascript-callback\/","url":"https:\/\/www.javascripttutorial.net\/javascript-callback\/","name":"An Essential Guide to JavaScript Callbacks","isPartOf":{"@id":"https:\/\/www.javascripttutorial.net\/#website"},"datePublished":"2019-12-22T06:38:57+00:00","dateModified":"2022-03-05T02:30:34+00:00","description":"In this tutorial, you will learn about JavaScript callbacks and how they are used to handle asynchronous operations.","breadcrumb":{"@id":"https:\/\/www.javascripttutorial.net\/javascript-callback\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.javascripttutorial.net\/javascript-callback\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.javascripttutorial.net\/javascript-callback\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":3,"name":"JavaScript Callbacks"}]},{"@type":"WebSite","@id":"https:\/\/www.javascripttutorial.net\/#website","url":"https:\/\/www.javascripttutorial.net\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.javascripttutorial.net\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/84786"}],"collection":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/comments?post=84786"}],"version-history":[{"count":5,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/84786\/revisions"}],"predecessor-version":[{"id":90143,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/84786\/revisions\/90143"}],"up":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/media?parent=84786"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}