{"id":87871,"date":"2020-09-27T01:46:37","date_gmt":"2020-09-27T08:46:37","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=87871"},"modified":"2022-08-17T00:13:59","modified_gmt":"2022-08-17T07:13:59","slug":"javascript-indexeddb","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-indexeddb\/","title":{"rendered":"JavaScript IndexedDB"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the IndexedDB and how to use it to persistently store data inside the browser.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">What is indexedDB<\/h2>\n\n\n\n<p>IndexedDB is a <strong>large-scale object store<\/strong> built into the browser. <\/p>\n\n\n\n<p>The IndexedDB allows you to persistently store the data using key-value pairs. <\/p>\n\n\n\n<p>The values can be any <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-data-types\/\">JavaScript type<\/a> including <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/\">boolean<\/a>, <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-number\/\">number<\/a>, <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-string-type\/\">string<\/a>, <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-undefined\/\">undefined<\/a>, null, date,<a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-objects\/\"> object<\/a>, <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-array\/\">array<\/a>, <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/\">regex<\/a>, blob, and files.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Why indexedDB<\/h2>\n\n\n\n<p>IndexedDB allows you to create web applications that can work both online and offline.<\/p>\n\n\n\n<p>It&#8217;s useful for applications that store a large amount of data and don&#8217;t need a persistent internet connection.<\/p>\n\n\n\n<p>For example, Google Docs uses the IndexedDB to store the cached documents in the browser and synchronizes with the server once in a while. This allows Google Docs to increase performance while enhancing user experiences.<\/p>\n\n\n\n<p>And you&#8217;ll find other types of applications that heavily use IndexedDB like online notepads, quizzes, todo lists, code sandboxes, and CMS.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">IndexedDB structure<\/h2>\n\n\n\n<p>The following picture illustrates the structure of the IndexedDB:<\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"526\" height=\"337\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-IndexedDB.png\" alt=\"\" class=\"wp-image-87876\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-IndexedDB.png 526w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-IndexedDB-300x192.png 300w\" sizes=\"(max-width: 526px) 100vw, 526px\" \/><\/figure><\/div>\n\n\n<h3 class=\"wp-block-heading\">Databases<\/h3>\n\n\n\n<p>A database is the highest level of IndexedDB. A database contains one or more object stores. <\/p>\n\n\n\n<p>The IndexedDB can have one or more databases. Generally, you&#8217;ll create one database per web application.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Object stores<\/h3>\n\n\n\n<p>An object store is a bucket that you can use to store the data and associated indexes. It&#8217;s conceptually equivalent to the tables in SQL databases.<\/p>\n\n\n\n<p>An object store contains the records stored as key-value pairs.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Indexes<\/h3>\n\n\n\n<p>Indexes allow you to query data by the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-object-properties\/\">properties<\/a> of the objects. <\/p>\n\n\n\n<p>Technically, you create indexes on object stores, which are called parent object stores.<\/p>\n\n\n\n<p>For example, if you store the contact information, you may want to create indexes on email, first name, and last name so that you can query the contacts by these properties.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Basic IndexedDB concepts<\/h2>\n\n\n\n<p>The following briefly introduces the basic concepts in the IndexedDB:<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">1) IndexedDB databases store key-value pairs<\/h3>\n\n\n\n<p>Unlike <a href=\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-localstorage\/\">localStorage<\/a> and <a href=\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-sessionstorage\/\">sessionStorage<\/a>, the values stored in the IndexedDB can be complex structures like objects and blob.<\/p>\n\n\n\n<p>Also, keys can be the properties of these objects or can be binary objects.  <\/p>\n\n\n\n<p>For quick searching and sorting, you can create indexes that use any property of the objects.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">2) IndexedDB is transactional<\/h3>\n\n\n\n<p>Every read from and write to the IndexedDB databases always happens in a transaction. <\/p>\n\n\n\n<p>The transactional model ensures the data integrity in case users open the web application in two tabs\/windows at the same time and perform the read from and write to the same database.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">3) IndexedDB API is mostly asynchronous<\/h3>\n\n\n\n<p>IndexedDB operations are asynchronous. It uses DOM events to notify you when an operation completes and the result is available.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">4) IndexedDB is a NoSQL system<\/h3>\n\n\n\n<p>The IndexedDB is a NoSQL system. In other words, it doesn&#8217;t use SQL to query data. Instead, it uses the query that returns a cursor. Then, you can use the cursor to iterate the result set.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">5) IndexedDB follows the same-origin policy<\/h3>\n\n\n\n<p>An origin is a domain, protocol, and port of a URL of the document where the code executes. For example <code>https:\/\/https://jsprifix.netlify.app/<\/code>:<\/p>\n\n\n\n<ul><li>domain: javascripttutorial.net<\/li><li>protocol: https<\/li><li>port: 443<\/li><\/ul>\n\n\n\n<p>The <code>https:\/\/https://jsprifix.netlify.app/\/dom\/<\/code>  and <code>https:\/\/https://jsprifix.netlify.app/\/<\/code> are the same origin because they have the same domain, protocol, and port.<\/p>\n\n\n\n<p>However, the <code>http:\/\/https://jsprifix.netlify.app/\/<\/code> and <code>https:\/\/https://jsprifix.netlify.app/\/<\/code> aren&#8217;t the same origin since they have different protocols and ports:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th><\/th><th>https:\/\/https://jsprifix.netlify.app/<\/th><th>http:\/\/https://jsprifix.netlify.app/<\/th><\/tr><\/thead><tbody><tr><td>Protocol<\/td><td>https<\/td><td>http<\/td><\/tr><tr><td>Port<\/td><td>443<\/td><td>80<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>IndexedDB adheres to the same-origin policy. It means that each origin has its own set of databases. And one origin cannot access databases from other origins.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Basic IndexedDB operations<\/h2>\n\n\n\n<p>The following describes the basic operations on the IndexedDB databases such as <\/p>\n\n\n\n<ul><li>Opening a connection to a database.<\/li><li>Inserting an object into the object store.<\/li><li>Reading data from the object store.<\/li><li>Using a cursor to iterate over a result set.<\/li><li>Deleting an object from the object store.<\/li><\/ul>\n\n\n\n<p>Before opening a connection to a database in the IndexedDB, let&#8217;s create the project structure first.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">1) Create the project structure<\/h3>\n\n\n\n<p>First, create a new folder called <code>indexeddb<\/code> folder. Inside the <code>indexeddb<\/code> folder, create another subfolder called <code>js<\/code>.<\/p>\n\n\n\n<p>Second, create the <code>index.html<\/code> in the <code>indexeddb<\/code> folder, <code>app.js<\/code> in the <code>js<\/code> folder.<\/p>\n\n\n\n<p>Third, place the <code>&lt;script&gt;<\/code> tag that links to the <code>app.js<\/code> file in the <code>index.html<\/code> file like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html<\/span> <span class=\"hljs-attr\">lang<\/span>=<span class=\"hljs-string\">\"en\"<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta<\/span> <span class=\"hljs-attr\">charset<\/span>=<span class=\"hljs-string\">\"UTF-8\"<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta<\/span> <span class=\"hljs-attr\">name<\/span>=<span class=\"hljs-string\">\"viewport\"<\/span> <span class=\"hljs-attr\">content<\/span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title<\/span>&gt;<\/span>IndexedDB<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">title<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">head<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script<\/span> <span class=\"hljs-attr\">src<\/span>=<span class=\"hljs-string\">\"js\/app.js\"<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">script<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">body<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">html<\/span>&gt;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In app.js, you&#8217;ll place all the JavaScript code in an <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-immediately-invoked-function-expression-iife\/\">IIFE<\/a>.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n   <span class=\"hljs-comment\">\/\/ all the code will be here  <\/span>\n   <span class=\"hljs-comment\">\/\/ ...<\/span>\n})();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">1) Check if the IndexedDB is supported<\/h3>\n\n\n\n<p>The following code checks if a web browser supports the IndexedDB:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if<\/span> (!<span class=\"hljs-built_in\">window<\/span>.indexedDB) {\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Your browser doesn't support IndexedDB`<\/span>);\n    <span class=\"hljs-keyword\">return<\/span>;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Since most modern web browsers support the IndexedDB, this may not be necessary anymore.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">2) Open a database<\/h3>\n\n\n\n<p>To open a connection to a database, you use the <code>open()<\/code> method of the <code>window.indexedDB<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> request = indexedDB.open(<span class=\"hljs-string\">'CRM'<\/span>, <span class=\"hljs-number\">1<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>open()<\/code> method accepts two arguments:<\/p>\n\n\n\n<ul><li>The database name (<code>CRM<\/code>)<\/li><li>The database version (<code>1<\/code>)<\/li><\/ul>\n\n\n\n<p>The <code>open()<\/code> method returns a request object which is an instance of the <code>IDBOpenDBRequest<\/code>&nbsp;interface.<\/p>\n\n\n\n<p>When you call the <code>open()<\/code> method, it can succeed or fail. To handle each case, you can assign the corresponding event handler as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">request.onerror = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-built_in\">console<\/span>.error(<span class=\"hljs-string\">`Database error: <span class=\"hljs-subst\">${event.target.errorCode}<\/span>`<\/span>);\n};\n\nrequest.onsuccess = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-comment\">\/\/ add implementation here<\/span>\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">3) Create object stores<\/h3>\n\n\n\n<p>When you open the database for the first time, the <code>onupgradeneeded<\/code> event will trigger. <\/p>\n\n\n\n<p>If you open the database for the second time with a version higher than the existing version, the <code>onupgradeneeded<\/code>\u00a0 event also triggers.<\/p>\n\n\n\n<p>For the first time, you can use the <code>onupgradeneeded<\/code> event handler to initialize the object stores and indexes.<\/p>\n\n\n\n<p>For example, the following <code>onupgradeneeded<\/code> event handler creates the <code>Contacts<\/code> object store and its index.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"> <span class=\"hljs-comment\">\/\/ create the Contacts object store and indexes<\/span>\n request.onupgradeneeded = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n     <span class=\"hljs-keyword\">let<\/span> db = event.target.result;\n\n     <span class=\"hljs-comment\">\/\/ create the Contacts object store <\/span>\n     <span class=\"hljs-comment\">\/\/ with auto-increment id<\/span>\n     <span class=\"hljs-keyword\">let<\/span> store = db.createObjectStore(<span class=\"hljs-string\">'Contacts'<\/span>, {\n         <span class=\"hljs-attr\">autoIncrement<\/span>: <span class=\"hljs-literal\">true<\/span>\n     });\n\n     <span class=\"hljs-comment\">\/\/ create an index on the email property<\/span>\n     <span class=\"hljs-keyword\">let<\/span> index = store.createIndex(<span class=\"hljs-string\">'email'<\/span>, <span class=\"hljs-string\">'email'<\/span>, {\n         <span class=\"hljs-attr\">unique<\/span>: <span class=\"hljs-literal\">true<\/span>\n     });\n };<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<ul><li>First, get the <code>IDBDatabase<\/code>&nbsp;instance from the <code>event.target.result<\/code> and assign it to the <code>db<\/code> variable.<\/li><li>Second, call the <code>createObjectStore()<\/code> method to create the <code>Contacts<\/code> object store with the <code>autoincrement<\/code> key. It means that the IndexedDB will generate an auto-increment number starting at one as the key for every new object inserted into the <code>Contacts<\/code> object store.<\/li><li>Third, call the <code>createIndex()<\/code> method to create an index on the <code>email<\/code> property. Since the email is unique, the index should also be unique. To do so, you specify the third argument of the <code>createIndex()<\/code> method <code>{ unique: true }<\/code>.<\/li><\/ul>\n\n\n\n<h3 class=\"wp-block-heading\">4) Insert data into object stores<\/h3>\n\n\n\n<p>Once you open a connection to the database successfully, you can manage data in the <code>onsuccess<\/code> event handler.<\/p>\n\n\n\n<p>For example, to add an object to an object store, you follow these steps:<\/p>\n\n\n\n<ul><li>First, open a new transaction.<\/li><li>Second, get an object store.<\/li><li>Third, call the <code>put()<\/code> method of the object store to insert a new record.<\/li><li>Finally, close the connection to the database once the transaction completes.<\/li><\/ul>\n\n\n\n<p>The following <code>insertContact()<\/code> function inserts a new contact into the <code>Contacts<\/code> object store:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">insertContact<\/span>(<span class=\"hljs-params\">db, contact<\/span>) <\/span>{\n    <span class=\"hljs-comment\">\/\/ create a new transaction<\/span>\n    <span class=\"hljs-keyword\">const<\/span> txn = db.transaction(<span class=\"hljs-string\">'Contacts'<\/span>, <span class=\"hljs-string\">'readwrite'<\/span>);\n\n    <span class=\"hljs-comment\">\/\/ get the Contacts object store<\/span>\n    <span class=\"hljs-keyword\">const<\/span> store = txn.objectStore(<span class=\"hljs-string\">'Contacts'<\/span>);\n    <span class=\"hljs-comment\">\/\/<\/span>\n    <span class=\"hljs-keyword\">let<\/span> query = store.put(contact);\n\n    <span class=\"hljs-comment\">\/\/ handle success case<\/span>\n    query.onsuccess = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">event<\/span>) <\/span>{\n        <span class=\"hljs-built_in\">console<\/span>.log(event);\n    };\n\n    <span class=\"hljs-comment\">\/\/ handle the error case<\/span>\n    query.onerror = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">event<\/span>) <\/span>{\n        <span class=\"hljs-built_in\">console<\/span>.log(event.target.errorCode);\n    }\n\n    <span class=\"hljs-comment\">\/\/ close the database once the <\/span>\n    <span class=\"hljs-comment\">\/\/ transaction completes<\/span>\n    txn.oncomplete = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n        db.close();\n    };\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To create a new transaction, you call the <code>transaction()<\/code> method of the <code>IDBDatabase<\/code> object.<\/p>\n\n\n\n<p>You can open a transaction in one of two modes: <code>readwrite<\/code> or <code>readonly<\/code>. The <code>readwrite<\/code> mode allows you to read data from and write data to the database while the <code>readonly<\/code> mode allows you to only read data from the database.<\/p>\n\n\n\n<p>It&#8217;s a good practice to open a <code>readonly<\/code> transaction if you need to read data from a database only.<\/p>\n\n\n\n<p>After defining the <code>insertContact()<\/code> function, you can call it in the <code>onsuccess<\/code> event handler of the request to insert one or more contacts like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">request.onsuccess = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n     <span class=\"hljs-keyword\">const<\/span> db = event.target.result;\n\n     insertContact(db, {\n         <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'john.doe@outlook.com'<\/span>,\n         <span class=\"hljs-attr\">firstName<\/span>: <span class=\"hljs-string\">'John'<\/span>,\n         <span class=\"hljs-attr\">lastName<\/span>: <span class=\"hljs-string\">'Doe'<\/span>\n     });\n\n     insertContact(db, {\n         <span class=\"hljs-attr\">email<\/span>: <span class=\"hljs-string\">'jane.doe@gmail.com'<\/span>,\n         <span class=\"hljs-attr\">firstName<\/span>: <span class=\"hljs-string\">'Jane'<\/span>,\n         <span class=\"hljs-attr\">lastName<\/span>: <span class=\"hljs-string\">'Doe'<\/span>\n     });\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Now, if  you open the <code>index.html<\/code> file in the web browser, the code in the app.js will execute to:<\/p>\n\n\n\n<ul><li>Create the <code>CRM<\/code> database in the IndexedDB.<\/li><li>Create the <code>Contacts<\/code> object store in the <code>CRM<\/code> database.<\/li><li>Insert two records into the object store.<\/li><\/ul>\n\n\n\n<p>If you open the devtools on the web browser, you&#8217;ll see the CRM database with the <code>Contacts<\/code> object store. And in the <code>Contacts<\/code> object store, you&#8217;ll see the data there as shown in the following picture:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"808\" height=\"305\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-IndexedDB-insert-data.png\" alt=\"\" class=\"wp-image-87895\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-IndexedDB-insert-data.png 808w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-IndexedDB-insert-data-300x113.png 300w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-IndexedDB-insert-data-768x290.png 768w\" sizes=\"(max-width: 808px) 100vw, 808px\" \/><\/figure>\n\n\n\n<h3 class=\"wp-block-heading\">5) Read data from the object store by key<\/h3>\n\n\n\n<p>To read an object by its key, you use the <code>get()<\/code> method of the object store. The following <code>getContactById()<\/code> function finds a contact by an id:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getContactById<\/span>(<span class=\"hljs-params\">db, id<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">const<\/span> txn = db.transaction(<span class=\"hljs-string\">'Contacts'<\/span>, <span class=\"hljs-string\">'readonly'<\/span>);\n    <span class=\"hljs-keyword\">const<\/span> store = txn.objectStore(<span class=\"hljs-string\">'Contacts'<\/span>);\n\n    <span class=\"hljs-keyword\">let<\/span> query = store.get(id);\n\n    query.onsuccess = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n        <span class=\"hljs-keyword\">if<\/span> (!event.target.result) {\n            <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`The contact with <span class=\"hljs-subst\">${id}<\/span> not found`<\/span>);\n        } <span class=\"hljs-keyword\">else<\/span> {\n            <span class=\"hljs-built_in\">console<\/span>.table(event.target.result);\n        }\n    };\n\n    query.onerror = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n        <span class=\"hljs-built_in\">console<\/span>.log(event.target.errorCode);\n    }\n\n    txn.oncomplete = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n        db.close();\n    };\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When you call the get() method of the object store, it returns a query that will execute asynchronously.<\/p>\n\n\n\n<p>Because the query can succeed or fail, you need to assign the <code>onsuccess<\/code> and <code>onerror<\/code> handlers to handle each case.<\/p>\n\n\n\n<p>If the query succeeded, you&#8217;ll get the result in the event.target.result. Otherwise, you&#8217;ll get an error code via event.target.errorCode.<\/p>\n\n\n\n<p>The following code closes the connection to the database once the transaction completes:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">txn.oncomplete = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n   db.close();\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Actually, the database connection is closed only when all the transactions are completed.<\/p>\n\n\n\n<p>The following calls the <code>getContactById()<\/code> in the <code>onsuccess<\/code> event handler to get the contact with id 1:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">request.onsuccess = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-keyword\">const<\/span> db = event.target.result;\n    getContactById(db, <span class=\"hljs-number\">1<\/span>);\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"442\" height=\"95\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-IndexedDB-Read-data-from-the-object-store.png\" alt=\"\" class=\"wp-image-87897\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-IndexedDB-Read-data-from-the-object-store.png 442w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-IndexedDB-Read-data-from-the-object-store-300x64.png 300w\" sizes=\"(max-width: 442px) 100vw, 442px\" \/><\/figure>\n\n\n\n<h3 class=\"wp-block-heading\">6) Read data from the object store by an index<\/h3>\n\n\n\n<p>The following defines a new function called <code>getContactByEmail()<\/code> that uses the email index to query data:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getContactByEmail<\/span>(<span class=\"hljs-params\">db, email<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">const<\/span> txn = db.transaction(<span class=\"hljs-string\">'Contacts'<\/span>, <span class=\"hljs-string\">'readonly'<\/span>);\n    <span class=\"hljs-keyword\">const<\/span> store = txn.objectStore(<span class=\"hljs-string\">'Contacts'<\/span>);\n\n    <span class=\"hljs-comment\">\/\/ get the index from the Object Store<\/span>\n    <span class=\"hljs-keyword\">const<\/span> index = store.index(<span class=\"hljs-string\">'email'<\/span>);\n    <span class=\"hljs-comment\">\/\/ query by indexes<\/span>\n    <span class=\"hljs-keyword\">let<\/span> query = index.get(email);\n\n    <span class=\"hljs-comment\">\/\/ return the result object on success<\/span>\n    query.onsuccess = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n        <span class=\"hljs-built_in\">console<\/span>.log(query.result); <span class=\"hljs-comment\">\/\/ result objects<\/span>\n    };\n\n    query.onerror = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n        <span class=\"hljs-built_in\">console<\/span>.log(event.target.errorCode);\n    }\n\n    <span class=\"hljs-comment\">\/\/ close the database connection<\/span>\n    txn.oncomplete = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n        db.close();\n    };\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<ul><li>First, get the email index object from the <code>Contacts<\/code> object store.<\/li><li>Second, use the index to read the data by calling the <code>get()<\/code> method.<\/li><li>Third, show the result in the <code>onsuccess<\/code> event handler of the query.<\/li><\/ul>\n\n\n\n<p>The following illustrates how to use the <code>getContactByEmail()<\/code> function in the <code>onsuccess<\/code> event handler:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">request.onsuccess = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-keyword\">const<\/span> db = event.target.result;\n    <span class=\"hljs-comment\">\/\/ get contact by email<\/span>\n    getContactByEmail(db, <span class=\"hljs-string\">'jane.doe@gmail.com'<\/span>);\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"426\" height=\"94\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-IndexedDB-Read-data-by-an-index.png\" alt=\"\" class=\"wp-image-87898\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-IndexedDB-Read-data-by-an-index.png 426w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-IndexedDB-Read-data-by-an-index-300x66.png 300w\" sizes=\"(max-width: 426px) 100vw, 426px\" \/><\/figure>\n\n\n\n<h3 class=\"wp-block-heading\">7) Read all data from an object store<\/h3>\n\n\n\n<p>The following shows how to use a cursor to read all the objects from the <code>Contacts<\/code> object store:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getAllContacts<\/span>(<span class=\"hljs-params\">db<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">const<\/span> txn = db.transaction(<span class=\"hljs-string\">'Contacts'<\/span>, <span class=\"hljs-string\">\"readonly\"<\/span>);\n    <span class=\"hljs-keyword\">const<\/span> objectStore = txn.objectStore(<span class=\"hljs-string\">'Contacts'<\/span>);\n\n    objectStore.openCursor().onsuccess = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n        <span class=\"hljs-keyword\">let<\/span> cursor = event.target.result;\n        <span class=\"hljs-keyword\">if<\/span> (cursor) {\n            <span class=\"hljs-keyword\">let<\/span> contact = cursor.value;\n            <span class=\"hljs-built_in\">console<\/span>.log(contact);\n            <span class=\"hljs-comment\">\/\/ continue next record<\/span>\n            cursor.continue();\n        }\n    };\n    <span class=\"hljs-comment\">\/\/ close the database connection<\/span>\n    txn.oncomplete = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n        db.close();\n    };\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>objectStore.openCursor()<\/code> returns a cursor used to iterate over an object store.<\/p>\n\n\n\n<p>To iterate over the objects in an object store using the cursor, you need to assign an <code>onsuccess<\/code> handler:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">objectStore.openCursor().onsuccess = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n   <span class=\"hljs-comment\">\/\/...<\/span>\n};\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>event.target.result<\/code> returns the cursor. To get the data, you use the <code>cursor.value<\/code> property.<\/p>\n\n\n\n<p>The <code>cursor.continue()<\/code> method advances the cursor to the position of the next record in the object store.<\/p>\n\n\n\n<p>The following calls the <code>getAllContacts()<\/code> in the <code>onsuccess<\/code> event handler to show all data from the <code>Contacts<\/code> object store:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">request.onsuccess = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-keyword\">const<\/span> db = event.target.result;\n    <span class=\"hljs-comment\">\/\/ get all contacts<\/span>\n    getAllContacts(db);\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"516\" height=\"51\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-IndexedDB-Read-all-data-from-the-object-store.png\" alt=\"\" class=\"wp-image-87899\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-IndexedDB-Read-all-data-from-the-object-store.png 516w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-IndexedDB-Read-all-data-from-the-object-store-300x30.png 300w\" sizes=\"(max-width: 516px) 100vw, 516px\" \/><\/figure>\n\n\n\n<h3 class=\"wp-block-heading\">8) Delete a contact<\/h3>\n\n\n\n<p>To delete a record from the object store, you use the <code>delete()<\/code> method of the object store.<\/p>\n\n\n\n<p>The following function deletes a contact by its id from the <code>Contacts<\/code> object store:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">deleteContact<\/span>(<span class=\"hljs-params\">db, id<\/span>) <\/span>{\n    <span class=\"hljs-comment\">\/\/ create a new transaction<\/span>\n    <span class=\"hljs-keyword\">const<\/span> txn = db.transaction(<span class=\"hljs-string\">'Contacts'<\/span>, <span class=\"hljs-string\">'readwrite'<\/span>);\n\n    <span class=\"hljs-comment\">\/\/ get the Contacts object store<\/span>\n    <span class=\"hljs-keyword\">const<\/span> store = txn.objectStore(<span class=\"hljs-string\">'Contacts'<\/span>);\n    <span class=\"hljs-comment\">\/\/<\/span>\n    <span class=\"hljs-keyword\">let<\/span> query = store.delete(id);\n\n    <span class=\"hljs-comment\">\/\/ handle the success case<\/span>\n    query.onsuccess = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">event<\/span>) <\/span>{\n        <span class=\"hljs-built_in\">console<\/span>.log(event);\n    };\n\n    <span class=\"hljs-comment\">\/\/ handle the error case<\/span>\n    query.onerror = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">event<\/span>) <\/span>{\n        <span class=\"hljs-built_in\">console<\/span>.log(event.target.errorCode);\n    }\n\n    <span class=\"hljs-comment\">\/\/ close the database once the <\/span>\n    <span class=\"hljs-comment\">\/\/ transaction completes<\/span>\n    txn.oncomplete = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n        db.close();\n    };\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And you can call the <code>deleteContact()<\/code> function in the <code>onsuccess<\/code> event handler to delete the contact with id 1 as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">request.onsuccess = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-keyword\">const<\/span> db = event.target.result;\n    deleteContact(db, <span class=\"hljs-number\">1<\/span>);\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you run the code, you&#8217;ll find that the contact with id 1 will be deleted.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Put it all together<\/h3>\n\n\n\n<p>The following shows the complete app.js file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-19\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n    <span class=\"hljs-comment\">\/\/ check for IndexedDB support<\/span>\n    <span class=\"hljs-keyword\">if<\/span> (!<span class=\"hljs-built_in\">window<\/span>.indexedDB) {\n        <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`Your browser doesn't support IndexedDB`<\/span>);\n        <span class=\"hljs-keyword\">return<\/span>;\n    }\n\n    <span class=\"hljs-comment\">\/\/ open the CRM database with the version 1<\/span>\n    <span class=\"hljs-keyword\">const<\/span> request = indexedDB.open(<span class=\"hljs-string\">'CRM'<\/span>, <span class=\"hljs-number\">1<\/span>);\n\n    <span class=\"hljs-comment\">\/\/ create the Contacts object store and indexes<\/span>\n    request.onupgradeneeded = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n        <span class=\"hljs-keyword\">let<\/span> db = event.target.result;\n\n        <span class=\"hljs-comment\">\/\/ create the Contacts object store <\/span>\n        <span class=\"hljs-comment\">\/\/ with auto-increment id<\/span>\n        <span class=\"hljs-keyword\">let<\/span> store = db.createObjectStore(<span class=\"hljs-string\">'Contacts'<\/span>, {\n            <span class=\"hljs-attr\">autoIncrement<\/span>: <span class=\"hljs-literal\">true<\/span>\n        });\n\n        <span class=\"hljs-comment\">\/\/ create an index on the email property<\/span>\n        <span class=\"hljs-keyword\">let<\/span> index = store.createIndex(<span class=\"hljs-string\">'email'<\/span>, <span class=\"hljs-string\">'email'<\/span>, {\n            <span class=\"hljs-attr\">unique<\/span>: <span class=\"hljs-literal\">true<\/span>\n        });\n    };\n\n    <span class=\"hljs-comment\">\/\/ handle the error event<\/span>\n    request.onerror = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n        <span class=\"hljs-built_in\">console<\/span>.error(<span class=\"hljs-string\">`Database error: <span class=\"hljs-subst\">${event.target.errorCode}<\/span>`<\/span>);\n    };\n\n    <span class=\"hljs-comment\">\/\/ handle the success event<\/span>\n    request.onsuccess = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n        <span class=\"hljs-keyword\">const<\/span> db = event.target.result;\n\n        <span class=\"hljs-comment\">\/\/ insert contacts<\/span>\n        <span class=\"hljs-comment\">\/\/ insertContact(db, {<\/span>\n        <span class=\"hljs-comment\">\/\/     email: 'john.doe@outlook.com',<\/span>\n        <span class=\"hljs-comment\">\/\/     firstName: 'John',<\/span>\n        <span class=\"hljs-comment\">\/\/     lastName: 'Doe'<\/span>\n        <span class=\"hljs-comment\">\/\/ });<\/span>\n\n        <span class=\"hljs-comment\">\/\/ insertContact(db, {<\/span>\n        <span class=\"hljs-comment\">\/\/     email: 'jane.doe@gmail.com',<\/span>\n        <span class=\"hljs-comment\">\/\/     firstName: 'Jane',<\/span>\n        <span class=\"hljs-comment\">\/\/     lastName: 'Doe'<\/span>\n        <span class=\"hljs-comment\">\/\/ });<\/span>\n\n\n        <span class=\"hljs-comment\">\/\/ get contact by id 1<\/span>\n        <span class=\"hljs-comment\">\/\/ getContactById(db, 1);<\/span>\n\n\n        <span class=\"hljs-comment\">\/\/ get contact by email<\/span>\n        <span class=\"hljs-comment\">\/\/ getContactByEmail(db, 'jane.doe@gmail.com');<\/span>\n\n        <span class=\"hljs-comment\">\/\/ get all contacts<\/span>\n        <span class=\"hljs-comment\">\/\/ getAllContacts(db);<\/span>\n\n        deleteContact(db, <span class=\"hljs-number\">1<\/span>);\n\n    };\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">insertContact<\/span>(<span class=\"hljs-params\">db, contact<\/span>) <\/span>{\n        <span class=\"hljs-comment\">\/\/ create a new transaction<\/span>\n        <span class=\"hljs-keyword\">const<\/span> txn = db.transaction(<span class=\"hljs-string\">'Contacts'<\/span>, <span class=\"hljs-string\">'readwrite'<\/span>);\n\n        <span class=\"hljs-comment\">\/\/ get the Contacts object store<\/span>\n        <span class=\"hljs-keyword\">const<\/span> store = txn.objectStore(<span class=\"hljs-string\">'Contacts'<\/span>);\n        <span class=\"hljs-comment\">\/\/<\/span>\n        <span class=\"hljs-keyword\">let<\/span> query = store.put(contact);\n\n        <span class=\"hljs-comment\">\/\/ handle success case<\/span>\n        query.onsuccess = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">event<\/span>) <\/span>{\n            <span class=\"hljs-built_in\">console<\/span>.log(event);\n        };\n\n        <span class=\"hljs-comment\">\/\/ handle the error case<\/span>\n        query.onerror = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">event<\/span>) <\/span>{\n            <span class=\"hljs-built_in\">console<\/span>.log(event.target.errorCode);\n        }\n\n        <span class=\"hljs-comment\">\/\/ close the database once the <\/span>\n        <span class=\"hljs-comment\">\/\/ transaction completes<\/span>\n        txn.oncomplete = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n            db.close();\n        };\n    }\n\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getContactById<\/span>(<span class=\"hljs-params\">db, id<\/span>) <\/span>{\n        <span class=\"hljs-keyword\">const<\/span> txn = db.transaction(<span class=\"hljs-string\">'Contacts'<\/span>, <span class=\"hljs-string\">'readonly'<\/span>);\n        <span class=\"hljs-keyword\">const<\/span> store = txn.objectStore(<span class=\"hljs-string\">'Contacts'<\/span>);\n\n        <span class=\"hljs-keyword\">let<\/span> query = store.get(id);\n\n        query.onsuccess = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n            <span class=\"hljs-keyword\">if<\/span> (!event.target.result) {\n                <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`The contact with <span class=\"hljs-subst\">${id}<\/span> not found`<\/span>);\n            } <span class=\"hljs-keyword\">else<\/span> {\n                <span class=\"hljs-built_in\">console<\/span>.table(event.target.result);\n            }\n        };\n\n        query.onerror = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n            <span class=\"hljs-built_in\">console<\/span>.log(event.target.errorCode);\n        }\n\n        txn.oncomplete = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n            db.close();\n        };\n    };\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getContactByEmail<\/span>(<span class=\"hljs-params\">db, email<\/span>) <\/span>{\n        <span class=\"hljs-keyword\">const<\/span> txn = db.transaction(<span class=\"hljs-string\">'Contacts'<\/span>, <span class=\"hljs-string\">'readonly'<\/span>);\n        <span class=\"hljs-keyword\">const<\/span> store = txn.objectStore(<span class=\"hljs-string\">'Contacts'<\/span>);\n\n        <span class=\"hljs-comment\">\/\/ get the index from the Object Store<\/span>\n        <span class=\"hljs-keyword\">const<\/span> index = store.index(<span class=\"hljs-string\">'email'<\/span>);\n        <span class=\"hljs-comment\">\/\/ query by indexes<\/span>\n        <span class=\"hljs-keyword\">let<\/span> query = index.get(email);\n\n        <span class=\"hljs-comment\">\/\/ return the result object on success<\/span>\n        query.onsuccess = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n            <span class=\"hljs-built_in\">console<\/span>.table(query.result); <span class=\"hljs-comment\">\/\/ result objects<\/span>\n        };\n\n        query.onerror = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n            <span class=\"hljs-built_in\">console<\/span>.log(event.target.errorCode);\n        }\n\n        <span class=\"hljs-comment\">\/\/ close the database connection<\/span>\n        txn.oncomplete = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n            db.close();\n        };\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">getAllContacts<\/span>(<span class=\"hljs-params\">db<\/span>) <\/span>{\n        <span class=\"hljs-keyword\">const<\/span> txn = db.transaction(<span class=\"hljs-string\">'Contacts'<\/span>, <span class=\"hljs-string\">\"readonly\"<\/span>);\n        <span class=\"hljs-keyword\">const<\/span> objectStore = txn.objectStore(<span class=\"hljs-string\">'Contacts'<\/span>);\n\n        objectStore.openCursor().onsuccess = <span class=\"hljs-function\">(<span class=\"hljs-params\">event<\/span>) =&gt;<\/span> {\n            <span class=\"hljs-keyword\">let<\/span> cursor = event.target.result;\n            <span class=\"hljs-keyword\">if<\/span> (cursor) {\n                <span class=\"hljs-keyword\">let<\/span> contact = cursor.value;\n                <span class=\"hljs-built_in\">console<\/span>.log(contact);\n                <span class=\"hljs-comment\">\/\/ continue next record<\/span>\n                cursor.continue();\n            }\n        };\n        <span class=\"hljs-comment\">\/\/ close the database connection<\/span>\n        txn.oncomplete = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n            db.close();\n        };\n    }\n\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">deleteContact<\/span>(<span class=\"hljs-params\">db, id<\/span>) <\/span>{\n        <span class=\"hljs-comment\">\/\/ create a new transaction<\/span>\n        <span class=\"hljs-keyword\">const<\/span> txn = db.transaction(<span class=\"hljs-string\">'Contacts'<\/span>, <span class=\"hljs-string\">'readwrite'<\/span>);\n\n        <span class=\"hljs-comment\">\/\/ get the Contacts object store<\/span>\n        <span class=\"hljs-keyword\">const<\/span> store = txn.objectStore(<span class=\"hljs-string\">'Contacts'<\/span>);\n        <span class=\"hljs-comment\">\/\/<\/span>\n        <span class=\"hljs-keyword\">let<\/span> query = store.delete(id);\n\n        <span class=\"hljs-comment\">\/\/ handle the success case<\/span>\n        query.onsuccess = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">event<\/span>) <\/span>{\n            <span class=\"hljs-built_in\">console<\/span>.log(event);\n        };\n\n        <span class=\"hljs-comment\">\/\/ handle the error case<\/span>\n        query.onerror = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">event<\/span>) <\/span>{\n            <span class=\"hljs-built_in\">console<\/span>.log(event.target.errorCode);\n        }\n\n        <span class=\"hljs-comment\">\/\/ close the database once the <\/span>\n        <span class=\"hljs-comment\">\/\/ transaction completes<\/span>\n        txn.oncomplete = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\"><\/span>) <\/span>{\n            db.close();\n        };\n\n    }\n})();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-19\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>The IndexedDB is a large-scale object stored in web browsers.<\/li><li>The IndexedDB stores data as key-value pairs. The values can be any data including simple and complex ones.<\/li><li>The IndexedDB consists of one or more databases. Each database has one or more object stores. Typically, you create a database in the IndexedDB per web application.<\/li><li>The IndexedDB is useful for web applications that don&#8217;t require a persistent internet connection, especially for applications that work both online and offline.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"87871\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-indexeddb\/\"\n\t\t\t\tdata-post-title=\"JavaScript IndexedDB\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"87871\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-indexeddb\/\"\n\t\t\t\tdata-post-title=\"JavaScript IndexedDB\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you&#8217;ll learn about the IndexedDB and how to use it to persistently store data inside the browser. What is indexedDB IndexedDB is a large-scale object store built into the browser. The IndexedDB allows you to persistently store the data using key-value pairs. The values can be any JavaScript type including boolean, [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":87825,"menu_order":3,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript IndexedDB<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-indexeddb\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript IndexedDB\" \/>\n<meta property=\"og:description\" content=\"Summary: in this tutorial, you&#8217;ll learn about the IndexedDB and how to use it to persistently store data inside the browser. What is indexedDB IndexedDB is a large-scale object store built into the browser. The IndexedDB allows you to persistently store the data using key-value pairs. The values can be any JavaScript type including boolean, [&hellip;]\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-indexeddb\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-08-17T07:13:59+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-IndexedDB.png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"13 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-indexeddb\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-indexeddb\/\",\"name\":\"JavaScript IndexedDB\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2020-09-27T08:46:37+00:00\",\"dateModified\":\"2022-08-17T07:13:59+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-indexeddb\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-indexeddb\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-indexeddb\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Web API\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/web-apis\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript IndexedDB\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript IndexedDB","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-indexeddb\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript IndexedDB","og_description":"Summary: in this tutorial, you&#8217;ll learn about the IndexedDB and how to use it to persistently store data inside the browser. What is indexedDB IndexedDB is a large-scale object store built into the browser. The IndexedDB allows you to persistently store the data using key-value pairs. The values can be any JavaScript type including boolean, [&hellip;]","og_url":"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-indexeddb\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-08-17T07:13:59+00:00","og_image":[{"url":"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-IndexedDB.png"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"13 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-indexeddb\/","url":"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-indexeddb\/","name":"JavaScript IndexedDB","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2020-09-27T08:46:37+00:00","dateModified":"2022-08-17T07:13:59+00:00","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-indexeddb\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-indexeddb\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/web-apis\/javascript-indexeddb\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"Web API","item":"https:\/\/https://jsprifix.netlify.app/\/web-apis\/"},{"@type":"ListItem","position":3,"name":"JavaScript IndexedDB"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/87871"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=87871"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/87871\/revisions"}],"predecessor-version":[{"id":90256,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/87871\/revisions\/90256"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/87825"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=87871"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}