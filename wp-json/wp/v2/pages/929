{"id":929,"date":"2016-11-23T01:42:25","date_gmt":"2016-11-23T09:42:25","guid":{"rendered":"http:\/\/https://jsprifix.netlify.app/\/?page_id=929"},"modified":"2022-08-30T19:04:36","modified_gmt":"2022-08-31T02:04:36","slug":"javascript-logical-operators","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-logical-operators\/","title":{"rendered":"An Introduction to JavaScript Logical Operators"},"content":{"rendered":"<div class=\"wp-block-image\">\n<figure class=\"alignright\"><img decoding=\"async\" loading=\"lazy\" width=\"292\" height=\"252\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2016\/11\/JavaScript-Logical-Operator.png\" alt=\"Javascript Logical Operator\" class=\"wp-image-942\" title=\"Javascript Logical Operator\"\/><\/figure><\/div>\n\n\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to use the JavaScript logical operators including the logical NOT operator( <code>!<\/code>), the logical AND operator ( <code>&amp;&amp;<\/code>) and the logical OR operator ( <code>||<\/code>).<\/p>\n\n\n\n<p>The logical operators are important in JavaScript because they allow you to compare <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-variables\/\">variables<\/a> and do something based on the result of that comparison.<\/p>\n\n\n\n<p>For example, if the result of the comparison is <code>true<\/code>, you can run a block of code; if it&#8217;s <code>false<\/code>, you can execute another code block.  <\/p>\n\n\n\n<p>JavaScript provides three logical operators:<\/p>\n\n\n\n<ul><li>! (Logical NOT)<\/li><li>|| (Logical OR)<\/li><li>&amp;&amp; (Logical AND)<\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">1) The Logical NOT operator (!)<\/h2>\n\n\n\n<p>JavaScript uses an exclamation point  <code>!<\/code> to represent the logical NOT operator. The <code>!<\/code> operator can be applied to a single value of any type, not just a Boolean value.<\/p>\n\n\n\n<p>When you apply the <code>!<\/code> operator to a boolean value, the <code>!<\/code> returns <code>true<\/code> if the value is <code>false<\/code> and vice versa. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> eligible = <span class=\"hljs-literal\">false<\/span>,\n    required = <span class=\"hljs-literal\">true<\/span>;\n\n<span class=\"hljs-built_in\">console<\/span>.log(!eligible);\n<span class=\"hljs-built_in\">console<\/span>.log(!required);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-literal\">true<\/span>\n<span class=\"hljs-literal\">false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>eligible<\/code> is <code>true<\/code> so <code>!eligible<\/code> returns <code>false<\/code>. And since the <code>required<\/code> is <code>true<\/code>, the <code>!required<\/code> returns <code>false<\/code>.<\/p>\n\n\n\n<p>When you apply the <code>!<\/code> operator to a non-Boolean value. The <code>!<\/code> operator first converts the value to a <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-data-types\/#boolean\">boolean<\/a> value and then negates it.<\/p>\n\n\n\n<p>The following example shows how to use the <code>!<\/code> operator:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">!a<\/code><\/span><\/pre>\n\n\n<p>The logical <code>!<\/code> operator works based on the following rules:<\/p>\n\n\n\n<ul><li>If <code>a<\/code> is <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-undefined\/\">undefined<\/a><\/code>, the result is <code>true<\/code>.<\/li><li>If <code>a<\/code> is <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/object\/javascript-null\/\">null<\/a><\/code>, the result is <code>true<\/code>.<\/li><li>If <code>a<\/code> is a number other than <code>0<\/code>, the result is <code>false<\/code>.<\/li><li>If <code>a<\/code> is <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-nan\/\">NaN<\/a><\/code>, the result is <code>true<\/code>.<\/li><li>If a is an object, the result is false.<\/li><li>If a is an empty string, the result is true. In the case <code>a<\/code> is a non-empty string, the result is <code>false<\/code><\/li><\/ul>\n\n\n\n<p>The following demonstrates the results of the logical <code>!<\/code> operator when applying to a non-boolean value:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(!<span class=\"hljs-literal\">undefined<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(!<span class=\"hljs-literal\">null<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(!<span class=\"hljs-number\">20<\/span>); <span class=\"hljs-comment\">\/\/false<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(!<span class=\"hljs-number\">0<\/span>); <span class=\"hljs-comment\">\/\/true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(!<span class=\"hljs-literal\">NaN<\/span>); <span class=\"hljs-comment\">\/\/true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(!{}); <span class=\"hljs-comment\">\/\/ false<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(!<span class=\"hljs-string\">''<\/span>); <span class=\"hljs-comment\">\/\/true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(!<span class=\"hljs-string\">'OK'<\/span>); <span class=\"hljs-comment\">\/\/false<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(!<span class=\"hljs-literal\">false<\/span>); <span class=\"hljs-comment\">\/\/true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(!<span class=\"hljs-literal\">true<\/span>); <span class=\"hljs-comment\">\/\/false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Double-negation (<code>!!<\/code>)<\/h3>\n\n\n\n<p>Sometimes, you may see the double negation (<code>!!<\/code>) in the code. The <code>!!<\/code> uses the logical NOT operator (<code>!<\/code>) twice to convert a value to its real boolean value. <\/p>\n\n\n\n<p>The result is the same as using the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/\">Boolean()<\/a> function. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> counter = <span class=\"hljs-number\">10<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(!!counter); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The first <code>!<\/code> operator negates the Boolean value of the <code>counter<\/code> variable. If the <code>counter<\/code> is <code>true<\/code>, then the <code>!<\/code> operator makes it false and vice versa. <\/p>\n\n\n\n<p>The second <code>!<\/code> operator negates that result of the first <code>!<\/code> operator and returns the real boolean value of the <code>counter<\/code> variable.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">2) The Logical AND operator (<code>&amp;&amp;<\/code>)<\/h2>\n\n\n\n<p>JavaScript uses the&nbsp;double ampersand (<code>&amp;&amp;<\/code>) to represent the logical AND operator. The following expression uses the <code>&amp;&amp;<\/code> operator:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> result = a &amp;&amp; b;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If <code>a<\/code> can be converted to <code>true<\/code>, the <code>&amp;&amp;<\/code> operator returns the <code>b<\/code>; otherwise, it returns the <code>a<\/code>. In fact, this rule is applied to all boolean values.<\/p>\n\n\n\n<p>The following truth table illustrates the result of the <code>&amp;&amp;<\/code> operator when it is applied to two Boolean values:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>a<\/th><th>b<\/th><th>a &amp;&amp; b<\/th><\/tr><tr><td>true<\/td><td>true<\/td><td>true<\/td><\/tr><\/thead><tbody><tr><td>true<\/td><td>false<\/td><td>false<\/td><\/tr><tr><td>false<\/td><td>true<\/td><td>false<\/td><\/tr><tr><td>false<\/td><td>false<\/td><td>false<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>The result of the <code>&amp;&amp;<\/code> operator is true only if both values are <code>true<\/code>, otherwise, it is <code>false<\/code>. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> eligible = <span class=\"hljs-literal\">false<\/span>,\n    required = <span class=\"hljs-literal\">true<\/span>;\n\n<span class=\"hljs-built_in\">console<\/span>.log(eligible &amp;&amp; required); <span class=\"hljs-comment\">\/\/ false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>eligible<\/code> is <code>false<\/code>, therefore, the value of the expression <code>eligible &amp;&amp; required<\/code> is <code>false<\/code>. <\/p>\n\n\n\n<p>See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> eligible = <span class=\"hljs-literal\">true<\/span>,\n    required = <span class=\"hljs-literal\">true<\/span>;\n\n<span class=\"hljs-built_in\">console<\/span>.log(eligible &amp;&amp; required); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, both <code>eligible<\/code> and <code>required<\/code> are <code>true<\/code>, therefore, the value of the expression <code>eligible &amp;&amp; required<\/code> is <code>true<\/code>.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Short-circuit evaluation<\/h3>\n\n\n\n<p>The <code>&amp;&amp;<\/code> operator is short-circuited. It means that the <code>&amp;&amp;<\/code> operator evaluates the second value only if the first one doesn&#8217;t suffice to determine the value of an expression. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> b = <span class=\"hljs-literal\">true<\/span>;\n<span class=\"hljs-keyword\">let<\/span> result = b &amp;&amp; (<span class=\"hljs-number\">1<\/span> \/ <span class=\"hljs-number\">0<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(result);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-literal\">Infinity<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, <code>b<\/code> is <code>true<\/code> therefore the <code>&amp;&amp;<\/code> operator could not determine the result without further evaluating the second expression (<code>1\/0<\/code>). <\/p>\n\n\n\n<p>The result is <code>Infinity<\/code> which is the result of the expression (<code>1\/0<\/code>). However:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> b = <span class=\"hljs-literal\">false<\/span>;\n<span class=\"hljs-keyword\">let<\/span> result = b &amp;&amp; (<span class=\"hljs-number\">1<\/span> \/ <span class=\"hljs-number\">0<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(result);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-literal\">false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this case, <code>b<\/code> is <code>false<\/code>, the <code>&amp;&amp;<\/code> operator doesn&#8217;t need to evaluate the second expression because it can determine the final result as <code>false<\/code> based value of the first value. <\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The chain of <code>&amp;&amp;<\/code> operators<\/h3>\n\n\n\n<p>The following expression uses multiple <code>&amp;&amp;<\/code> operators:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> result = value1 &amp;&amp; value2 &amp;&amp; value3;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>&amp;&amp;<\/code>&nbsp;operator carries the following:<\/p>\n\n\n\n<ul><li>Evaluates values from left to right.<\/li><li>For each value, converts it to a boolean. If the result is&nbsp;<code>false<\/code>, stops and returns the original value.<\/li><li>If all values are truthy values, returns the last value.<\/li><\/ul>\n\n\n\n<p>In other words, The <code>&amp;&amp;<\/code> operator returns the first falsy value or the last value if none were found.<\/p>\n\n\n\n<p class=\"note\">If a value can be converted to&nbsp;<code>true<\/code>, it is so-called a&nbsp;truthy value. If a value can be converted to&nbsp;<code>false<\/code>, it is a so-called&nbsp;falsy value.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">3) The Logical OR operator (<code>||<\/code>)<\/h2>\n\n\n\n<p>JavaScript uses the&nbsp;double pipe <code>||<\/code> to represent the logical OR operator. You can apply the <code>||<\/code> operator to two values of any type:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> result = a || b;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If&nbsp;<code>a<\/code> can be converted to&nbsp;<code>true<\/code>, returns&nbsp;<code>a<\/code>; else, returns&nbsp;<code>b<\/code>. This rule is also applied to boolean values.<\/p>\n\n\n\n<p>The following truth table illustrates the result of the <code>||<\/code> operator based on the value of the operands:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>a<\/th><th>b<\/th><th>a || b<\/th><\/tr><\/thead><tbody><tr><td>true<\/td><td>true<\/td><td>true<\/td><\/tr><tr><td>true<\/td><td>false<\/td><td>true<\/td><\/tr><tr><td>false<\/td><td>true<\/td><td>true<\/td><\/tr><tr><td>false<\/td><td>false<\/td><td>false<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>The <code>||<\/code> operator returns <code>false<\/code> if both values evaluate to <code>false<\/code>. In case either value is <code>true<\/code>, the <code>||<\/code> operator returns <code>true<\/code>. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> eligible = <span class=\"hljs-literal\">true<\/span>,\n    required = <span class=\"hljs-literal\">false<\/span>;\n\n<span class=\"hljs-built_in\">console<\/span>.log(eligible || required); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>See another example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> eligible = <span class=\"hljs-literal\">false<\/span>,\n    required = <span class=\"hljs-literal\">false<\/span>;\n\n<span class=\"hljs-built_in\">console<\/span>.log(eligible || required); <span class=\"hljs-comment\">\/\/ false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the expression <code>eligible || required<\/code> returns <code>false<\/code> because both values are <code>false<\/code>.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The <code>||<\/code> operator is also short-circuited<\/h3>\n\n\n\n<p>Similar to the  <code>&amp;&amp;<\/code> operator, the  <code>||<\/code> operator is short-circuited. It means that if the first value evaluates to <code>true<\/code>, the <code>&amp;&amp;<\/code> operator doesn&#8217;t evaluate the second one. <\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The chain of <code>||<\/code> operators<\/h3>\n\n\n\n<p>The following example shows how to use multiple || operators in an expression:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> result = value1 || value2 || value3;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>||<\/code>&nbsp;operator does the following:<\/p>\n\n\n\n<ul><li>Evaluates values from left to right.<\/li><li>For each value, converts it to a boolean value. If the result of the conversion is&nbsp;<code>true<\/code>, stops and returns the value.<\/li><li>If all values have been evaluated to <code>false<\/code>, returns the last value.<\/li><\/ul>\n\n\n\n<p>In other words, the chain of the  <code>||<\/code>&nbsp;operators returns the first truthy value or the last one if no truthy value was found.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Logical operator precedence<\/h2>\n\n\n\n<p>When you mix logical operators in an expression, the JavaScript engine evaluates the operators based on a specified order. And this order is called the <em>operator precedence<\/em>. <\/p>\n\n\n\n<p>In other words, the operator precedence is the order of evaluation of logical operators in an expression.<\/p>\n\n\n\n<p>The precedence of the logical operator is in the following order from the highest to the lowest:<\/p>\n\n\n\n<ol><li>Logical NOT (!)<\/li><li>Logical AND (&amp;&amp;)<\/li><li>Logical OR (||)<\/li><\/ol>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>The NOT operator (<code>!<\/code>) negates a boolean value. The (<code>!!<\/code>) converts a value into its real boolean value.<\/li><li>The AND operator (<code>&amp;&amp;<\/code>) is applied to two Boolean values and returns true if both values are true. <\/li><li>The OR operator (<code>||<\/code>) is applied to two Boolean values and returns <code>true<\/code> if one of the operands is <code>true<\/code>. <\/li><li>Both <code>&amp;&amp;<\/code> and <code>||<\/code> operator are short-circuited. They can be also applied to non-Boolean values.<\/li><li>The logical operator precedence from the highest to the lowest is <code>!<\/code>, <code>&amp;&amp;<\/code> and <code>||<\/code>.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"929\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-logical-operators\/\"\n\t\t\t\tdata-post-title=\"An Introduction to JavaScript Logical Operators\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"929\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-logical-operators\/\"\n\t\t\t\tdata-post-title=\"An Introduction to JavaScript Logical Operators\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn how to use the JavaScript logical operators including logical NOT operator(!), logical AND operator (&#038;&#038;) and logical OR operator (||).<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":20,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>An Introduction to JavaScript Logical Operators By Examples<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn how to use JavaScript logical operators including logical NOT (!) AND (&amp;&amp;), and OR (|) operators.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-logical-operators\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"An Introduction to JavaScript Logical Operators By Examples\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you will learn how to use JavaScript logical operators including logical NOT (!) AND (&amp;&amp;), and OR (|) operators.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-logical-operators\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-08-31T02:04:36+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2016\/11\/JavaScript-Logical-Operator.png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-logical-operators\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-logical-operators\/\",\"name\":\"An Introduction to JavaScript Logical Operators By Examples\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2016-11-23T09:42:25+00:00\",\"dateModified\":\"2022-08-31T02:04:36+00:00\",\"description\":\"In this tutorial, you will learn how to use JavaScript logical operators including logical NOT (!) AND (&&), and OR (|) operators.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-logical-operators\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-logical-operators\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-logical-operators\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"An Introduction to JavaScript Logical Operators\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"An Introduction to JavaScript Logical Operators By Examples","description":"In this tutorial, you will learn how to use JavaScript logical operators including logical NOT (!) AND (&&), and OR (|) operators.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-logical-operators\/","og_locale":"en_US","og_type":"article","og_title":"An Introduction to JavaScript Logical Operators By Examples","og_description":"In this tutorial, you will learn how to use JavaScript logical operators including logical NOT (!) AND (&&), and OR (|) operators.","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-logical-operators\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-08-31T02:04:36+00:00","og_image":[{"url":"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2016\/11\/JavaScript-Logical-Operator.png"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-logical-operators\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-logical-operators\/","name":"An Introduction to JavaScript Logical Operators By Examples","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2016-11-23T09:42:25+00:00","dateModified":"2022-08-31T02:04:36+00:00","description":"In this tutorial, you will learn how to use JavaScript logical operators including logical NOT (!) AND (&&), and OR (|) operators.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-logical-operators\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-logical-operators\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-logical-operators\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"An Introduction to JavaScript Logical Operators"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/929"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=929"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/929\/revisions"}],"predecessor-version":[{"id":90371,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/929\/revisions\/90371"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=929"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}