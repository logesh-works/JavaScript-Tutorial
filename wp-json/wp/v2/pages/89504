{"id":89504,"date":"2022-02-01T08:57:22","date_gmt":"2022-02-01T16:57:22","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=89504"},"modified":"2022-02-01T08:57:24","modified_gmt":"2022-02-01T16:57:24","slug":"javascript-throw-exception","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-throw-exception\/","title":{"rendered":"JavaScript Throw Exception"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use the JavaScript <code>throw<\/code> statement to throw an exception.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"introduction-to-the-javascript-throw-statement\">Introduction to the JavaScript throw statement<\/h2>\n\n\n\n<p>The <code>throw<\/code> statement allows you to throw an exception. Here&#8217;s the syntax of the <code>throw<\/code> statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">throw<\/span> expression;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this syntax, the <code>expression<\/code> specifies the value of the exception. Typically, you&#8217;ll use a new instance of the <code>Error<\/code> class or its subclasses.<\/p>\n\n\n\n<p>When encountering the <code>throw<\/code> statement, the JavaScript engine stops executing and passes the control to the first <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/\">catch<\/a><\/code> block in the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-call-stack\/\">call stack<\/a>. If no <code>catch<\/code> block exists, the JavaScript engine terminates the script.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"javascript-throw-exception-examples\">JavaScript throw exception examples<\/h2>\n\n\n\n<p>Let&#8217;s take some examples of using the <code>throw<\/code> statement.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"1-using-the-javascript-throw-statement-to-throw-an-exception\">1) Using the JavaScript throw statement to throw an exception<\/h3>\n\n\n\n<p>The following example uses the <code>throw<\/code> statement to throw an exception in a <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-function\/\">function<\/a>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span>(<span class=\"hljs-params\">x, y<\/span>) <\/span>{\r\n  <span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">typeof<\/span> x !== <span class=\"hljs-string\">'number'<\/span>) {\r\n    <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-string\">'The first argument must be a number'<\/span>;\r\n  }\r\n  <span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">typeof<\/span> y !== <span class=\"hljs-string\">'number'<\/span>) {\r\n    <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-string\">'The second argument must be a number'<\/span>;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">return<\/span> x + y;\r\n}\r\n\r\n<span class=\"hljs-keyword\">const<\/span> result = add(<span class=\"hljs-string\">'a'<\/span>, <span class=\"hljs-number\">10<\/span>);\r\n<span class=\"hljs-built_in\">console<\/span>.log(result);\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, define the <code>add()<\/code> function that accepts two arguments and returns the sum of them. The <code>add()<\/code> function uses the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-typeof\/\">typeof<\/a><\/code> operator to check the type of each argument and throws an exception if the type is not number. <\/p>\n\n\n\n<p>Second, call the <code>add()<\/code> function and pass a string and a number into it.<\/p>\n\n\n\n<p>Third, show the result to the console.<\/p>\n\n\n\n<p>The script causes an error because the first argument (<code>\"a\"<\/code>) is not a number:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">Uncaught The first argument must be a number<\/code><\/span><\/pre>\n\n\n<p>To handle the exception, you can use the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-try-catch\/\">try...catch<\/a><\/code> statement. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span>(<span class=\"hljs-params\">x, y<\/span>) <\/span>{\r\n  <span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">typeof<\/span> x !== <span class=\"hljs-string\">'number'<\/span>) {\r\n    <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-string\">'The first argument must be a number'<\/span>;\r\n  }\r\n  <span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">typeof<\/span> y !== <span class=\"hljs-string\">'number'<\/span>) {\r\n    <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-string\">'The second argument must be a number'<\/span>;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">return<\/span> x + y;\r\n}\r\n\r\n<span class=\"hljs-keyword\">try<\/span> {\r\n  <span class=\"hljs-keyword\">const<\/span> result = add(<span class=\"hljs-string\">'a'<\/span>, <span class=\"hljs-number\">10<\/span>);\r\n  <span class=\"hljs-built_in\">console<\/span>.log(result);\r\n} <span class=\"hljs-keyword\">catch<\/span> (e) {\r\n  <span class=\"hljs-built_in\">console<\/span>.log(e);\r\n}\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">The first argument must be a number<\/code><\/span><\/pre>\n\n\n<p>In this example, we place the call to the <code>add()<\/code> function in a <code>try<\/code> block. Because the <code>expression<\/code> in the <code>throw<\/code> statement is a string, the exception in the <code>catch<\/code> block is a string as shown in the output.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"2-using-javascript-throw-statement-to-throw-an-instance-of-the-error-class\">2) Using JavaScript throw statement to throw an instance of the Error class<\/h3>\n\n\n\n<p>In the following example, we throw an instance of the <code>Error<\/code> class rather than a string in the <code>add()<\/code> function;<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span>(<span class=\"hljs-params\">x, y<\/span>) <\/span>{\r\n  <span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">typeof<\/span> x !== <span class=\"hljs-string\">'number'<\/span>) {\r\n    <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Error<\/span>(<span class=\"hljs-string\">'The first argument must be a number'<\/span>);\r\n  }\r\n  <span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">typeof<\/span> y !== <span class=\"hljs-string\">'number'<\/span>) {\r\n    <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Error<\/span>(<span class=\"hljs-string\">'The second argument must be a number'<\/span>);\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">return<\/span> x + y;\r\n}\r\n\r\n<span class=\"hljs-keyword\">try<\/span> {\r\n  <span class=\"hljs-keyword\">const<\/span> result = add(<span class=\"hljs-string\">'a'<\/span>, <span class=\"hljs-number\">10<\/span>);\r\n  <span class=\"hljs-built_in\">console<\/span>.log(result);\r\n} <span class=\"hljs-keyword\">catch<\/span> (e) {\r\n  <span class=\"hljs-built_in\">console<\/span>.log(e.name, <span class=\"hljs-string\">':'<\/span>, e.message);\r\n}\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">Error<\/span> : The first argument must be a number<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>As shown in the output, the exception object in the <code>catch<\/code> block has the <code>name<\/code> as <code>Error<\/code> and the <code>message<\/code> as the one that we pass to the <code>Error()<\/code> constructor.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"3-using-javascript-throw-statement-to-throw-a-user-defined-exception\">3) Using JavaScript throw statement to throw a user-defined exception<\/h3>\n\n\n\n<p>Sometimes, you want to throw a custom error rather than the built-in <code>Error<\/code>. To do that, you can define a custom error class that extends the <code>Error<\/code> class and throw a new instance of that class. For example:<\/p>\n\n\n\n<p>First, define the <code>NumberError<\/code> that extends the <code>Error<\/code> class:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">NumberError<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">Error<\/span> <\/span>{\r\n  <span class=\"hljs-keyword\">constructor<\/span>(value) {\r\n    <span class=\"hljs-keyword\">super<\/span>(<span class=\"hljs-string\">`\"<span class=\"hljs-subst\">${value}<\/span>\" is not a valid number`<\/span>);\r\n    <span class=\"hljs-keyword\">this<\/span>.name = <span class=\"hljs-string\">'InvalidNumber'<\/span>;\r\n  }\r\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>constructor()<\/code> of the <code>NumberError<\/code> class accepts a value that you&#8217;ll pass into it when creating a new instance of the class. <\/p>\n\n\n\n<p>In the <code>constructor()<\/code> of the <code>NunberError<\/code> class, we call the constructor of the <code>Error<\/code> class via the <code>super<\/code>  and pass a string to it. Also, we override the name of the error to the literal string <code>NumberError<\/code>. If we don&#8217;t do this, the <code>name<\/code> of the <code>NumberError<\/code> will be <code>Error<\/code>.<\/p>\n\n\n\n<p>Second, use the <code>NumberError<\/code> class in the <code>add()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">add<\/span>(<span class=\"hljs-params\">x, y<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">typeof<\/span> x !== <span class=\"hljs-string\">'number'<\/span>) {\n    <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-keyword\">new<\/span> NumberError(x);\n  }\n  <span class=\"hljs-keyword\">if<\/span> (<span class=\"hljs-keyword\">typeof<\/span> y !== <span class=\"hljs-string\">'number'<\/span>) {\n    <span class=\"hljs-keyword\">throw<\/span> <span class=\"hljs-keyword\">new<\/span> NumberError(y);\n  }\n\n  <span class=\"hljs-keyword\">return<\/span> x + y;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In the <code>add()<\/code> function, we throw an instance of the <code>NumberError<\/code> class if the argument is not a valid number.<\/p>\n\n\n\n<p>Third, catch the exception thrown by the <code>add()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">try<\/span> {\r\n  <span class=\"hljs-keyword\">const<\/span> result = add(<span class=\"hljs-string\">'a'<\/span>, <span class=\"hljs-number\">10<\/span>);\r\n  <span class=\"hljs-built_in\">console<\/span>.log(result);\r\n} <span class=\"hljs-keyword\">catch<\/span> (e) {\r\n  <span class=\"hljs-built_in\">console<\/span>.log(e.name, <span class=\"hljs-string\">':'<\/span>, e.message);\r\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">NumberError : <span class=\"hljs-string\">\"a\"<\/span> is not a valid number<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the exception name is <code>NumberError<\/code> and the message is the one that we pass into the <code>super()<\/code> in the <code>constructor()<\/code> of the <code>NumberError<\/code> class.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"summary\">Summary<\/h2>\n\n\n\n<ul><li>Use the JavaScript <code>throw<\/code> statement to throw a user-define exception.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"89504\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-throw-exception\/\"\n\t\t\t\tdata-post-title=\"JavaScript Throw Exception\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"89504\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-throw-exception\/\"\n\t\t\t\tdata-post-title=\"JavaScript Throw Exception\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you&#8217;ll learn how to use the JavaScript throw statement to throw an exception. Introduction to the JavaScript throw statement The throw statement allows you to throw an exception. Here&#8217;s the syntax of the throw statement: In this syntax, the expression specifies the value of the exception. Typically, you&#8217;ll use a new [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":111,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript throw Exception<\/title>\n<meta name=\"description\" content=\"In this tutorial, you&#039;ll learn how to use the JavaScript throw statement to throw an exception.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-throw-exception\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript throw Exception\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you&#039;ll learn how to use the JavaScript throw statement to throw an exception.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-throw-exception\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-02-01T16:57:24+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-throw-exception\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-throw-exception\/\",\"name\":\"JavaScript throw Exception\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2022-02-01T16:57:22+00:00\",\"dateModified\":\"2022-02-01T16:57:24+00:00\",\"description\":\"In this tutorial, you'll learn how to use the JavaScript throw statement to throw an exception.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-throw-exception\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-throw-exception\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-throw-exception\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Throw Exception\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript throw Exception","description":"In this tutorial, you'll learn how to use the JavaScript throw statement to throw an exception.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-throw-exception\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript throw Exception","og_description":"In this tutorial, you'll learn how to use the JavaScript throw statement to throw an exception.","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-throw-exception\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-02-01T16:57:24+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"4 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-throw-exception\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-throw-exception\/","name":"JavaScript throw Exception","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2022-02-01T16:57:22+00:00","dateModified":"2022-02-01T16:57:24+00:00","description":"In this tutorial, you'll learn how to use the JavaScript throw statement to throw an exception.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-throw-exception\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-throw-exception\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-throw-exception\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript Throw Exception"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/89504"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=89504"}],"version-history":[{"count":3,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/89504\/revisions"}],"predecessor-version":[{"id":89507,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/89504\/revisions\/89507"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=89504"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}