{"id":570,"date":"2016-09-02T06:30:08","date_gmt":"2016-09-02T13:30:08","guid":{"rendered":"http:\/\/https://jsprifix.netlify.app/\/?page_id=570"},"modified":"2022-01-23T23:12:21","modified_gmt":"2022-01-24T07:12:21","slug":"javascript-template-literals","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-template-literals\/","title":{"rendered":"JavaScript Template Literals In Depth"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about JavaScript template literal, which allows you to work with a string template more easily.<\/p>\n\n\n\n<p>Before ES6, you use single quotes (<code>'<\/code>) or double quotes (<code>\"<\/code>) to wrap a string literal. And the strings have very limited functionality.<\/p>\n\n\n\n<p>To enable you to solve more complex problems, ES6 template literals provide the syntax that allows you to work with strings more safely and cleanly.<\/p>\n\n\n\n<p>In ES6, you create a template literal by wrapping your text in backticks (<code>`<\/code>) as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> simple = <span class=\"hljs-string\">`This is a template literal`<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>and you get the following features:<\/p>\n\n\n\n<ul><li>A multiline string: a string that can span multiple lines.<\/li><li>String formatting: the ability to substitute part of the string for the values of variables or expressions. This feature is also called string interpolation.<\/li><li>HTML escaping: the ability to transform a string so that it is safe to include in HTML.<\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">The basic syntax of JavaScript template literals<\/h2>\n\n\n\n<p>As mentioned earlier, instead of using the single quotes or double quotes, a template literal uses backticks, as shown in the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> str = <span class=\"hljs-string\">`Template literal in ES6`<\/span>;\n\n<span class=\"hljs-built_in\">console<\/span>.log(str);<span class=\"hljs-comment\">\/\/ Template literal in ES6<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(str.length); <span class=\"hljs-comment\">\/\/ 23<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span> str);<span class=\"hljs-comment\">\/\/ string<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Using the backticks, you can freely use the single or double quotes in the template literal without escaping.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> anotherStr = <span class=\"hljs-string\">`Here's a template literal`<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If a string contains a backtick, you must escape it using a backslash (<code>\\<\/code>) :<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> strWithBacktick = <span class=\"hljs-string\">`Template literals use backticks \\` insead of quotes`<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Multiline strings<\/h2>\n\n\n\n<p>Before ES6, you use the following technique to create a multi-line string by manually including the newline character ( <code>\\n<\/code>) in the string as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> msg = <span class=\"hljs-string\">'Multiline \\n\\\nstring'<\/span>;\n\n<span class=\"hljs-built_in\">console<\/span>.log(msg);\n<span class=\"hljs-comment\">\/\/Multiline<\/span>\n<span class=\"hljs-comment\">\/\/string<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that the backslash ( <code>\\<\/code>) placed after the newline character ( <code>\\n<\/code>) indicates the continuation of the string rather than a new line. <\/p>\n\n\n\n<p>This technique, however, is not consistent across JavaScript engines. Therefore, it was pretty common to create a multiline string that relies on an array and <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-string-concat\/\">string concatenation<\/a> as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> msg = &#91;<span class=\"hljs-string\">'This text'<\/span>,\n         <span class=\"hljs-string\">'can'<\/span>,\n         <span class=\"hljs-string\">'span multiple lines'<\/span>].join(<span class=\"hljs-string\">'\\n'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The\u00a0template literals allow you to define multiline strings more easily\u00a0because you need to add a new line in the string wherever you want:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> p =\n<span class=\"hljs-string\">`This text\ncan\nspan multiple lines`<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that the whitespace is a part of the string. Therefore, you need to ensure that the text lines up with proper indentation. Suppose you have a <code>post<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> post = {\n    <span class=\"hljs-attr\">title<\/span>: <span class=\"hljs-string\">'JavaScript Template Literals'<\/span>,\n    <span class=\"hljs-attr\">excerpt<\/span>: <span class=\"hljs-string\">'Introduction to JavaScript template literals in ES6'<\/span>,\n    <span class=\"hljs-attr\">body<\/span>: <span class=\"hljs-string\">'Content of the post will be here...'<\/span>,\n    <span class=\"hljs-attr\">tags<\/span>: &#91;<span class=\"hljs-string\">'es6'<\/span>, <span class=\"hljs-string\">'template literals'<\/span>, <span class=\"hljs-string\">'javascript'<\/span>]\n};\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following code returns&nbsp;the HTML code of the <code>post<\/code> object. Note that we use <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-object-destructuring\/\">the object destructuring technique<\/a> to assign the properties of the <code>post<\/code> object to individual variables : <code>title<\/code>, <code>excerpt<\/code>, <code>body<\/code>, and <code>tags<\/code>.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\">let {title, excerpt, body, tags} = post;\n\nlet postHtml = `<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1<\/span>&gt;<\/span>${title}<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">h1<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">header<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div<\/span>&gt;<\/span>${excerpt}<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div<\/span>&gt;<\/span>${body}<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">section<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul<\/span>&gt;<\/span>\n      ${tags.map(tag =&gt; `<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li<\/span>&gt;<\/span>${tag}<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">li<\/span>&gt;<\/span>`).join('\\n      ')}\n    <span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">ul<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">footer<\/span>&gt;<\/span>`;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following is the output of the variable <code>postHtml<\/code>. Notice how we used the spacing to indent the <code class=\"md-code md-code-inline\">&lt;li><\/code> tags correctly.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1<\/span>&gt;<\/span>JavaScript Template Literals<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">h1<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">header<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div<\/span>&gt;<\/span>Introduction to JavaScript template literals in ES6<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div<\/span>&gt;<\/span>Content of the post will be here...<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">div<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">section<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul<\/span>&gt;<\/span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li<\/span>&gt;<\/span>es6<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">li<\/span>&gt;<\/span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li<\/span>&gt;<\/span>template literals<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">li<\/span>&gt;<\/span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li<\/span>&gt;<\/span>javascript<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">li<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">ul<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">footer<\/span>&gt;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Variable and expression substitutions<\/h2>\n\n\n\n<p>At this point, a template literal is just like a better version of a regular JavaScript string. The big difference between a template literal and a regular string is substitutions. <\/p>\n\n\n\n<p>The substitutions allow you to embed variables and expressions in a string. The JavaScript engine will automatically replace these variables and expressions with their values. This feature is known as string interpolation.<\/p>\n\n\n\n<p>To instruct JavaScript to substitute a variable and expression, you place the variable and expression in a special block as follows:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">${variable_name}<\/code><\/span><\/pre>\n\n\n<p>See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> firstName = <span class=\"hljs-string\">'John'<\/span>,\n    lastName = <span class=\"hljs-string\">'Doe'<\/span>;\n\n<span class=\"hljs-keyword\">let<\/span> greeting = <span class=\"hljs-string\">`Hi <span class=\"hljs-subst\">${firstName}<\/span>, <span class=\"hljs-subst\">${lastName}<\/span>`<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(greeting); <span class=\"hljs-comment\">\/\/ Hi John, Doe<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The substitution <code>${firstName}<\/code>&nbsp;and <code>${lastName}<\/code> access the variables &nbsp;<code>firstName<\/code>&nbsp;and <code>lastName<\/code>&nbsp;to insert their values into the <code>greeting&nbsp;<\/code>string. <\/p>\n\n\n\n<p>The <code>greeting<\/code>&nbsp;variable then holds the result of the substitutions. The following example substitutes&nbsp;an expression instead:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> price = <span class=\"hljs-number\">8.99<\/span>,\n    tax = <span class=\"hljs-number\">0.1<\/span>;\n\n<span class=\"hljs-keyword\">let<\/span> netPrice = <span class=\"hljs-string\">`Net Price:$<span class=\"hljs-subst\">${(price * (<span class=\"hljs-number\">1<\/span> + tax)).toFixed(<span class=\"hljs-number\">2<\/span>)}<\/span>`<\/span>;\n\n<span class=\"hljs-built_in\">console<\/span>.log(netPrice); <span class=\"hljs-comment\">\/\/ netPrice:$9.89<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\" id=\"_tagged-template-literals\">Tagged templates<\/h2>\n\n\n\n<p>A template tag carries the transformation on the template literal and returns the result string. <\/p>\n\n\n\n<p>You place the tag at the beginning of the template before the backtick (`) character as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> greeting = tag<span class=\"hljs-string\">`Hi`<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, <code>tag<\/code> is the template tag that applies to the <code>Hi<\/code> template literal. The <code>tag<\/code> can be any function with the following signature:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">tag<\/span>(<span class=\"hljs-params\">literals, ...substitutions<\/span>) <\/span>{\n    <span class=\"hljs-comment\">\/\/ return a string<\/span>\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this function:<\/p>\n\n\n\n<ul><li>The <code>literals<\/code> parameter is an array that contains the literal strings.<\/li><li>The <code>substitutions<\/code> parameter contains the subsequent&nbsp;arguments interpreted for each substitution.<\/li><\/ul>\n\n\n\n<p>See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">format<\/span>(<span class=\"hljs-params\">literals, ...substitutions<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">let<\/span> result = <span class=\"hljs-string\">''<\/span>;\n\n    <span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">let<\/span> i = <span class=\"hljs-number\">0<\/span>; i &lt; substitutions.length; i++) {\n        result += literals&#91;i];\n        result += substitutions&#91;i];\n    }\n    <span class=\"hljs-comment\">\/\/ add the last literal<\/span>\n    result += literals&#91;literals.length - <span class=\"hljs-number\">1<\/span>];\n    <span class=\"hljs-keyword\">return<\/span> result;\n}\n\n<span class=\"hljs-keyword\">let<\/span> quantity = <span class=\"hljs-number\">9<\/span>,\n    priceEach = <span class=\"hljs-number\">8.99<\/span>,\n    result = format<span class=\"hljs-string\">`<span class=\"hljs-subst\">${quantity}<\/span> items cost $<span class=\"hljs-subst\">${(quantity * priceEach).toFixed(<span class=\"hljs-number\">2<\/span>)}<\/span>.`<\/span>;\n\n<span class=\"hljs-built_in\">console<\/span>.log(result); <span class=\"hljs-comment\">\/\/ 9 items cost $80.91.<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>format()<\/code> function accepts three arguments: the <code>literals<\/code> array and two other arguments stored in the <code>substitutions<\/code> array. <\/p>\n\n\n\n<p>The first argument is the <code>literals<\/code> array that contains three elements:<\/p>\n\n\n\n<ul><li>An empty string before the first substitution (<span style=\"font-family: monospace;\">&#8221;<\/span>). Note that the first argument of the literals array is an empty string.<\/li><li>A string <code>'items cost'<\/code> that locates between the first and the second substitutions.<\/li><li>A string that follows the second substitution (<code>'.'<\/code>)<\/li><\/ul>\n\n\n\n<p>The&nbsp;second argument is <code>9<\/code>, which is the interpreted value of the <code>quantity<\/code> variable. It becomes the first element of the <code>substitutions<\/code> array. The third argument is <code>80.91<\/code>, which is the interpreted value of the expression <code>(quantity * priceEach).toFixed(2)<\/code>. It becomes the second element of the substitutions array.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>Use the backtick to create a string literal for string interpolation.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"570\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-template-literals\/\"\n\t\t\t\tdata-post-title=\"JavaScript Template Literals In Depth\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"570\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-template-literals\/\"\n\t\t\t\tdata-post-title=\"JavaScript Template Literals In Depth\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about JavaScript template literals that allow you to work with a string template easier.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":101,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Template Literals<\/title>\n<meta name=\"description\" content=\"This tutorial shows you how to use JavaScript template literals to manage literal templates in a cleaner and more effective way.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-template-literals\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Template Literals\" \/>\n<meta property=\"og:description\" content=\"This tutorial shows you how to use JavaScript template literals to manage literal templates in a cleaner and more effective way.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-template-literals\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-24T07:12:21+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-template-literals\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-template-literals\/\",\"name\":\"JavaScript Template Literals\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2016-09-02T13:30:08+00:00\",\"dateModified\":\"2022-01-24T07:12:21+00:00\",\"description\":\"This tutorial shows you how to use JavaScript template literals to manage literal templates in a cleaner and more effective way.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-template-literals\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-template-literals\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-template-literals\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Template Literals In Depth\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Template Literals","description":"This tutorial shows you how to use JavaScript template literals to manage literal templates in a cleaner and more effective way.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-template-literals\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Template Literals","og_description":"This tutorial shows you how to use JavaScript template literals to manage literal templates in a cleaner and more effective way.","og_url":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-template-literals\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-24T07:12:21+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-template-literals\/","url":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-template-literals\/","name":"JavaScript Template Literals","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2016-09-02T13:30:08+00:00","dateModified":"2022-01-24T07:12:21+00:00","description":"This tutorial shows you how to use JavaScript template literals to manage literal templates in a cleaner and more effective way.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-template-literals\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-template-literals\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-template-literals\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript Template Literals In Depth"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/570"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=570"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/570\/revisions"}],"predecessor-version":[{"id":89381,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/570\/revisions\/89381"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=570"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}