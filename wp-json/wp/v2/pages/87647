{"id":87647,"date":"2020-09-14T01:26:32","date_gmt":"2020-09-14T08:26:32","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=87647"},"modified":"2020-09-23T00:40:47","modified_gmt":"2020-09-23T07:40:47","slug":"javascript-debounce","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/javascript-debounce\/","title":{"rendered":"Learn JavaScript Debounce Function By Building the Wikipedia Search App"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about JavaScript debounce function and how to use it to improve application performance.<\/p>\n\n\n\n<p>To understand the debounce function, you&#8217;re going to build a <a href=\"https:\/\/https://jsprifix.netlify.app/\/sample\/dom\/wikipedia-search\/\" target=\"_blank\" rel=\"noreferrer noopener\">Wikipedia Search application<\/a> using the debouncing programming technique.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Create the project folder structure<\/h2>\n\n\n\n<p>First, create a new folder called <code>wikipedia-search<\/code> that will store the files of the projects.<\/p>\n\n\n\n<p>Second, create three folders inside the <code>wikipedia-search<\/code> folder called <code>js<\/code>, <code>css<\/code>, and <code>img<\/code>. These folders will store JavaScript, CSS, and images files accordingly.<\/p>\n\n\n\n<p>Third, create the <code>style.css<\/code> in the <code>css<\/code> folder and the <code>app.js<\/code> in the <code>js<\/code> Also, download the following image and copy it to the <code>img<\/code> folder. You&#8217;ll use the logo to make the UI for the app.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"103\" height=\"94\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/wikipedia-logo.png\" alt=\"\" class=\"wp-image-87649\"\/><\/figure><\/div>\n\n\n\n<p>Finally, create an <code>index.html<\/code> file in the root folder. <\/p>\n\n\n\n<p>The project tructure will look like the following:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"216\" height=\"156\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-Debounce-Function-Project-Structure.png\" alt=\"\" class=\"wp-image-87650\"\/><\/figure><\/div>\n\n\n\n<h2 class=\"wp-block-heading\">Build the HTML page<\/h2>\n\n\n\n<p>Open the index.html file and add the following code:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html<\/span> <span class=\"hljs-attr\">lang<\/span>=<span class=\"hljs-string\">\"en\"<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta<\/span> <span class=\"hljs-attr\">charset<\/span>=<span class=\"hljs-string\">\"UTF-8\"<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta<\/span> <span class=\"hljs-attr\">name<\/span>=<span class=\"hljs-string\">\"viewport\"<\/span> <span class=\"hljs-attr\">content<\/span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title<\/span>&gt;<\/span>Wikipedia Search<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">title<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link<\/span> <span class=\"hljs-attr\">rel<\/span>=<span class=\"hljs-string\">\"stylesheet\"<\/span> <span class=\"hljs-attr\">href<\/span>=<span class=\"hljs-string\">\"css\/style.css\"<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">head<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img<\/span> <span class=\"hljs-attr\">src<\/span>=<span class=\"hljs-string\">\".\/img\/wikipedia-logo.png\"<\/span> <span class=\"hljs-attr\">alt<\/span>=<span class=\"hljs-string\">\"wikipedia\"<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1<\/span>&gt;<\/span>Wikipedia Search<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">h1<\/span>&gt;<\/span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"text\"<\/span> <span class=\"hljs-attr\">name<\/span>=<span class=\"hljs-string\">\"searchTerm\"<\/span> <span class=\"hljs-attr\">id<\/span>=<span class=\"hljs-string\">\"searchTerm\"<\/span> <span class=\"hljs-attr\">placeholder<\/span>=<span class=\"hljs-string\">\"Enter a search term...\"<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">header<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main<\/span> <span class=\"hljs-attr\">id<\/span>=<span class=\"hljs-string\">\"searchResult\"<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">main<\/span>&gt;<\/span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script<\/span> <span class=\"hljs-attr\">src<\/span>=<span class=\"hljs-string\">\"js\/app.js\"<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">script<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">body<\/span>&gt;<\/span>\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">html<\/span>&gt;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this HTML file:<\/p>\n\n\n\n<ul><li>First, link to the <code>style.css<\/code> file in the <code>&lt;head&gt;<\/code> section.<\/li><li>Second, add a <code>&lt;script&gt;<\/code> tag whose <code>src<\/code> links to the <code>app.js<\/code> file and place it right before the <code>&lt;\/body&gt;<\/code> tag.<\/li><li>Third, add two sections to the body of the HTML page. The first section is the header that shows the Wikipedia logo, the heading, and the search box. The second section includes the <code>&lt;main&gt;<\/code> tag that will display the search result.<\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">Copy the CSS code<\/h2>\n\n\n\n<p>Navigate to the <a href=\"https:\/\/https://jsprifix.netlify.app/\/sample\/dom\/wikipedia-search\/css\/style.css\" target=\"_blank\" rel=\"noreferrer noopener\">style.css<\/a> file, copy its code, and paste it into the <code>style.css<\/code> file in the <code>css<\/code> folder. When you open the <code>index.html<\/code> file, you should see something like <a href=\"https:\/\/https://jsprifix.netlify.app/\/sample\/dom\/wikipedia-search\/\">the following page<\/a>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Handle input events<\/h2>\n\n\n\n<p>First, select the <code>&lt;input&gt;<\/code> and search result elements using the <code>querySelector()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> searchTermElem = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'#searchTerm'<\/span>);\n<span class=\"hljs-keyword\">const<\/span> searchResultElem = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'#searchResult'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, set the focus on the <code>&lt;input&gt;<\/code> element by calling the <code>focus()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">searchTermElem<\/span><span class=\"hljs-selector-class\">.focus<\/span>();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Third, attach an <code>input<\/code> event listener for the <code>&lt;input&gt;<\/code> element:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">searchTermElem.addEventListener(<span class=\"hljs-string\">'input'<\/span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">event<\/span>) <\/span>{\n    <span class=\"hljs-built_in\">console<\/span>.log(event.target.value);\n});<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you type some text on the <code>&lt;input&gt;<\/code> element, you&#8217;ll see that the <code>input<\/code> event occurs, which shows the text to the Console. <\/p>\n\n\n\n<p>For example, when you type the <code>debounce<\/code> in the <code>&lt;input&gt;<\/code> element:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"778\" height=\"210\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-Debounce-Function-Input-event.png\" alt=\"\" class=\"wp-image-87655\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-Debounce-Function-Input-event.png 778w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-Debounce-Function-Input-event-300x81.png 300w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-Debounce-Function-Input-event-768x207.png 768w\" sizes=\"(max-width: 778px) 100vw, 778px\" \/><\/figure>\n\n\n\n<p>&#8230; you&#8217;ll see the following texts in the Console:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"307\" height=\"178\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-Debounce-Function-Input-event-console.png\" alt=\"\" class=\"wp-image-87656\" srcset=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-Debounce-Function-Input-event-console.png 307w, https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-Debounce-Function-Input-event-console-300x174.png 300w\" sizes=\"(max-width: 307px) 100vw, 307px\" \/><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\">Fetch search results using Wikipedia API<\/h2>\n\n\n\n<p>The Wikipedia API is quite simple. It doesn&#8217;t require an API key. <\/p>\n\n\n\n<p>To get the topics by a search term, you need to append the <code>srsearch<\/code> query parameter:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"HTML, XML\" data-shcb-language-slug=\"xml\"><span><code class=\"hljs language-xml\">&amp;srsearch=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">searchTerm<\/span>&gt;<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">HTML, XML<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">xml<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>to the following URL: <\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">https:<span class=\"hljs-comment\">\/\/en.wikipedia.org\/w\/api.php?action=query&amp;list=search&amp;prop=info|extracts&amp;inprop=url&amp;utf8=&amp;format=json&amp;origin=*&amp;srlimit=10<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>&#8230; and send an HTTP <code>GET<\/code> request.<\/p>\n\n\n\n<p>For example, you can get the topics related to the <code>debounce<\/code> keyword by sending an HTTP  <code>GET<\/code> request to the following URL:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">https:<span class=\"hljs-comment\">\/\/en.wikipedia.org\/w\/api.php?action=query&amp;list=search&amp;prop=info|extracts&amp;inprop=url&amp;utf8=&amp;format=json&amp;origin=*&amp;srlimit=10&amp;srsearch=debounce<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>By the way, you can open the above URL in the web browser to see the response.<\/p>\n\n\n\n<p>From JavaScript, you can use the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-fetch-api\/\">fetch API<\/a>, which is available in all the modern web browsers, to send an HTTP <code>GET<\/code> request.<\/p>\n\n\n\n<p>The following creates the <code>search()<\/code> function accepts a search term, makes an HTTP <code>GET<\/code> request to Wikipedia, and shows the search results to the Console:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> search = <span class=\"hljs-keyword\">async<\/span> (searchTerm) =&gt; {\n    <span class=\"hljs-keyword\">try<\/span> {\n        <span class=\"hljs-keyword\">const<\/span> url = <span class=\"hljs-string\">`https:\/\/en.wikipedia.org\/w\/api.php?action=query&amp;list=search&amp;prop=info|extracts&amp;inprop=url&amp;utf8=&amp;format=json&amp;origin=*&amp;srlimit=10&amp;srsearch=<span class=\"hljs-subst\">${searchTerm}<\/span>`<\/span>;\n        <span class=\"hljs-keyword\">const<\/span> response = <span class=\"hljs-keyword\">await<\/span> fetch(url);\n        <span class=\"hljs-keyword\">const<\/span> searchResults = <span class=\"hljs-keyword\">await<\/span> response.json();\n\n        <span class=\"hljs-comment\">\/\/ show the search result in the console<\/span>\n        <span class=\"hljs-built_in\">console<\/span>.log({\n            <span class=\"hljs-string\">'term'<\/span>: searchTerm,\n            <span class=\"hljs-string\">'results'<\/span>: searchResults.query.search\n        });\n\n    } <span class=\"hljs-keyword\">catch<\/span> (error) {\n        <span class=\"hljs-built_in\">console<\/span>.log(error);\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, construct the API URL by adding the <code>srsearch<\/code> query parameter to the endpoint:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> url = <span class=\"hljs-string\">`https:\/\/en.wikipedia.org\/w\/api.php?action=query&amp;list=search&amp;prop=info|extracts&amp;inprop=url&amp;utf8=&amp;format=json&amp;origin=*&amp;srlimit=10&amp;srsearch=<span class=\"hljs-subst\">${searchTerm}<\/span>`<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, use the <code>fetch()<\/code> method to send a HTTP <code>GET<\/code> request. Since the <code>fetch()<\/code> method returns a promise, you need to use <code>await<\/code> keyword to wait for the response.<\/p>\n\n\n\n<p>The promise returned by the <code>fetch()<\/code> function has many methods, one of them is <code>json()<\/code>. The <code>json()<\/code> method also returns another promise that resolves to a result in JSON format.<\/p>\n\n\n\n<p>Because of the <code>await<\/code> keyword, you need to mark the <code>search()<\/code> function as an <code>async<\/code> function like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> search = <span class=\"hljs-keyword\">async<\/span> (searchTerm) = {\n   <span class=\"hljs-comment\">\/\/\/ ...<\/span>\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The returned object of the <code>json()<\/code> method has many properties. And to get the search results, you need access the <code>searchResults.query.search<\/code> property.<\/p>\n\n\n\n<p>To test the <code>search()<\/code> method, you call it in the <code>input<\/code> event listener as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">searchTermElem.addEventListener(<span class=\"hljs-string\">'input'<\/span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">event<\/span>) <\/span>{\n    search(event.target.value);\n});<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following shows the complete <code>app.js<\/code> file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> searchTermElem = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'#searchTerm'<\/span>);\n<span class=\"hljs-keyword\">const<\/span> searchResultElem = <span class=\"hljs-built_in\">document<\/span>.querySelector(<span class=\"hljs-string\">'#searchResult'<\/span>);\n\nsearchTermElem.select();\n\nsearchTermElem.addEventListener(<span class=\"hljs-string\">'input'<\/span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> (<span class=\"hljs-params\">event<\/span>) <\/span>{\n    search(event.target.value);\n});\n\n<span class=\"hljs-keyword\">const<\/span> search = <span class=\"hljs-keyword\">async<\/span> (searchTerm) =&gt; {\n    <span class=\"hljs-keyword\">try<\/span> {\n        <span class=\"hljs-keyword\">const<\/span> url = <span class=\"hljs-string\">`https:\/\/en.wikipedia.org\/w\/api.php?action=query&amp;list=search&amp;prop=info|extracts&amp;inprop=url&amp;utf8=&amp;format=json&amp;origin=*&amp;srlimit=10&amp;srsearch=<span class=\"hljs-subst\">${searchTerm}<\/span>`<\/span>;\n        <span class=\"hljs-keyword\">const<\/span> response = <span class=\"hljs-keyword\">await<\/span> fetch(url);\n        <span class=\"hljs-keyword\">const<\/span> searchResults = <span class=\"hljs-keyword\">await<\/span> response.json();\n\n        <span class=\"hljs-comment\">\/\/ show the search result in the console<\/span>\n        <span class=\"hljs-built_in\">console<\/span>.log({\n            <span class=\"hljs-string\">'term'<\/span>: searchTerm,\n            <span class=\"hljs-string\">'results'<\/span>: searchResults.query.search\n        });\n\n    } <span class=\"hljs-keyword\">catch<\/span> (error) {\n        <span class=\"hljs-built_in\">console<\/span>.log(error);\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Now, if you open the <code>index.html<\/code> file and type the <code>debounce<\/code> keyword in the input element, you&#8217;ll see the following results in the Console:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"283\" height=\"175\" src=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/JavaScript-Debounce-Function-too-many-requests.png\" alt=\"\" class=\"wp-image-87661\"\/><\/figure>\n\n\n\n<p>The output indicates that the <code>search()<\/code> function executes for every character you type. It calls the API for every text input, which isn&#8217;t efficient.<\/p>\n\n\n\n<p>To limit the number of requests, you&#8217;ll send API requests only when necessary. In other words, you&#8217;ll send an API request only after users pause or stop typing for a period of time e.g., a half-second.<\/p>\n\n\n\n<p>To do so, you can use the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-bom\/javascript-settimeout\/\">setTimeout()<\/a> and <code>clearTimeout()<\/code> function:<\/p>\n\n\n\n<ul><li>When users type a character, use the <code>setTimeout()<\/code> function to schedule to execute the search() function after a period of time.<\/li><li>If users keep typing, cancel that timer using the <code>clearTimeout()<\/code> function. In case the users pause or stop typing, let the timer to execute the scheduled function to search.<\/li><\/ul>\n\n\n\n<p>The following shows the new version of the <code>search()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">\n<span class=\"hljs-keyword\">let<\/span> timeoutId;\n\n<span class=\"hljs-keyword\">const<\/span> search = <span class=\"hljs-function\">(<span class=\"hljs-params\">searchTerm<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-comment\">\/\/ reset the previous timer<\/span>\n    <span class=\"hljs-keyword\">if<\/span> (timeoutId) {\n        clearTimeout(timeoutId);\n    }\n\n    <span class=\"hljs-comment\">\/\/ set up a new timer<\/span>\n    timeoutId = setTimeout(<span class=\"hljs-keyword\">async<\/span> () =&gt; {\n        <span class=\"hljs-keyword\">try<\/span> {\n            <span class=\"hljs-keyword\">const<\/span> url = <span class=\"hljs-string\">`https:\/\/en.wikipedia.org\/w\/api.php?action=query&amp;list=search&amp;prop=info|extracts&amp;inprop=url&amp;utf8=&amp;format=json&amp;origin=*&amp;srlimit=10&amp;srsearch=<span class=\"hljs-subst\">${searchTerm}<\/span>`<\/span>;\n            <span class=\"hljs-keyword\">const<\/span> response = <span class=\"hljs-keyword\">await<\/span> fetch(url);\n            <span class=\"hljs-keyword\">const<\/span> searchResults = <span class=\"hljs-keyword\">await<\/span> response.json();\n\n            <span class=\"hljs-comment\">\/\/ show the search result in the console<\/span>\n            <span class=\"hljs-built_in\">console<\/span>.log({\n                <span class=\"hljs-string\">'term'<\/span>: searchTerm,\n                <span class=\"hljs-string\">'results'<\/span>: searchResults.query.search\n            });\n        } <span class=\"hljs-keyword\">catch<\/span> (error) {\n            <span class=\"hljs-built_in\">console<\/span>.log(error);\n        }\n    }, <span class=\"hljs-number\">500<\/span>);\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Since the <code>await<\/code> related code is moved to the callback function of the <code>setTimeout()<\/code>, you need to mark the callback with the <code>async<\/code> keyword and remove the <code>async<\/code> keyword from the <code>search()<\/code> function.<\/p>\n\n\n\n<p>If you open the <code>index.html<\/code> file in the web browser and type the keyword debounce without pausing (for a half-second) and stop, you&#8217;ll see that the application will make only one API request.<\/p>\n\n\n\n<p>And this technique is known as <strong>debouncing<\/strong>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">What is debouncing<\/h2>\n\n\n\n<p>If you have a time-consuming task like an API request that fires often, it&#8217;ll impact application performance.<\/p>\n\n\n\n<p><strong>Debouncing <\/strong>is a programming technique that limits the number of times a function gets called.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Develop a reusable debounce function<\/h3>\n\n\n\n<p>The <code>debounce()<\/code> function needs to accept a function (<code>fn<\/code>), limits the number of calls to it, and returns a function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> debounce = <span class=\"hljs-function\">(<span class=\"hljs-params\">fn<\/span>) =&gt;<\/span> {\n   <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-function\">(<span class=\"hljs-params\">arg<\/span>) =&gt;<\/span> {\n      <span class=\"hljs-comment\">\/\/ logic to limit the number of call fn<\/span>\n      fn(arg);\n   };\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following uses the <code>clearTimeout()<\/code> and <code>setTimeout()<\/code> functions to debounce the <code>fn<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> debounce = <span class=\"hljs-function\">(<span class=\"hljs-params\">fn<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-keyword\">let<\/span> timeoutId;\n\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-function\">(<span class=\"hljs-params\">arg<\/span>) =&gt;<\/span> {\n        <span class=\"hljs-comment\">\/\/ cancel the previous timer<\/span>\n        <span class=\"hljs-keyword\">if<\/span> (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        <span class=\"hljs-comment\">\/\/ setup a new timer<\/span>\n        timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n            fn(arg);\n        }, <span class=\"hljs-number\">500<\/span>);\n    };\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Typically, the <code>fn<\/code> function will accept more than one argument. To invoke the <code>fn<\/code> function with a list of arguments, you use the <code>apply()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> debounce = <span class=\"hljs-function\">(<span class=\"hljs-params\">fn, delay=<span class=\"hljs-number\">500<\/span><\/span>) =&gt;<\/span> {\n    <span class=\"hljs-keyword\">let<\/span> timeoutId;\n\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-function\">(<span class=\"hljs-params\">...args<\/span>) =&gt;<\/span> {\n        <span class=\"hljs-comment\">\/\/ cancel the previous timer<\/span>\n        <span class=\"hljs-keyword\">if<\/span> (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        <span class=\"hljs-comment\">\/\/ setup a new timer<\/span>\n        timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()<\/span> =&gt;<\/span> {\n            fn.apply(<span class=\"hljs-literal\">null<\/span>, args);\n        }, delay);\n    };\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works:<\/p>\n\n\n\n<ul><li>First, replace the hardcoded number <code>500<\/code> with the <code>delay<\/code> argument so that you can specify the amount of time to wait before executing the <code>fn<\/code> function. The default value of the delay is 500 ms.<\/li><li>Second, add the <code>...args<\/code> to the returned function. The <code>...arg<\/code> is a <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-rest-parameters\/\">rest parameter<\/a> that allows you to collect all the arguments of the <code>fn()<\/code> function into an array <code>args<\/code>.<\/li><li>Third, the <code>fn.apply(null, args)<\/code> executes the <code>fn()<\/code> function with the arguments specified in the <code>args<\/code> array.<\/li><\/ul>\n\n\n\n<h3 class=\"wp-block-heading\">Use the debounce function<\/h3>\n\n\n\n<p>The following removes the debouncing logic from the <code>search()<\/code> function and use the <code>debounce()<\/code> function instead:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> search = debounce(<span class=\"hljs-keyword\">async<\/span> (searchTerm) =&gt; {\n    <span class=\"hljs-keyword\">try<\/span> {\n        <span class=\"hljs-keyword\">const<\/span> url = <span class=\"hljs-string\">`https:\/\/en.wikipedia.org\/w\/api.php?action=query&amp;list=search&amp;prop=info|extracts&amp;inprop=url&amp;utf8=&amp;format=json&amp;origin=*&amp;srlimit=10&amp;srsearch=<span class=\"hljs-subst\">${searchTerm}<\/span>`<\/span>;\n        <span class=\"hljs-keyword\">const<\/span> response = <span class=\"hljs-keyword\">await<\/span> fetch(url);\n        <span class=\"hljs-keyword\">const<\/span> searchResults = <span class=\"hljs-keyword\">await<\/span> response.json();\n\n        <span class=\"hljs-comment\">\/\/ show the search result in the console<\/span>\n        <span class=\"hljs-built_in\">console<\/span>.log({\n            <span class=\"hljs-string\">'term'<\/span>: searchTerm,\n            <span class=\"hljs-string\">'results'<\/span>: searchResults.query.search\n        });\n    } <span class=\"hljs-keyword\">catch<\/span> (error) {\n        <span class=\"hljs-built_in\">console<\/span>.log(error);\n    }\n});<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Convert the search results to HTML<\/h2>\n\n\n\n<p>We&#8217;ll show the title and snippet of every search result in the output. Before doing it, we&#8217;ll need some utility functions:<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Strip HTML tags<\/h3>\n\n\n\n<p>The <code>title<\/code> and <code>snippet<\/code> from the search result of the API call may contain HTML tags. And it&#8217;s safe to strip all HTML tags before rendering them.<\/p>\n\n\n\n<p>The following utility function strips the HTML tags from a string:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> stripHtml = <span class=\"hljs-function\">(<span class=\"hljs-params\">html<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-keyword\">let<\/span> div = <span class=\"hljs-built_in\">document<\/span>.createElement(<span class=\"hljs-string\">'div'<\/span>);\n    div.textContent = html;\n    <span class=\"hljs-keyword\">return<\/span> div.textContent;\n};\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>stripHtml()<\/code> function accepts an HTML string. It creates a temporary <code>&lt;div&gt;<\/code> element, assign its <code>innerHTML<\/code> the HTML string, and return its <code>textContent<\/code> property.<\/p>\n\n\n\n<p class=\"note\">Note that this function will only work on web browsers because it relies on the web browser&#8217;s  DOM API.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Highlight the search term<\/h3>\n\n\n\n<p>It&#8217;s more intuitive if the search terms are highlighted in the search result. <\/p>\n\n\n\n<p>This <code>highlight()<\/code> function highlights all the occurrences of the <code>keyword<\/code> in the <code>str<\/code> by wrapping each occurrence of the keyword in a <code>&lt;span&gt;<\/code> tag with the <code>highlight<\/code> class:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-19\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> highlight = <span class=\"hljs-function\">(<span class=\"hljs-params\">str, keyword, className = <span class=\"hljs-string\">\"highlight\"<\/span><\/span>) =&gt;<\/span> {\n    <span class=\"hljs-keyword\">const<\/span> hl = <span class=\"hljs-string\">`&lt;span class=\"<span class=\"hljs-subst\">${className}<\/span>\"&gt;<span class=\"hljs-subst\">${keyword}<\/span>&lt;\/span&gt;`<\/span>;\n    <span class=\"hljs-keyword\">return<\/span> str.replace(<span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">RegExp<\/span>(keyword, <span class=\"hljs-string\">'gi'<\/span>), hl);\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-19\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that the function uses the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-regular-expression\/\">regular expression<\/a> to replace all occurrences of the <code>keyword<\/code> by the <code>&lt;span&gt;<\/code> element.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Convert the search results to HTML<\/h3>\n\n\n\n<p>The following <code>generateSearchResultHTML()<\/code> function converts the search results to HTML:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-20\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">\n<span class=\"hljs-keyword\">const<\/span> generateHTML= <span class=\"hljs-function\">(<span class=\"hljs-params\">results, searchTerm<\/span>) =&gt;<\/span> {\n    <span class=\"hljs-keyword\">return<\/span> results\n        .map(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> {\n            <span class=\"hljs-keyword\">const<\/span> title = highlight(stripHtml(result.title), searchTerm);\n            <span class=\"hljs-keyword\">const<\/span> snippet = highlight(stripHtml(result.snippet), searchTerm);\n\n            <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">`&lt;article&gt;\n                &lt;a href=\"https:\/\/en.wikipedia.org\/?curid=<span class=\"hljs-subst\">${result.pageid}<\/span>\"&gt;\n                    &lt;h2&gt;<span class=\"hljs-subst\">${title}<\/span>&lt;\/h2&gt;\n                &lt;\/a&gt;\n                &lt;div class=\"summary\"&gt;<span class=\"hljs-subst\">${snippet}<\/span>...&lt;\/div&gt;\n            &lt;\/article&gt;`<\/span>;\n        })\n        .join(<span class=\"hljs-string\">''<\/span>);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-20\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<ul><li>First, use the <code style=\"background-color: rgb(255, 255, 255); font-size: 16px;\"><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-array-map\/\">map()<\/a><\/code> method to return the HTML representation of each search result and the <code style=\"background-color: rgb(255, 255, 255); font-size: 16px;\"><a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-array-join\/\">join()<\/a><\/code> method to join search results (in HTML format) into a single HTML string.<\/li><li>Second, strip the HTML tags and highlight the search term in the <code>title<\/code> and <code>snippet<\/code> returned from the API call.<\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">Show the search results<\/h2>\n\n\n\n<p>Change the <code>search()<\/code> method that uses the <code>generateSearchResultHTML()<\/code> function and append its result to the <code>searchResultElem<\/code>. Also, reset the search result if the search term is empty:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-21\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const<\/span> search = debounce(<span class=\"hljs-keyword\">async<\/span> (searchTerm) =&gt; {\n\n    <span class=\"hljs-comment\">\/\/ if the search term is removed, <\/span>\n    <span class=\"hljs-comment\">\/\/ reset the search result<\/span>\n    <span class=\"hljs-keyword\">if<\/span> (!searchTerm) {\n        <span class=\"hljs-comment\">\/\/ reset the search result<\/span>\n        searchResultElem.innerHTML = <span class=\"hljs-string\">''<\/span>;\n        <span class=\"hljs-keyword\">return<\/span>;\n    }\n\n    <span class=\"hljs-keyword\">try<\/span> {\n        <span class=\"hljs-comment\">\/\/ make an API request<\/span>\n        <span class=\"hljs-keyword\">const<\/span> url = <span class=\"hljs-string\">`https:\/\/en.wikipedia.org\/w\/api.php?action=query&amp;list=search&amp;prop=info|extracts&amp;inprop=url&amp;utf8=&amp;format=json&amp;origin=*&amp;srlimit=10&amp;srsearch=<span class=\"hljs-subst\">${searchTerm}<\/span>`<\/span>;\n        <span class=\"hljs-keyword\">const<\/span> response = <span class=\"hljs-keyword\">await<\/span> fetch(url);\n        <span class=\"hljs-keyword\">const<\/span> searchResults = <span class=\"hljs-keyword\">await<\/span> response.json();\n\n        <span class=\"hljs-comment\">\/\/ render search result<\/span>\n        <span class=\"hljs-keyword\">const<\/span> searchResultHtml = generateSearchResultHTML(searchResults.query.search, searchTerm);\n\n        <span class=\"hljs-comment\">\/\/ add the search result to the searchResultElem<\/span>\n        searchResultElem.innerHTML = searchResultHtml;\n    } <span class=\"hljs-keyword\">catch<\/span> (error) {\n        <span class=\"hljs-built_in\">console<\/span>.log(error);\n    }\n});<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-21\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Now, if you open the <code>index.html<\/code> in the web browser, you&#8217;ll see the <a href=\"https:\/\/https://jsprifix.netlify.app/\/sample\/dom\/wikipedia-search\/\" target=\"_blank\" rel=\"noreferrer noopener\">working application.<\/a><\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<p>In this tutorial, you&#8217;ve learned the following key points:<\/p>\n\n\n\n<ul><li>Use the <code>fetch()<\/code> API to make HTTP <code>GET<\/code> requests.<\/li><li>Use the <code><a href=\"https:\/\/https://jsprifix.netlify.app/\/es-next\/javascript-async-await\/\">async\/await<\/a><\/code> keywords to make the asynchronous code looks cleaner.<\/li><li>Understand the debouncing programming technique and develop a reusable JavaScript <code>debounce()<\/code> function.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"87647\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/javascript-debounce\/\"\n\t\t\t\tdata-post-title=\"Learn JavaScript Debounce Function By Building the Wikipedia Search App\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"87647\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/javascript-debounce\/\"\n\t\t\t\tdata-post-title=\"Learn JavaScript Debounce Function By Building the Wikipedia Search App\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you&#8217;ll learn about JavaScript debounce function and how to use it to improve application performance. To understand the debounce function, you&#8217;re going to build a Wikipedia Search application using the debouncing programming technique. Create the project folder structure First, create a new folder called wikipedia-search that will store the files of [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":85107,"menu_order":60,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Learn JavaScript Debounce Function By Building Wikipedia Search App<\/title>\n<meta name=\"description\" content=\"In this tutorial, you&#039;ll learn about JavaScript debounce function and how to use it to improve application performance.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/javascript-debounce\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Learn JavaScript Debounce Function By Building Wikipedia Search App\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you&#039;ll learn about JavaScript debounce function and how to use it to improve application performance.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/javascript-debounce\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2020-09-23T07:40:47+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/wikipedia-logo.png\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"11 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/javascript-debounce\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/javascript-debounce\/\",\"name\":\"Learn JavaScript Debounce Function By Building Wikipedia Search App\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2020-09-14T08:26:32+00:00\",\"dateModified\":\"2020-09-23T07:40:47+00:00\",\"description\":\"In this tutorial, you'll learn about JavaScript debounce function and how to use it to improve application performance.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/javascript-debounce\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/javascript-debounce\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/javascript-debounce\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"JavaScript DOM\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"Learn JavaScript Debounce Function By Building the Wikipedia Search App\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Learn JavaScript Debounce Function By Building Wikipedia Search App","description":"In this tutorial, you'll learn about JavaScript debounce function and how to use it to improve application performance.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/javascript-debounce\/","og_locale":"en_US","og_type":"article","og_title":"Learn JavaScript Debounce Function By Building Wikipedia Search App","og_description":"In this tutorial, you'll learn about JavaScript debounce function and how to use it to improve application performance.","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/javascript-debounce\/","og_site_name":"PriFix Tutorial","article_modified_time":"2020-09-23T07:40:47+00:00","og_image":[{"url":"https:\/\/https://jsprifix.netlify.app/\/wp-content\/uploads\/2020\/09\/wikipedia-logo.png"}],"twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"11 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/javascript-debounce\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/javascript-debounce\/","name":"Learn JavaScript Debounce Function By Building Wikipedia Search App","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2020-09-14T08:26:32+00:00","dateModified":"2020-09-23T07:40:47+00:00","description":"In this tutorial, you'll learn about JavaScript debounce function and how to use it to improve application performance.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/javascript-debounce\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/javascript-debounce\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/javascript-debounce\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"JavaScript DOM","item":"https:\/\/https://jsprifix.netlify.app/\/javascript-dom\/"},{"@type":"ListItem","position":3,"name":"Learn JavaScript Debounce Function By Building the Wikipedia Search App"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/87647"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=87647"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/87647\/revisions"}],"predecessor-version":[{"id":87794,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/87647\/revisions\/87794"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/85107"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=87647"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}