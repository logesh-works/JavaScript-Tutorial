{"id":86163,"date":"2020-03-26T01:18:33","date_gmt":"2020-03-26T08:18:33","guid":{"rendered":"https:\/\/https://jsprifix.netlify.app/\/?page_id=86163"},"modified":"2022-08-17T07:01:17","modified_gmt":"2022-08-17T14:01:17","slug":"javascript-factory-functions","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-factory-functions\/","title":{"rendered":"JavaScript Factory Functions"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the JavaScript factory functions which are functions that return objects.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the factory functions in JavaScript<\/h2>\n\n\n\n<p>A factory function is a <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-function\/\">function<\/a> that returns a new <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-objects\/\">object<\/a>. The following creates a person object named <code>person1<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> person1 = {\n  <span class=\"hljs-attr\">firstName<\/span>: <span class=\"hljs-string\">'John'<\/span>,\n  <span class=\"hljs-attr\">lastName<\/span>: <span class=\"hljs-string\">'Doe'<\/span>,\n  getFullName() {\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.firstName + <span class=\"hljs-string\">' '<\/span> + <span class=\"hljs-keyword\">this<\/span>.lastName;\n  },\n};\n\n<span class=\"hljs-built_in\">console<\/span>.log(person1.getFullName());<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">John Doe<\/code><\/span><\/pre>\n\n\n<p>The <code>person1<\/code> object has two properties: <code>firstName<\/code> and <code>lastName<\/code>, and one method <code>getFullName()<\/code> that returns the full name.<\/p>\n\n\n\n<p>Suppose that you need to create another similar object called <code>person2<\/code>, you can duplicate the code as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> person2 = {\n  <span class=\"hljs-attr\">firstName<\/span>: <span class=\"hljs-string\">'Jane'<\/span>,\n  <span class=\"hljs-attr\">lastName<\/span>: <span class=\"hljs-string\">'Doe'<\/span>,\n  getFullName() {\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.firstName + <span class=\"hljs-string\">' '<\/span> + <span class=\"hljs-keyword\">this<\/span>.lastName;\n  },\n};\n\n<span class=\"hljs-built_in\">console<\/span>.log(person2.getFullName());<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">Jane Doe<\/code><\/span><\/pre>\n\n\n<p>In this example, the <code>person1<\/code> and <code>person2<\/code> objects have the same properties and methods. <\/p>\n\n\n\n<p>The problem is that the more objects you want to create, the more duplicate code you have.<\/p>\n\n\n\n<p>To avoid copying the same code all over again, you can define a function that creates the <code>person<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">createPerson<\/span>(<span class=\"hljs-params\">firstName, lastName<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">return<\/span> {\n    <span class=\"hljs-attr\">firstName<\/span>: firstName,\n    <span class=\"hljs-attr\">lastName<\/span>: lastName,\n    getFullName() {\n      <span class=\"hljs-keyword\">return<\/span> firstName + <span class=\"hljs-string\">' '<\/span> + lastName;\n    },\n  };\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When a function creates and returns a new object, it is called a factory function. The <code>createPerson()<\/code> is a factory function because it returns a new <code>person<\/code> object.<\/p>\n\n\n\n<p>The following show how to use the <code>createPerson()<\/code> factory function to create two objects <code>person1<\/code> and <code>person2<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">createPerson<\/span>(<span class=\"hljs-params\">firstName, lastName<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">return<\/span> {\n    <span class=\"hljs-attr\">firstName<\/span>: firstName,\n    <span class=\"hljs-attr\">lastName<\/span>: lastName,\n    getFullName() {\n      <span class=\"hljs-keyword\">return<\/span> firstName + <span class=\"hljs-string\">' '<\/span> + lastName;\n    },\n  };\n}\n\n<span class=\"hljs-keyword\">let<\/span> person1 = createPerson(<span class=\"hljs-string\">'John'<\/span>, <span class=\"hljs-string\">'Doe'<\/span>);\n<span class=\"hljs-keyword\">let<\/span> person2 = createPerson(<span class=\"hljs-string\">'Jane'<\/span>, <span class=\"hljs-string\">'Doe'<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(person1.getFullName());\n<span class=\"hljs-built_in\">console<\/span>.log(person2.getFullName());<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>By using the factory function, you create any number of the <code>person<\/code> objects without duplicating code.<\/p>\n\n\n\n<p>When you create an object, the JavaScript engine allocates memory to it. If you create many <code>person<\/code> objects, the JavaScript engine needs lots of memory spaces to store these objects. <\/p>\n\n\n\n<p>However, each <code>person<\/code> object has a copy of the same <code>getFullName()<\/code> method. It&#8217;s not efficient memory management.<\/p>\n\n\n\n<p>To avoid duplicating the same <code>getFullName()<\/code> function in every object, you can remove the <code>getFullName()<\/code> method from the <code>person<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">createPerson<\/span>(<span class=\"hljs-params\">firstName, lastName<\/span>) <\/span>{\n    <span class=\"hljs-keyword\">return<\/span> {\n        <span class=\"hljs-attr\">firstName<\/span>: firstName,\n        <span class=\"hljs-attr\">lastName<\/span>: lastName\n    }\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And move this method to another object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> personActions = {\n  getFullName() {\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.firstName + <span class=\"hljs-string\">' '<\/span> + <span class=\"hljs-keyword\">this<\/span>.lastName;\n  },\n};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And before calling the <code>getFullName()<\/code> method on the <code>person<\/code> object, you can assign the method of the <code>personActions<\/code> object to the <code>person<\/code> object as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> person1 = createPerson(<span class=\"hljs-string\">'John'<\/span>, <span class=\"hljs-string\">'Doe'<\/span>);\n<span class=\"hljs-keyword\">let<\/span> person2 = createPerson(<span class=\"hljs-string\">'Jane'<\/span>, <span class=\"hljs-string\">'Doe'<\/span>);\n\nperson1.getFullName = personActions.getFullName;\nperson2.getFullName = personActions.getFullName;\n\n<span class=\"hljs-built_in\">console<\/span>.log(person1.getFullName());\n<span class=\"hljs-built_in\">console<\/span>.log(person2.getFullName());<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This approach is not scalable if the object has many methods because you have to manually assign them individually. This is why the <code>Object.create()<\/code> method comes into play.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The Object.create() method<\/h2>\n\n\n\n<p>The <code>Object.create()<\/code> method creates a new object using an existing object as the <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-prototype\/\">prototype<\/a> of the new object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">Object<\/span><span class=\"hljs-selector-class\">.create<\/span>(<span class=\"hljs-selector-tag\">proto<\/span>, <span class=\"hljs-selector-attr\">&#91;propertiesObject]<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>So you can use the <code>Object.create()<\/code> as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> personActions = {\n  getFullName() {\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-keyword\">this<\/span>.firstName + <span class=\"hljs-string\">' '<\/span> + <span class=\"hljs-keyword\">this<\/span>.lastName;\n  },\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function<\/span> <span class=\"hljs-title\">createPerson<\/span>(<span class=\"hljs-params\">firstName, lastName<\/span>) <\/span>{\n  <span class=\"hljs-keyword\">let<\/span> person = <span class=\"hljs-built_in\">Object<\/span>.create(personActions);\n  person.firstName = firstName;\n  person.lastName = lastName;\n  <span class=\"hljs-keyword\">return<\/span> person;\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Now, you can create <code>person<\/code> objects and call the methods of the <code>personActions<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> person1 = createPerson(<span class=\"hljs-string\">'John'<\/span>, <span class=\"hljs-string\">'Doe'<\/span>);\n<span class=\"hljs-keyword\">let<\/span> person2 = createPerson(<span class=\"hljs-string\">'Jane'<\/span>, <span class=\"hljs-string\">'Doe'<\/span>);\n\n<span class=\"hljs-built_in\">console<\/span>.log(person1.getFullName());\n<span class=\"hljs-built_in\">console<\/span>.log(person2.getFullName());\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The code works perfectly fine. However, in practice, you will rarely use the factory functions. Instead, you use <a href=\"https:\/\/https://jsprifix.netlify.app/\/es6\/javascript-class\/\" target=\"_blank\" rel=\"noreferrer noopener\">classes<\/a> or <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-constructor-prototype\/\" target=\"_blank\" rel=\"noreferrer noopener\">constructor\/prototype<\/a> patterns.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>A factory function is a function that returns a new object.<\/li><li>Use <code>Object.create()<\/code> to create an object using an existing object as a prototype.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"86163\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-factory-functions\/\"\n\t\t\t\tdata-post-title=\"JavaScript Factory Functions\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"86163\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-factory-functions\/\"\n\t\t\t\tdata-post-title=\"JavaScript Factory Functions\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about the JavaScript factory functions which are functions that return objects.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":58,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Factory Functions<\/title>\n<meta name=\"description\" content=\"In this tutorial, you will learn about the JavaScript factory functions which are functions that return objects.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-factory-functions\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Factory Functions\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, you will learn about the JavaScript factory functions which are functions that return objects.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-factory-functions\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-08-17T14:01:17+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-factory-functions\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-factory-functions\/\",\"name\":\"JavaScript Factory Functions\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2020-03-26T08:18:33+00:00\",\"dateModified\":\"2022-08-17T14:01:17+00:00\",\"description\":\"In this tutorial, you will learn about the JavaScript factory functions which are functions that return objects.\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-factory-functions\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-factory-functions\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-factory-functions\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Factory Functions\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Factory Functions","description":"In this tutorial, you will learn about the JavaScript factory functions which are functions that return objects.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-factory-functions\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Factory Functions","og_description":"In this tutorial, you will learn about the JavaScript factory functions which are functions that return objects.","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-factory-functions\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-08-17T14:01:17+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-factory-functions\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-factory-functions\/","name":"JavaScript Factory Functions","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2020-03-26T08:18:33+00:00","dateModified":"2022-08-17T14:01:17+00:00","description":"In this tutorial, you will learn about the JavaScript factory functions which are functions that return objects.","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-factory-functions\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-factory-functions\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-factory-functions\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript Factory Functions"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86163"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=86163"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86163\/revisions"}],"predecessor-version":[{"id":90278,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/86163\/revisions\/90278"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=86163"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}