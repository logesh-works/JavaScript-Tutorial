{"id":542,"date":"2016-08-31T06:56:57","date_gmt":"2016-08-31T13:56:57","guid":{"rendered":"http:\/\/www.javascripttutorial.net\/?page_id=542"},"modified":"2022-08-18T21:23:06","modified_gmt":"2022-08-19T04:23:06","slug":"javascript-map","status":"publish","type":"page","link":"https:\/\/www.javascripttutorial.net\/es6\/javascript-map\/","title":{"rendered":"JavaScript Map Object"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the JavaScript Map object that maps a key to a value.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to JavaScript Map object<\/h2>\n\n\n\n<p>Before ES6, we often used an <a href=\"https:\/\/www.javascripttutorial.net\/javascript-objects\/\">object<\/a> to emulate a map by mapping a key to a value of any type. But using an object as a map has some side effects:<\/p>\n\n\n\n<ol><li>An object always has a default key like the <a href=\"https:\/\/www.javascripttutorial.net\/javascript-prototype\/\">prototype<\/a>.<\/li><li>A key of an object must be a <a href=\"https:\/\/www.javascripttutorial.net\/javascript-string\/\">string<\/a> or a <a href=\"https:\/\/www.javascripttutorial.net\/es6\/symbol\/\">symbol<\/a>, you cannot use an object as a key.<\/li><li>An object does not have a property that represents the size of the map.<\/li><\/ol>\n\n\n\n<p>ES6 provides a new collection type called <code>Map<\/code> that addresses these deficiencies.<\/p>\n\n\n\n<p>By definition, a <code>Map<\/code> object holds key-value pairs. Keys are unique in a Map&#8217;s collection. In other words, a key in a Map object only appears once.<\/p>\n\n\n\n<p>Keys and values of a Map can be any values.  <\/p>\n\n\n\n<p>When iterating a <code>Map<\/code> object, each iteration returns a 2-member array of <code>[key, value]<\/code>. The iteration order follows the insertion order which corresponds to the order in which each key-value pair was first inserted into the Map by the <code>set()<\/code> method.<\/p>\n\n\n\n<p>To create a new <code>Map<\/code>, you use the following syntax:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> map = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Map<\/span>(&#91;iterable]);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>Map()<\/code> accepts an optional <a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-iterator\/\">iterable<\/a> object whose elements are key-value pairs.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Useful JavaScript Map methods<\/h2>\n\n\n\n<ul><li><code>clear()<\/code> &#8211; removes all elements from the map object.<\/li><li>\u00a0<code>delete(key)<\/code> &#8211; removes an element specified by the key. It returns if the element is in the map, or false if it does not.<\/li><li>\u00a0<code>entries()<\/code> &#8211; returns a new Iterator object that contains an array of <code>[key, value]<\/code> for each element in the map object. The order of objects in the map is the same as the insertion order.<\/li><li>\u00a0<code>forEach(callback[, thisArg])<\/code> &#8211; invokes a callback for each key-value pair in the map in the insertion order. The optional thisArg parameter sets the <code>this<\/code> value for each callback.<\/li><li>\u00a0get(key) &#8211; returns the value associated with the key. If the key does not exist, it returns undefined.<\/li><li>\u00a0has(key) &#8211; returns true if a value associated with the key exists or false otherwise.<\/li><li>\u00a0<code>keys()<\/code> &#8211; returns a new Iterator that contains the keys for elements in insertion order.<\/li><li>\u00a0<code>set(key, value)<\/code> &#8211; sets the value for the key in the map object. It returns the map object itself therefore you can chain this method with other methods.<\/li><li>\u00a0<code>values()<\/code> returns a new iterator object that contains values for each element in insertion order.<\/li><\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">JavaScript Map examples<\/h2>\n\n\n\n<p>Let&#8217;s take some examples of using a Map object.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Create a new Map object<\/h3>\n\n\n\n<p>Suppose you have a list of <code>user<\/code> objects as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> john = {<span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'John Doe'<\/span>},\n    lily = {<span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'Lily Bush'<\/span>},\n    peter = {<span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'Peter Drucker'<\/span>};<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Assuming that you have to create a map of users and roles. In this case, you use the following code:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> userRoles = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Map<\/span>();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>userRoles<\/code> is an instance of the <code>Map<\/code> object and its type is an object as illustrated in the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span>(userRoles)); <span class=\"hljs-comment\">\/\/ object<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(userRoles <span class=\"hljs-keyword\">instanceof<\/span> <span class=\"hljs-built_in\">Map<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Add elements to a Map<\/h3>\n\n\n\n<p>To assign a role to a user, you use the <code>set()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">userRoles.set(john, <span class=\"hljs-string\">'admin'<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>set()<\/code> method maps user <code>john<\/code> with the <code>admin<\/code> role. Since the <code>set()<\/code> method is chainable, you can save some typing as shown in this example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">userRoles.set(lily, <span class=\"hljs-string\">'editor'<\/span>)\n          .set(peter, <span class=\"hljs-string\">'subscriber'<\/span>);\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Initialize a map with an iterable object<\/h3>\n\n\n\n<p>As mentioned earlier, you can pass an iterable object to the <code>Map()<\/code> constructor:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> userRoles = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Map<\/span>(&#91;\n    &#91;john, <span class=\"hljs-string\">'admin'<\/span>],\n    &#91;lily, <span class=\"hljs-string\">'editor'<\/span>],\n    &#91;peter, <span class=\"hljs-string\">'subscriber'<\/span>]\n]);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Get an element from a map by key<\/h3>\n\n\n\n<p>If you want to see the roles of <code>John<\/code> , you use the <code>get()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">userRoles.get(john); <span class=\"hljs-comment\">\/\/ admin<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you pass a key that does not exist, the <code>get()<\/code> method will return <code>undefined<\/code>.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> foo = {<span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'Foo'<\/span>};\nuserRoles.get(foo); <span class=\"hljs-comment\">\/\/undefined<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Check the existence of an element by key<\/h3>\n\n\n\n<p>To check if a key exists in the map, you use the <code>has()<\/code> method.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">userRoles.has(foo); <span class=\"hljs-comment\">\/\/ false<\/span>\nuserRoles.has(lily); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Get the number of elements in the map<\/h3>\n\n\n\n<p>The <code>size<\/code> property returns the number of entries of the Map object.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(userRoles.size); <span class=\"hljs-comment\">\/\/ 3<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Iterate over map keys<\/h3>\n\n\n\n<p>To get the keys of a <code>Map<\/code> object, you use the <code>keys()<\/code> method. The <code>keys()<\/code> returns a new <a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-iterator\/\">iterator<\/a> object that contains the keys of elements in the map.<\/p>\n\n\n\n<p>The following example displays the username of the users in the <code>userRoles<\/code> map object.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> john = { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'John Doe'<\/span> },\n  lily = { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'Lily Bush'<\/span> },\n  peter = { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'Peter Drucker'<\/span> };\n\n<span class=\"hljs-keyword\">let<\/span> userRoles = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Map<\/span>(&#91;\n  &#91;john, <span class=\"hljs-string\">'admin'<\/span>],\n  &#91;lily, <span class=\"hljs-string\">'editor'<\/span>],\n  &#91;peter, <span class=\"hljs-string\">'subscriber'<\/span>],\n]);\n\n<span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">const<\/span> user <span class=\"hljs-keyword\">of<\/span> userRoles.keys()) {\n  <span class=\"hljs-built_in\">console<\/span>.log(user.name);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">John Doe\nLily Bush\nPeter Drucker<\/code><\/span><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Iterate over map values<\/h3>\n\n\n\n<p>Similarly, you can use the <code>values()<\/code> method to get an iterator object that contains values for all the elements in the map:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> john = { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'John Doe'<\/span> },\n  lily = { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'Lily Bush'<\/span> },\n  peter = { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'Peter Drucker'<\/span> };\n\n<span class=\"hljs-keyword\">let<\/span> userRoles = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Map<\/span>(&#91;\n  &#91;john, <span class=\"hljs-string\">'admin'<\/span>],\n  &#91;lily, <span class=\"hljs-string\">'editor'<\/span>],\n  &#91;peter, <span class=\"hljs-string\">'subscriber'<\/span>],\n]);\n\n<span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">let<\/span> role <span class=\"hljs-keyword\">of<\/span> userRoles.values()) {\n  <span class=\"hljs-built_in\">console<\/span>.log(role);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">admin\neditor\nsubscriber<\/code><\/span><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Iterate over map elements<\/h3>\n\n\n\n<p>Also, the <code>entries()<\/code> method returns an iterator object that contains an array of <code>[key,value]<\/code> of each element in the <code>Map<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> john = { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'John Doe'<\/span> },\n  lily = { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'Lily Bush'<\/span> },\n  peter = { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'Peter Drucker'<\/span> };\n\n<span class=\"hljs-keyword\">let<\/span> userRoles = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Map<\/span>(&#91;\n  &#91;john, <span class=\"hljs-string\">'admin'<\/span>],\n  &#91;lily, <span class=\"hljs-string\">'editor'<\/span>],\n  &#91;peter, <span class=\"hljs-string\">'subscriber'<\/span>],\n]);\n\n<span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">const<\/span> role <span class=\"hljs-keyword\">of<\/span> userRoles.entries()) {\n  <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${role&#91;<span class=\"hljs-number\">0<\/span>].name}<\/span>: <span class=\"hljs-subst\">${role&#91;<span class=\"hljs-number\">1<\/span>]}<\/span>`<\/span>);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To make the iteration more natural, you can use <a href=\"https:\/\/www.javascripttutorial.net\/es6\/destructuring\/\">destructuring<\/a> as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> john = { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'John Doe'<\/span> },\n  lily = { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'Lily Bush'<\/span> },\n  peter = { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'Peter Drucker'<\/span> };\n\n<span class=\"hljs-keyword\">let<\/span> userRoles = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Map<\/span>(&#91;\n  &#91;john, <span class=\"hljs-string\">'admin'<\/span>],\n  &#91;lily, <span class=\"hljs-string\">'editor'<\/span>],\n  &#91;peter, <span class=\"hljs-string\">'subscriber'<\/span>],\n]);\n\n<span class=\"hljs-keyword\">for<\/span> (<span class=\"hljs-keyword\">let<\/span> &#91;user, role] <span class=\"hljs-keyword\">of<\/span> userRoles.entries()) {\n  <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${user.name}<\/span>: <span class=\"hljs-subst\">${role}<\/span>`<\/span>);\n}\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In addition to <code><a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-for-of\/\">for...of<\/a><\/code> loop, you can use the <code>forEach()<\/code> method of the map object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> john = { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'John Doe'<\/span> },\n  lily = { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'Lily Bush'<\/span> },\n  peter = { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'Peter Drucker'<\/span> };\n\n<span class=\"hljs-keyword\">let<\/span> userRoles = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Map<\/span>(&#91;\n  &#91;john, <span class=\"hljs-string\">'admin'<\/span>],\n  &#91;lily, <span class=\"hljs-string\">'editor'<\/span>],\n  &#91;peter, <span class=\"hljs-string\">'subscriber'<\/span>],\n]);\n\nuserRoles.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">role, user<\/span>) =&gt;<\/span> <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${user.name}<\/span>: <span class=\"hljs-subst\">${role}<\/span>`<\/span>));<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Convert map keys or values to a array<\/h3>\n\n\n\n<p>Sometimes, you want to work with an array instead of an iterable object, in this case, you can use the <a href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-spread\/\">spread operator<\/a>.<\/p>\n\n\n\n<p>The following example converts keys for each element into an array of keys:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var<\/span> keys = &#91;...userRoles.keys()];\n<span class=\"hljs-built_in\">console<\/span>.log(keys);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">&#91; { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'John Doe'<\/span> },\n  { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'Lily Bush'<\/span> },\n  { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">'Peter Drucker'<\/span> } ]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And the following converts the values of elements to an array:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-19\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> roles = &#91;...userRoles.values()];\n<span class=\"hljs-built_in\">console<\/span>.log(roles);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-19\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-20\" data-shcb-language-name=\"JSON \/ JSON with Comments\" data-shcb-language-slug=\"json\"><span><code class=\"hljs language-json\">&#91; 'admin', 'editor', 'subscriber' ]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-20\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JSON \/ JSON with Comments<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">json<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Delete an element by key<\/h3>\n\n\n\n<p>To delete an entry in the map, you use the <code>delete()<\/code> method.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-21\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">userRoles<\/span><span class=\"hljs-selector-class\">.delete<\/span>(<span class=\"hljs-selector-tag\">john<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-21\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3 class=\"wp-block-heading\">Delete all elements in the map<\/h3>\n\n\n\n<p>To delete all entries in the <code>Map<\/code> object, you use the <code>clear()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-22\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">userRoles<\/span><span class=\"hljs-selector-class\">.clear<\/span>();<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-22\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Hence, the size of the map now is zero.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-23\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(userRoles.size); <span class=\"hljs-comment\">\/\/ 0<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-23\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">WeakMap<\/h2>\n\n\n\n<p>A <code>WeakMap<\/code> is similar to a <code>Map<\/code> except the keys of a <code>WeakMap<\/code> must be objects. It means that when a reference to a key (an object) is out of scope, the corresponding value is automatically released from the memory.<\/p>\n\n\n\n<p>A <code>WeakMap<\/code> only has subset methods of a <code>Map<\/code> object:<\/p>\n\n\n\n<ul><li>&nbsp;<code>get(key)<\/code><\/li><li>&nbsp;<code>set(key, value)<\/code><\/li><li>&nbsp;<code>has(key)<\/code><\/li><li>&nbsp;<code>delete(key)<\/code><\/li><\/ul>\n\n\n\n<p>Here are the main difference between a <code>Map<\/code> and a <code>WeekMap<\/code>:<\/p>\n\n\n\n<ul><li>Elements of a WeakMap cannot be iterated.<\/li><li>Cannot clear all elements at once.<\/li><li>Cannot check the size of a WeakMap.<\/li><\/ul>\n\n\n\n<p>In this tutorial, you have learned how to work with the JavaScript Map object and its useful methods to manipulate entries in the map.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"542\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-map\/\"\n\t\t\t\tdata-post-title=\"JavaScript Map Object\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"542\"\n\t\t\t\tdata-post-url=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-map\/\"\n\t\t\t\tdata-post-title=\"JavaScript Map Object\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about the JavaScript Map object that maps a key to a value.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":107,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>The Essential Guide to JavaScript Map: How To Use Maps Effectively<\/title>\n<meta name=\"description\" content=\"This tutorial introduces you to the JavaScript Map object and shows you how to manipulate maps effectively.\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-map\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"The Essential Guide to JavaScript Map: How To Use Maps Effectively\" \/>\n<meta property=\"og:description\" content=\"This tutorial introduces you to the JavaScript Map object and shows you how to manipulate maps effectively.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.javascripttutorial.net\/es6\/javascript-map\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-08-19T04:23:06+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-map\/\",\"url\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-map\/\",\"name\":\"The Essential Guide to JavaScript Map: How To Use Maps Effectively\",\"isPartOf\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\"},\"datePublished\":\"2016-08-31T13:56:57+00:00\",\"dateModified\":\"2022-08-19T04:23:06+00:00\",\"description\":\"This tutorial introduces you to the JavaScript Map object and shows you how to manipulate maps effectively.\",\"breadcrumb\":{\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-map\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.javascripttutorial.net\/es6\/javascript-map\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.javascripttutorial.net\/es6\/javascript-map\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/www.javascripttutorial.net\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Map Object\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.javascripttutorial.net\/#website\",\"url\":\"https:\/\/www.javascripttutorial.net\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.javascripttutorial.net\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"The Essential Guide to JavaScript Map: How To Use Maps Effectively","description":"This tutorial introduces you to the JavaScript Map object and shows you how to manipulate maps effectively.","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.javascripttutorial.net\/es6\/javascript-map\/","og_locale":"en_US","og_type":"article","og_title":"The Essential Guide to JavaScript Map: How To Use Maps Effectively","og_description":"This tutorial introduces you to the JavaScript Map object and shows you how to manipulate maps effectively.","og_url":"https:\/\/www.javascripttutorial.net\/es6\/javascript-map\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-08-19T04:23:06+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"6 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/www.javascripttutorial.net\/es6\/javascript-map\/","url":"https:\/\/www.javascripttutorial.net\/es6\/javascript-map\/","name":"The Essential Guide to JavaScript Map: How To Use Maps Effectively","isPartOf":{"@id":"https:\/\/www.javascripttutorial.net\/#website"},"datePublished":"2016-08-31T13:56:57+00:00","dateModified":"2022-08-19T04:23:06+00:00","description":"This tutorial introduces you to the JavaScript Map object and shows you how to manipulate maps effectively.","breadcrumb":{"@id":"https:\/\/www.javascripttutorial.net\/es6\/javascript-map\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.javascripttutorial.net\/es6\/javascript-map\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.javascripttutorial.net\/es6\/javascript-map\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/www.javascripttutorial.net\/"},{"@type":"ListItem","position":3,"name":"JavaScript Map Object"}]},{"@type":"WebSite","@id":"https:\/\/www.javascripttutorial.net\/#website","url":"https:\/\/www.javascripttutorial.net\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.javascripttutorial.net\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/542"}],"collection":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/comments?post=542"}],"version-history":[{"count":5,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/542\/revisions"}],"predecessor-version":[{"id":90343,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/542\/revisions\/90343"}],"up":[{"embeddable":true,"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/www.javascripttutorial.net\/wp-json\/wp\/v2\/media?parent=542"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}