{"id":150,"date":"2016-08-05T20:57:59","date_gmt":"2016-08-06T03:57:59","guid":{"rendered":"http:\/\/https://jsprifix.netlify.app/\/?page_id=150"},"modified":"2022-01-11T16:43:21","modified_gmt":"2022-01-12T00:43:21","slug":"javascript-boolean","status":"publish","type":"page","link":"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/","title":{"rendered":"JavaScript Boolean"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about the JavaScript <code>Boolean<\/code> object and the differences between the <code>Boolean<\/code> object and the&nbsp;<code>boolean<\/code> primitive type.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">JavaScript boolean primitive type<\/h2>\n\n\n\n<p>JavaScript provides a <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-data-types\/#boolean\">boolean<\/a> primitive type that has two values of <code>true<\/code> and <code>false<\/code>. The following example declares two <a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-variables\/\">variables<\/a> that hold boolean values of <code>false<\/code> and <code>true<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> isPending = <span class=\"hljs-literal\">false<\/span>;\n<span class=\"hljs-keyword\">let<\/span> isDone = <span class=\"hljs-literal\">true<\/span>;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When you&nbsp;apply the &nbsp;<code>typeof<\/code> operator to a variable that holds a primitive boolean value, you get the <code>boolean<\/code> as&nbsp;the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span>(isPending)); <span class=\"hljs-comment\">\/\/  boolean<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span>(isDone)); <span class=\"hljs-comment\">\/\/ boolean<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">JavaScript Boolean object<\/h2>\n\n\n\n<p>In addition to the <code>boolean<\/code> primitive type, JavaScript also provides you with the global <code>Boolean()<\/code>&nbsp;function, with the letter <code>B<\/code> in uppercase, to cast a value of another type to <code>boolean.<\/code><\/p>\n\n\n\n<p>The following example shows how to use the <code>Boolean()<\/code> function to convert a string into a boolean value. Because the string is not empty, it returns <code>true<\/code>.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> a = <span class=\"hljs-built_in\">Boolean<\/span>(<span class=\"hljs-string\">'Hi'<\/span>);\n<span class=\"hljs-built_in\">console<\/span>.log(a); <span class=\"hljs-comment\">\/\/ true<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span>(a)); <span class=\"hljs-comment\">\/\/ boolean<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>Boolean<\/code> is also a wrapper object of the <code>boolean<\/code> primitive type. It means that when you pass either <code>true<\/code> or <code>false<\/code> to the <code>Boolean<\/code> constructor, it&#8217;ll create a <code>Boolean<\/code> object. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> b = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Boolean<\/span>(<span class=\"hljs-literal\">false<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To get the primitive value back, you call the <code>valueOf()<\/code> method of the <code>Boolean<\/code> object as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(b.valueOf()); <span class=\"hljs-comment\">\/\/ false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, if you call the <code>toString()<\/code> method of a <code>Boolean<\/code> object, you get&nbsp;a string value&nbsp;<code>\"true\"<\/code> or <code>\"false\"<\/code>. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(b.toString()); <span class=\"hljs-comment\">\/\/ \"false\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">JavaScript boolean vs. Boolean<\/h2>\n\n\n\n<p>Consider this example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> completed = <span class=\"hljs-literal\">true<\/span>;\n<span class=\"hljs-keyword\">let<\/span> active = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Boolean<\/span>(<span class=\"hljs-literal\">false<\/span>);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>First, <code>active<\/code> is an object so you can add a property to it:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">active.primitiveValue = active.valueOf();\n<span class=\"hljs-built_in\">console<\/span>.log(active.primitiveValue); <span class=\"hljs-comment\">\/\/ false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, you cannot do it with the primitive boolean variable like the <code>completed<\/code> variable:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">completed.name = <span class=\"hljs-string\">'primitive'<\/span>;\n<span class=\"hljs-built_in\">console<\/span>.log(completed.name); <span class=\"hljs-comment\">\/\/ undefined<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, the <code>typeof<\/code> of&nbsp;Boolean object returns <code>object<\/code>, whereas the&nbsp;<code>typeof<\/code> of a primitive boolean value returns <code>boolean<\/code>.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span> completed); <span class=\"hljs-comment\">\/\/ boolean<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-keyword\">typeof<\/span> active); <span class=\"hljs-comment\">\/\/ object<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Third, when applying the &nbsp;<code>instanceof<\/code> operator to a <code>Boolean<\/code> object, it returns <code>true<\/code>. However, it returns <code>false<\/code> if you apply the &nbsp;<code>instanceof<\/code>&nbsp;operator to a boolean value.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">console<\/span>.log(completed <span class=\"hljs-keyword\">instanceof<\/span> <span class=\"hljs-built_in\">Boolean<\/span>); <span class=\"hljs-comment\">\/\/ false<\/span>\n<span class=\"hljs-built_in\">console<\/span>.log(active <span class=\"hljs-keyword\">instanceof<\/span> <span class=\"hljs-built_in\">Boolean<\/span>); <span class=\"hljs-comment\">\/\/ true<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It is a good practice <strong>never<\/strong> to use the <code>Boolean<\/code> object because it will create many confusions, especially when using in an expression. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let<\/span> falseObj = <span class=\"hljs-keyword\">new<\/span> <span class=\"hljs-built_in\">Boolean<\/span>(<span class=\"hljs-literal\">false<\/span>);\n<span class=\"hljs-keyword\">if<\/span> (falseObj) {\n    <span class=\"hljs-built_in\">console<\/span>.log(<span class=\"hljs-string\">'weird part of the Boolean object'<\/span>);\n}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How the script works.<\/p>\n\n\n\n<ul><li>First,&nbsp;create <code>falseObj<\/code> as a <code>Boolean<\/code> object wrapper for the <code>false<\/code> value.<\/li><li>Second, use <code>falseObj<\/code> in the &nbsp;<a href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-if-else\/\"><code>if<\/code><\/a> statement. Because <code>falseObj<\/code> is an object, and JavaScript engine <em>coerces<\/em> it to a boolean value of <code>true<\/code>. As a result, the statement inside the <code>if<\/code> block is executed.<\/li><\/ul>\n\n\n\n<p>The following table summarizes the differences between the JavaScript <code>Boolean<\/code> and <code>boolean<\/code>:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Operator<\/th><th>boolean<\/th><th>Boolean<\/th><\/tr><\/thead><tbody><tr><td>&nbsp;<code>typeof<\/code><\/td><td>boolean<\/td><td>object<\/td><\/tr><tr><td>&nbsp;<code>instanceof<\/code> Boolean<\/td><td>false<\/td><td>true<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>It is recommended that you use the <code>Boolean()<\/code> function to convert a value of a different type to a Boolean type, but you should never use the <code>Boolean<\/code> as a wrapper object of a primitive boolean value.<\/p>\n\n\n\n<p>In this tutorial, you have learned about the JavaScript <code>Boolean<\/code> object and the differences between the <code>Boolean<\/code> object and <code>boolean<\/code> primitive type.<\/p>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Was this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"150\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/\"\n\t\t\t\tdata-post-title=\"JavaScript Boolean\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"150\"\n\t\t\t\tdata-post-url=\"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/\"\n\t\t\t\tdata-post-title=\"JavaScript Boolean\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you will learn about the JavaScript Boolean object and the differences between the Boolean object and the&nbsp;boolean primitive type. JavaScript boolean primitive type JavaScript provides a boolean primitive type that has two values of true and false. The following example declares two variables that hold boolean values of false and true: [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":14,"menu_order":127,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v20.9 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>JavaScript Boolean vs. boolean: Explained By Examples<\/title>\n<meta name=\"description\" content=\"In this tutorial, we will introduce you to the JavaScript Boolean object and show you the differences between Boolean object and boolean primitive type\" \/>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"JavaScript Boolean vs. boolean: Explained By Examples\" \/>\n<meta property=\"og:description\" content=\"In this tutorial, we will introduce you to the JavaScript Boolean object and show you the differences between Boolean object and boolean primitive type\" \/>\n<meta property=\"og:url\" content=\"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/\" \/>\n<meta property=\"og:site_name\" content=\"PriFix Tutorial\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-12T00:43:21+00:00\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data1\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/\",\"name\":\"JavaScript Boolean vs. boolean: Explained By Examples\",\"isPartOf\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\"},\"datePublished\":\"2016-08-06T03:57:59+00:00\",\"dateModified\":\"2022-01-12T00:43:21+00:00\",\"description\":\"In this tutorial, we will introduce you to the JavaScript Boolean object and show you the differences between Boolean object and boolean primitive type\",\"breadcrumb\":{\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"PriFix Tutorial\",\"item\":\"https:\/\/https://jsprifix.netlify.app/\/\"},{\"@type\":\"ListItem\",\"position\":3,\"name\":\"JavaScript Boolean\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/https://jsprifix.netlify.app/\/#website\",\"url\":\"https:\/\/https://jsprifix.netlify.app/\/\",\"name\":\"PriFix Tutorial\",\"description\":\"A comprehensive PriFix Tutorial\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"JavaScript Boolean vs. boolean: Explained By Examples","description":"In this tutorial, we will introduce you to the JavaScript Boolean object and show you the differences between Boolean object and boolean primitive type","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/","og_locale":"en_US","og_type":"article","og_title":"JavaScript Boolean vs. boolean: Explained By Examples","og_description":"In this tutorial, we will introduce you to the JavaScript Boolean object and show you the differences between Boolean object and boolean primitive type","og_url":"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/","og_site_name":"PriFix Tutorial","article_modified_time":"2022-01-12T00:43:21+00:00","twitter_card":"summary_large_image","twitter_misc":{"Est. reading time":"3 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"WebPage","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/","url":"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/","name":"JavaScript Boolean vs. boolean: Explained By Examples","isPartOf":{"@id":"https:\/\/https://jsprifix.netlify.app/\/#website"},"datePublished":"2016-08-06T03:57:59+00:00","dateModified":"2022-01-12T00:43:21+00:00","description":"In this tutorial, we will introduce you to the JavaScript Boolean object and show you the differences between Boolean object and boolean primitive type","breadcrumb":{"@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/https://jsprifix.netlify.app/\/javascript-boolean\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":2,"name":"PriFix Tutorial","item":"https:\/\/https://jsprifix.netlify.app/\/"},{"@type":"ListItem","position":3,"name":"JavaScript Boolean"}]},{"@type":"WebSite","@id":"https:\/\/https://jsprifix.netlify.app/\/#website","url":"https:\/\/https://jsprifix.netlify.app/\/","name":"PriFix Tutorial","description":"A comprehensive PriFix Tutorial","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/https://jsprifix.netlify.app/\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}},"_links":{"self":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/150"}],"collection":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/comments?post=150"}],"version-history":[{"count":5,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/150\/revisions"}],"predecessor-version":[{"id":88766,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/150\/revisions\/88766"}],"up":[{"embeddable":true,"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/pages\/14"}],"wp:attachment":[{"href":"https:\/\/https://jsprifix.netlify.app/\/wp-json\/wp\/v2\/media?parent=150"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}